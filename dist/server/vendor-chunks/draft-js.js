"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/draft-js";
exports.ids = ["vendor-chunks/draft-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/draft-js/lib/AtomicBlockUtils.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/AtomicBlockUtils.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar moveBlockInContentState = __webpack_require__(/*! ./moveBlockInContentState */ \"(ssr)/./node_modules/draft-js/lib/moveBlockInContentState.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar List = Immutable.List, Repeat = Immutable.Repeat;\nvar AtomicBlockUtils = {\n    insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n        var contentState = editorState.getCurrentContent();\n        var selectionState = editorState.getSelection();\n        var afterRemoval = DraftModifier.removeRange(contentState, selectionState, \"backward\");\n        var targetSelection = afterRemoval.getSelectionAfter();\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n        var insertionTarget = afterSplit.getSelectionAfter();\n        var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, \"atomic\");\n        var charData = CharacterMetadata.create({\n            entity: entityKey\n        });\n        var atomicBlockConfig = {\n            key: generateRandomKey(),\n            type: \"atomic\",\n            text: character,\n            characterList: List(Repeat(charData, character.length))\n        };\n        var atomicDividerBlockConfig = {\n            key: generateRandomKey(),\n            type: \"unstyled\"\n        };\n        if (experimentalTreeDataSupport) {\n            atomicBlockConfig = _objectSpread({}, atomicBlockConfig, {\n                nextSibling: atomicDividerBlockConfig.key\n            });\n            atomicDividerBlockConfig = _objectSpread({}, atomicDividerBlockConfig, {\n                prevSibling: atomicBlockConfig.key\n            });\n        }\n        var fragmentArray = [\n            new ContentBlockRecord(atomicBlockConfig),\n            new ContentBlockRecord(atomicDividerBlockConfig)\n        ];\n        var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n        var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n        var newContent = withAtomicBlock.merge({\n            selectionBefore: selectionState,\n            selectionAfter: withAtomicBlock.getSelectionAfter().set(\"hasFocus\", true)\n        });\n        return EditorState.push(editorState, newContent, \"insert-fragment\");\n    },\n    moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n        var contentState = editorState.getCurrentContent();\n        var selectionState = editorState.getSelection();\n        var withMovedAtomicBlock;\n        if (insertionMode === \"before\" || insertionMode === \"after\") {\n            var targetBlock = contentState.getBlockForKey(insertionMode === \"before\" ? targetRange.getStartKey() : targetRange.getEndKey());\n            withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n        } else {\n            var afterRemoval = DraftModifier.removeRange(contentState, targetRange, \"backward\");\n            var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n            var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n            if (selectionAfterRemoval.getStartOffset() === 0) {\n                withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, \"before\");\n            } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n                withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, \"after\");\n            } else {\n                var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n                var selectionAfterSplit = afterSplit.getSelectionAfter();\n                var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n                withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, \"before\");\n            }\n        }\n        var newContent = withMovedAtomicBlock.merge({\n            selectionBefore: selectionState,\n            selectionAfter: withMovedAtomicBlock.getSelectionAfter().set(\"hasFocus\", true)\n        });\n        return EditorState.push(editorState, newContent, \"move-block\");\n    }\n};\nmodule.exports = AtomicBlockUtils;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/AtomicBlockUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js":
/*!******************************************************!*\
  !*** ./node_modules/draft-js/lib/BlockMapBuilder.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar OrderedMap = Immutable.OrderedMap;\nvar BlockMapBuilder = {\n    createFromArray: function createFromArray(blocks) {\n        return OrderedMap(blocks.map(function(block) {\n            return [\n                block.getKey(),\n                block\n            ];\n        }));\n    }\n};\nmodule.exports = BlockMapBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0Jsb2NrTWFwQnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLHlGQUFXO0FBRW5DLElBQUlDLGFBQWFGLFVBQVVFLFVBQVU7QUFDckMsSUFBSUMsa0JBQWtCO0lBQ3BCQyxpQkFBaUIsU0FBU0EsZ0JBQWdCQyxNQUFNO1FBQzlDLE9BQU9ILFdBQVdHLE9BQU9DLEdBQUcsQ0FBQyxTQUFVQyxLQUFLO1lBQzFDLE9BQU87Z0JBQUNBLE1BQU1DLE1BQU07Z0JBQUlEO2FBQU07UUFDaEM7SUFDRjtBQUNGO0FBQ0FFLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0Jsb2NrTWFwQnVpbGRlci5qcz8xNGE3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG52YXIgT3JkZXJlZE1hcCA9IEltbXV0YWJsZS5PcmRlcmVkTWFwO1xudmFyIEJsb2NrTWFwQnVpbGRlciA9IHtcbiAgY3JlYXRlRnJvbUFycmF5OiBmdW5jdGlvbiBjcmVhdGVGcm9tQXJyYXkoYmxvY2tzKSB7XG4gICAgcmV0dXJuIE9yZGVyZWRNYXAoYmxvY2tzLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBbYmxvY2suZ2V0S2V5KCksIGJsb2NrXTtcbiAgICB9KSk7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrTWFwQnVpbGRlcjsiXSwibmFtZXMiOlsiSW1tdXRhYmxlIiwicmVxdWlyZSIsIk9yZGVyZWRNYXAiLCJCbG9ja01hcEJ1aWxkZXIiLCJjcmVhdGVGcm9tQXJyYXkiLCJibG9ja3MiLCJtYXAiLCJibG9jayIsImdldEtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/BlockTree.js":
/*!************************************************!*\
  !*** ./node_modules/draft-js/lib/BlockTree.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar getOwnObjectValues = __webpack_require__(/*! ./getOwnObjectValues */ \"(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Repeat = Immutable.Repeat, Record = Immutable.Record;\nvar returnTrue = function returnTrue() {\n    return true;\n};\nvar defaultLeafRange = {\n    start: null,\n    end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n    start: null,\n    end: null,\n    decoratorKey: null,\n    leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n    /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */ generate: function generate(contentState, block, decorator) {\n        var textLength = block.getLength();\n        if (!textLength) {\n            return List.of(new DecoratorRange({\n                start: 0,\n                end: 0,\n                decoratorKey: null,\n                leaves: List.of(new LeafRange({\n                    start: 0,\n                    end: 0\n                }))\n            }));\n        }\n        var leafSets = [];\n        var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n        var chars = block.getCharacterList();\n        findRangesImmutable(decorations, areEqual, returnTrue, function(start, end) {\n            leafSets.push(new DecoratorRange({\n                start: start,\n                end: end,\n                decoratorKey: decorations.get(start),\n                leaves: generateLeaves(chars.slice(start, end).toList(), start)\n            }));\n        });\n        return List(leafSets);\n    },\n    fromJS: function fromJS(_ref) {\n        var leaves = _ref.leaves, other = _objectWithoutPropertiesLoose(_ref, [\n            \"leaves\"\n        ]);\n        return new DecoratorRange(_objectSpread({}, other, {\n            leaves: leaves != null ? List(Array.isArray(leaves) ? leaves : getOwnObjectValues(leaves)).map(function(leaf) {\n                return LeafRange(leaf);\n            }) : null\n        }));\n    }\n};\n/**\n * Generate LeafRange records for a given character list.\n */ function generateLeaves(characters, offset) {\n    var leaves = [];\n    var inlineStyles = characters.map(function(c) {\n        return c.getStyle();\n    }).toList();\n    findRangesImmutable(inlineStyles, areEqual, returnTrue, function(start, end) {\n        leaves.push(new LeafRange({\n            start: start + offset,\n            end: end + offset\n        }));\n    });\n    return List(leaves);\n}\nfunction areEqual(a, b) {\n    return a === b;\n}\nmodule.exports = BlockTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0Jsb2NrVHJlZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLFNBQVNBLGNBQWNDLE1BQU07SUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1FBQUUsSUFBSUcsU0FBU0YsU0FBUyxDQUFDRCxFQUFFLElBQUksT0FBT0MsU0FBUyxDQUFDRCxFQUFFLEdBQUcsQ0FBQztRQUFHLElBQUlJLFVBQVVDLE9BQU9DLElBQUksQ0FBQ0g7UUFBUyxJQUFJLE9BQU9FLE9BQU9FLHFCQUFxQixLQUFLLFlBQVk7WUFBRUgsVUFBVUEsUUFBUUksTUFBTSxDQUFDSCxPQUFPRSxxQkFBcUIsQ0FBQ0osUUFBUU0sTUFBTSxDQUFDLFNBQVVDLEdBQUc7Z0JBQUksT0FBT0wsT0FBT00sd0JBQXdCLENBQUNSLFFBQVFPLEtBQUtFLFVBQVU7WUFBRTtRQUFLO1FBQUVSLFFBQVFTLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUlDLGdCQUFnQmhCLFFBQVFlLEtBQUtYLE1BQU0sQ0FBQ1csSUFBSTtRQUFHO0lBQUk7SUFBRSxPQUFPZjtBQUFRO0FBRWhlLFNBQVNnQixnQkFBZ0JDLEdBQUcsRUFBRUYsR0FBRyxFQUFFRyxLQUFLO0lBQUksSUFBSUgsT0FBT0UsS0FBSztRQUFFWCxPQUFPYSxjQUFjLENBQUNGLEtBQUtGLEtBQUs7WUFBRUcsT0FBT0E7WUFBT0wsWUFBWTtZQUFNTyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDRixJQUFJLEdBQUdHO0lBQU87SUFBRSxPQUFPRDtBQUFLO0FBRWhOLFNBQVNLLDhCQUE4QmxCLE1BQU0sRUFBRW1CLFFBQVE7SUFBSSxJQUFJbkIsVUFBVSxNQUFNLE9BQU8sQ0FBQztJQUFHLElBQUlKLFNBQVMsQ0FBQztJQUFHLElBQUl3QixhQUFhbEIsT0FBT0MsSUFBSSxDQUFDSDtJ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T0EsUUFBUWtDO1lBQ2ZqQyxLQUFLQSxNQUFNaUM7UUFDYjtJQUNGO0lBQ0EsT0FBT3ZDLEtBQUtVO0FBQ2Q7QUFFQSxTQUFTZSxTQUFTa0IsQ0FBQyxFQUFFQyxDQUFDO0lBQ3BCLE9BQU9ELE1BQU1DO0FBQ2Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0Jsb2NrVHJlZS5qcz8yMWMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgZmluZFJhbmdlc0ltbXV0YWJsZSA9IHJlcXVpcmUoXCIuL2ZpbmRSYW5nZXNJbW11dGFibGVcIik7XG5cbnZhciBnZXRPd25PYmplY3RWYWx1ZXMgPSByZXF1aXJlKFwiLi9nZXRPd25PYmplY3RWYWx1ZXNcIik7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0LFxuICAgIFJlcGVhdCA9IEltbXV0YWJsZS5SZXBlYXQsXG4gICAgUmVjb3JkID0gSW1tdXRhYmxlLlJlY29yZDtcblxudmFyIHJldHVyblRydWUgPSBmdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBkZWZhdWx0TGVhZlJhbmdlID0ge1xuICBzdGFydDogbnVsbCxcbiAgZW5kOiBudWxsXG59O1xudmFyIExlYWZSYW5nZSA9IFJlY29yZChkZWZhdWx0TGVhZlJhbmdlKTtcbnZhciBkZWZhdWx0RGVjb3JhdG9yUmFuZ2UgPSB7XG4gIHN0YXJ0OiBudWxsLFxuICBlbmQ6IG51bGwsXG4gIGRlY29yYXRvcktleTogbnVsbCxcbiAgbGVhdmVzOiBudWxsXG59O1xudmFyIERlY29yYXRvclJhbmdlID0gUmVjb3JkKGRlZmF1bHREZWNvcmF0b3JSYW5nZSk7XG52YXIgQmxvY2tUcmVlID0ge1xuICAvKipcbiAgICogR2VuZXJhdGUgYSBibG9jayB0cmVlIGZvciBhIGdpdmVuIENvbnRlbnRCbG9jay9kZWNvcmF0b3IgcGFpci5cbiAgICovXG4gIGdlbmVyYXRlOiBmdW5jdGlvbiBnZW5lcmF0ZShjb250ZW50U3RhdGUsIGJsb2NrLCBkZWNvcmF0b3IpIHtcbiAgICB2YXIgdGV4dExlbmd0aCA9IGJsb2NrLmdldExlbmd0aCgpO1xuXG4gICAgaWYgKCF0ZXh0TGVuZ3RoKSB7XG4gICAgICByZXR1cm4gTGlzdC5vZihuZXcgRGVjb3JhdG9yUmFuZ2Uoe1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwLFxuICAgICAgICBkZWNvcmF0b3JLZXk6IG51bGwsXG4gICAgICAgIGxlYXZlczogTGlzdC5vZihuZXcgTGVhZlJhbmdlKHtcbiAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICBlbmQ6IDBcbiAgICAgICAgfSkpXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdmFyIGxlYWZTZXRzID0gW107XG4gICAgdmFyIGRlY29yYXRpb25zID0gZGVjb3JhdG9yID8gZGVjb3JhdG9yLmdldERlY29yYXRpb25zKGJsb2NrLCBjb250ZW50U3RhdGUpIDogTGlzdChSZXBlYXQobnVsbCwgdGV4dExlbmd0aCkpO1xuICAgIHZhciBjaGFycyA9IGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcbiAgICBmaW5kUmFuZ2VzSW1tdXRhYmxlKGRlY29yYXRpb25zLCBhcmVFcXVhbCwgcmV0dXJuVHJ1ZSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGxlYWZTZXRzLnB1c2gobmV3IERlY29yYXRvclJhbmdlKHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgZGVjb3JhdG9yS2V5OiBkZWNvcmF0aW9ucy5nZXQoc3RhcnQpLFxuICAgICAgICBsZWF2ZXM6IGdlbmVyYXRlTGVhdmVzKGNoYXJzLnNsaWNlKHN0YXJ0LCBlbmQpLnRvTGlzdCgpLCBzdGFydClcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gTGlzdChsZWFmU2V0cyk7XG4gIH0sXG4gIGZyb21KUzogZnVuY3Rpb24gZnJvbUpTKF9yZWYpIHtcbiAgICB2YXIgbGVhdmVzID0gX3JlZi5sZWF2ZXMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wibGVhdmVzXCJdKTtcblxuICAgIHJldHVybiBuZXcgRGVjb3JhdG9yUmFuZ2UoX29iamVjdFNwcmVhZCh7fSwgb3RoZXIsIHtcbiAgICAgIGxlYXZlczogbGVhdmVzICE9IG51bGwgPyBMaXN0KEFycmF5LmlzQXJyYXkobGVhdmVzKSA/IGxlYXZlcyA6IGdldE93bk9iamVjdFZhbHVlcyhsZWF2ZXMpKS5tYXAoZnVuY3Rpb24gKGxlYWYpIHtcbiAgICAgICAgcmV0dXJuIExlYWZSYW5nZShsZWFmKTtcbiAgICAgIH0pIDogbnVsbFxuICAgIH0pKTtcbiAgfVxufTtcbi8qKlxuICogR2VuZXJhdGUgTGVhZlJhbmdlIHJlY29yZHMgZm9yIGEgZ2l2ZW4gY2hhcmFjdGVyIGxpc3QuXG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdGVMZWF2ZXMoY2hhcmFjdGVycywgb2Zmc2V0KSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdmFyIGlubGluZVN0eWxlcyA9IGNoYXJhY3RlcnMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuZ2V0U3R5bGUoKTtcbiAgfSkudG9MaXN0KCk7XG4gIGZpbmRSYW5nZXNJbW11dGFibGUoaW5saW5lU3R5bGVzLCBhcmVFcXVhbCwgcmV0dXJuVHJ1ZSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICBsZWF2ZXMucHVzaChuZXcgTGVhZlJhbmdlKHtcbiAgICAgIHN0YXJ0OiBzdGFydCArIG9mZnNldCxcbiAgICAgIGVuZDogZW5kICsgb2Zmc2V0XG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIExpc3QobGVhdmVzKTtcbn1cblxuZnVuY3Rpb24gYXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9ja1RyZWU7Il0sIm5hbWVzIjpbIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwib3duS2V5cyIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaW5kZXhPZiIsImZpbmRSYW5nZXNJbW11dGFibGUiLCJyZXF1aXJlIiwiZ2V0T3duT2JqZWN0VmFsdWVzIiwiSW1tdXRhYmxlIiwiTGlzdCIsIlJlcGVhdCIsIlJlY29yZCIsInJldHVyblRydWUiLCJkZWZhdWx0TGVhZlJhbmdlIiwic3RhcnQiLCJlbmQiLCJMZWFmUmFuZ2UiLCJkZWZhdWx0RGVjb3JhdG9yUmFuZ2UiLCJkZWNvcmF0b3JLZXkiLCJsZWF2ZXMiLCJEZWNvcmF0b3JSYW5nZSIsIkJsb2NrVHJlZSIsImdlbmVyYXRlIiwiY29udGVudFN0YXRlIiwiYmxvY2siLCJkZWNvcmF0b3IiLCJ0ZXh0TGVuZ3RoIiwiZ2V0TGVuZ3RoIiwib2YiLCJsZWFmU2V0cyIsImRlY29yYXRpb25zIiwiZ2V0RGVjb3JhdGlvbnMiLCJjaGFycyIsImdldENoYXJhY3Rlckxpc3QiLCJhcmVFcXVhbCIsInB1c2giLCJnZXQiLCJnZW5lcmF0ZUxlYXZlcyIsInNsaWNlIiwidG9MaXN0IiwiZnJvbUpTIiwiX3JlZiIsIm90aGVyIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwibGVhZiIsImNoYXJhY3RlcnMiLCJvZmZzZXQiLCJpbmxpbmVTdHlsZXMiLCJjIiwiZ2V0U3R5bGUiLCJhIiwiYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/BlockTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/CharacterMetadata.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), Map = _require.Map, OrderedSet = _require.OrderedSet, Record = _require.Record; // Immutable.map is typed such that the value for every key in the map\n// must be the same type\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n    style: EMPTY_SET,\n    entity: null\n};\nvar CharacterMetadataRecord = Record(defaultRecord);\nvar CharacterMetadata = /*#__PURE__*/ function(_CharacterMetadataRec) {\n    _inheritsLoose(CharacterMetadata, _CharacterMetadataRec);\n    function CharacterMetadata() {\n        return _CharacterMetadataRec.apply(this, arguments) || this;\n    }\n    var _proto = CharacterMetadata.prototype;\n    _proto.getStyle = function getStyle() {\n        return this.get(\"style\");\n    };\n    _proto.getEntity = function getEntity() {\n        return this.get(\"entity\");\n    };\n    _proto.hasStyle = function hasStyle(style) {\n        return this.getStyle().includes(style);\n    };\n    CharacterMetadata.applyStyle = function applyStyle(record, style) {\n        var withStyle = record.set(\"style\", record.getStyle().add(style));\n        return CharacterMetadata.create(withStyle);\n    };\n    CharacterMetadata.removeStyle = function removeStyle(record, style) {\n        var withoutStyle = record.set(\"style\", record.getStyle().remove(style));\n        return CharacterMetadata.create(withoutStyle);\n    };\n    CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\n        var withEntity = record.getEntity() === entityKey ? record : record.set(\"entity\", entityKey);\n        return CharacterMetadata.create(withEntity);\n    } /**\n   * Use this function instead of the `CharacterMetadata` constructor.\n   * Since most content generally uses only a very small number of\n   * style/entity permutations, we can reuse these objects as often as\n   * possible.\n   */ ;\n    CharacterMetadata.create = function create(config) {\n        if (!config) {\n            return EMPTY;\n        }\n        var defaultConfig = {\n            style: EMPTY_SET,\n            entity: null\n        }; // Fill in unspecified properties, if necessary.\n        var configMap = Map(defaultConfig).merge(config);\n        var existing = pool.get(configMap);\n        if (existing) {\n            return existing;\n        }\n        var newCharacter = new CharacterMetadata(configMap);\n        pool = pool.set(configMap, newCharacter);\n        return newCharacter;\n    };\n    CharacterMetadata.fromJS = function fromJS(_ref) {\n        var style = _ref.style, entity = _ref.entity;\n        return new CharacterMetadata({\n            style: Array.isArray(style) ? OrderedSet(style) : style,\n            entity: Array.isArray(entity) ? OrderedSet(entity) : entity\n        });\n    };\n    return CharacterMetadata;\n}(CharacterMetadataRecord);\nvar EMPTY = new CharacterMetadata();\nvar pool = Map([\n    [\n        Map(defaultRecord),\n        EMPTY\n    ]\n]);\nCharacterMetadata.EMPTY = EMPTY;\nmodule.exports = CharacterMetadata;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/CompositeDraftDecorator.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/CompositeDraftDecorator.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List;\nvar DELIMITER = \".\";\n/**\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\n * instances to identify sections of a ContentBlock that should be rendered\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\n * be intended to stand out visually, be rendered as anchors, etc.\n *\n * The list of decorators supplied to the constructor will be used in the\n * order they are provided. This allows the caller to specify a priority for\n * string matching, in case of match collisions among decorators.\n *\n * For instance, I may have a link with a `#` in its text. Though this section\n * of text may match our hashtag decorator, it should not be treated as a\n * hashtag. I should therefore list my link DraftDecorator\n * before my hashtag DraftDecorator when constructing this composite\n * decorator instance.\n *\n * Thus, when a collision like this is encountered, the earlier match is\n * preserved and the new match is discarded.\n */ var CompositeDraftDecorator = /*#__PURE__*/ function() {\n    function CompositeDraftDecorator(decorators) {\n        _defineProperty(this, \"_decorators\", void 0);\n        // Copy the decorator array, since we use this array order to determine\n        // precedence of decoration matching. If the array is mutated externally,\n        // we don't want to be affected here.\n        this._decorators = decorators.slice();\n    }\n    var _proto = CompositeDraftDecorator.prototype;\n    _proto.getDecorations = function getDecorations(block, contentState) {\n        var decorations = Array(block.getText().length).fill(null);\n        this._decorators.forEach(function(/*object*/ decorator, /*number*/ ii) {\n            var counter = 0;\n            var strategy = decorator.strategy;\n            var callback = function callback(/*number*/ start, /*number*/ end) {\n                // Find out if any of our matching range is already occupied\n                // by another decorator. If so, discard the match. Otherwise, store\n                // the component key for rendering.\n                if (canOccupySlice(decorations, start, end)) {\n                    occupySlice(decorations, start, end, ii + DELIMITER + counter);\n                    counter++;\n                }\n            };\n            strategy(block, callback, contentState);\n        });\n        return List(decorations);\n    };\n    _proto.getComponentForKey = function getComponentForKey(key) {\n        var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n        return this._decorators[componentKey].component;\n    };\n    _proto.getPropsForKey = function getPropsForKey(key) {\n        var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n        return this._decorators[componentKey].props;\n    };\n    return CompositeDraftDecorator;\n}();\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */ function canOccupySlice(decorations, start, end) {\n    for(var ii = start; ii < end; ii++){\n        if (decorations[ii] != null) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */ function occupySlice(targetArr, start, end, componentKey) {\n    for(var ii = start; ii < end; ii++){\n        targetArr[ii] = componentKey;\n    }\n}\nmodule.exports = CompositeDraftDecorator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/CompositeDraftDecorator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentBlock.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentBlock.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Map = Immutable.Map, OrderedSet = Immutable.OrderedSet, Record = Immutable.Record, Repeat = Immutable.Repeat;\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n    key: \"\",\n    type: \"unstyled\",\n    text: \"\",\n    characterList: List(),\n    depth: 0,\n    data: Map()\n};\nvar ContentBlockRecord = Record(defaultRecord);\nvar decorateCharacterList = function decorateCharacterList(config) {\n    if (!config) {\n        return config;\n    }\n    var characterList = config.characterList, text = config.text;\n    if (text && !characterList) {\n        config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\n    }\n    return config;\n};\nvar ContentBlock = /*#__PURE__*/ function(_ContentBlockRecord) {\n    _inheritsLoose(ContentBlock, _ContentBlockRecord);\n    function ContentBlock(config) {\n        return _ContentBlockRecord.call(this, decorateCharacterList(config)) || this;\n    }\n    var _proto = ContentBlock.prototype;\n    _proto.getKey = function getKey() {\n        return this.get(\"key\");\n    };\n    _proto.getType = function getType() {\n        return this.get(\"type\");\n    };\n    _proto.getText = function getText() {\n        return this.get(\"text\");\n    };\n    _proto.getCharacterList = function getCharacterList() {\n        return this.get(\"characterList\");\n    };\n    _proto.getLength = function getLength() {\n        return this.getText().length;\n    };\n    _proto.getDepth = function getDepth() {\n        return this.get(\"depth\");\n    };\n    _proto.getData = function getData() {\n        return this.get(\"data\");\n    };\n    _proto.getInlineStyleAt = function getInlineStyleAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getStyle() : EMPTY_SET;\n    };\n    _proto.getEntityAt = function getEntityAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getEntity() : null;\n    } /**\n   * Execute a callback for every contiguous range of styles within the block.\n   */ ;\n    _proto.findStyleRanges = function findStyleRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);\n    } /**\n   * Execute a callback for every contiguous range of entities within the block.\n   */ ;\n    _proto.findEntityRanges = function findEntityRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);\n    };\n    return ContentBlock;\n}(ContentBlockRecord);\nfunction haveEqualStyle(charA, charB) {\n    return charA.getStyle() === charB.getStyle();\n}\nfunction haveEqualEntity(charA, charB) {\n    return charA.getEntity() === charB.getEntity();\n}\nmodule.exports = ContentBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentBlockNode.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of ContentBlock adding support for nesting references by\n * providing links to children, parent, prevSibling, and nextSibling.\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Map = Immutable.Map, OrderedSet = Immutable.OrderedSet, Record = Immutable.Record, Repeat = Immutable.Repeat;\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n    parent: null,\n    characterList: List(),\n    data: Map(),\n    depth: 0,\n    key: \"\",\n    text: \"\",\n    type: \"unstyled\",\n    children: List(),\n    prevSibling: null,\n    nextSibling: null\n};\nvar haveEqualStyle = function haveEqualStyle(charA, charB) {\n    return charA.getStyle() === charB.getStyle();\n};\nvar haveEqualEntity = function haveEqualEntity(charA, charB) {\n    return charA.getEntity() === charB.getEntity();\n};\nvar decorateCharacterList = function decorateCharacterList(config) {\n    if (!config) {\n        return config;\n    }\n    var characterList = config.characterList, text = config.text;\n    if (text && !characterList) {\n        config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\n    }\n    return config;\n};\nvar ContentBlockNode = /*#__PURE__*/ function(_ref) {\n    _inheritsLoose(ContentBlockNode, _ref);\n    function ContentBlockNode() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRecord;\n        /* eslint-disable-next-line constructor-super */ return _ref.call(this, decorateCharacterList(props)) || this;\n    }\n    var _proto = ContentBlockNode.prototype;\n    _proto.getKey = function getKey() {\n        return this.get(\"key\");\n    };\n    _proto.getType = function getType() {\n        return this.get(\"type\");\n    };\n    _proto.getText = function getText() {\n        return this.get(\"text\");\n    };\n    _proto.getCharacterList = function getCharacterList() {\n        return this.get(\"characterList\");\n    };\n    _proto.getLength = function getLength() {\n        return this.getText().length;\n    };\n    _proto.getDepth = function getDepth() {\n        return this.get(\"depth\");\n    };\n    _proto.getData = function getData() {\n        return this.get(\"data\");\n    };\n    _proto.getInlineStyleAt = function getInlineStyleAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getStyle() : EMPTY_SET;\n    };\n    _proto.getEntityAt = function getEntityAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getEntity() : null;\n    };\n    _proto.getChildKeys = function getChildKeys() {\n        return this.get(\"children\");\n    };\n    _proto.getParentKey = function getParentKey() {\n        return this.get(\"parent\");\n    };\n    _proto.getPrevSiblingKey = function getPrevSiblingKey() {\n        return this.get(\"prevSibling\");\n    };\n    _proto.getNextSiblingKey = function getNextSiblingKey() {\n        return this.get(\"nextSibling\");\n    };\n    _proto.findStyleRanges = function findStyleRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);\n    };\n    _proto.findEntityRanges = function findEntityRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);\n    };\n    return ContentBlockNode;\n}(Record(defaultRecord));\nmodule.exports = ContentBlockNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentState.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentState.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getOwnObjectValues = __webpack_require__(/*! ./getOwnObjectValues */ \"(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar sanitizeDraftText = __webpack_require__(/*! ./sanitizeDraftText */ \"(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js\");\nvar List = Immutable.List, Record = Immutable.Record, Repeat = Immutable.Repeat, ImmutableMap = Immutable.Map, OrderedMap = Immutable.OrderedMap;\nvar defaultRecord = {\n    entityMap: null,\n    blockMap: null,\n    selectionBefore: null,\n    selectionAfter: null\n};\nvar ContentStateRecord = Record(defaultRecord);\n/* $FlowFixMe[signature-verification-failure] Supressing a `signature-\n * verification-failure` error here. TODO: T65949050 Clean up the branch for\n * this GK */ var ContentBlockNodeRecord = gkx(\"draft_tree_data_support\") ? ContentBlockNode : ContentBlock;\nvar ContentState = /*#__PURE__*/ function(_ContentStateRecord) {\n    _inheritsLoose(ContentState, _ContentStateRecord);\n    function ContentState() {\n        return _ContentStateRecord.apply(this, arguments) || this;\n    }\n    var _proto = ContentState.prototype;\n    _proto.getEntityMap = function getEntityMap() {\n        // TODO: update this when we fully remove DraftEntity\n        return DraftEntity;\n    };\n    _proto.getBlockMap = function getBlockMap() {\n        return this.get(\"blockMap\");\n    };\n    _proto.getSelectionBefore = function getSelectionBefore() {\n        return this.get(\"selectionBefore\");\n    };\n    _proto.getSelectionAfter = function getSelectionAfter() {\n        return this.get(\"selectionAfter\");\n    };\n    _proto.getBlockForKey = function getBlockForKey(key) {\n        var block = this.getBlockMap().get(key);\n        return block;\n    };\n    _proto.getKeyBefore = function getKeyBefore(key) {\n        return this.getBlockMap().reverse().keySeq().skipUntil(function(v) {\n            return v === key;\n        }).skip(1).first();\n    };\n    _proto.getKeyAfter = function getKeyAfter(key) {\n        return this.getBlockMap().keySeq().skipUntil(function(v) {\n            return v === key;\n        }).skip(1).first();\n    };\n    _proto.getBlockAfter = function getBlockAfter(key) {\n        return this.getBlockMap().skipUntil(function(_, k) {\n            return k === key;\n        }).skip(1).first();\n    };\n    _proto.getBlockBefore = function getBlockBefore(key) {\n        return this.getBlockMap().reverse().skipUntil(function(_, k) {\n            return k === key;\n        }).skip(1).first();\n    };\n    _proto.getBlocksAsArray = function getBlocksAsArray() {\n        return this.getBlockMap().toArray();\n    };\n    _proto.getFirstBlock = function getFirstBlock() {\n        return this.getBlockMap().first();\n    };\n    _proto.getLastBlock = function getLastBlock() {\n        return this.getBlockMap().last();\n    };\n    _proto.getPlainText = function getPlainText(delimiter) {\n        return this.getBlockMap().map(function(block) {\n            return block ? block.getText() : \"\";\n        }).join(delimiter || \"\\n\");\n    };\n    _proto.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\n        // TODO: update this when we fully remove DraftEntity\n        return DraftEntity.__getLastCreatedEntityKey();\n    };\n    _proto.hasText = function hasText() {\n        var blockMap = this.getBlockMap();\n        return blockMap.size > 1 || // make sure that there are no zero width space chars\n        escape(blockMap.first().getText()).replace(/%u200B/g, \"\").length > 0;\n    };\n    _proto.createEntity = function createEntity(type, mutability, data) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__create(type, mutability, data);\n        return this;\n    };\n    _proto.mergeEntityData = function mergeEntityData(key, toMerge) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__mergeData(key, toMerge);\n        return this;\n    };\n    _proto.replaceEntityData = function replaceEntityData(key, newData) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__replaceData(key, newData);\n        return this;\n    };\n    _proto.addEntity = function addEntity(instance) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__add(instance);\n        return this;\n    };\n    _proto.getEntity = function getEntity(key) {\n        // TODO: update this when we fully remove DraftEntity\n        return DraftEntity.__get(key);\n    };\n    _proto.getAllEntities = function getAllEntities() {\n        return DraftEntity.__getAll();\n    };\n    _proto.loadWithEntities = function loadWithEntities(entities) {\n        return DraftEntity.__loadWithEntities(entities);\n    };\n    ContentState.createFromBlockArray = function createFromBlockArray(blocks, entityMap) {\n        // TODO: remove this when we completely deprecate the old entity API\n        var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\n        var blockMap = BlockMapBuilder.createFromArray(theBlocks);\n        var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n        return new ContentState({\n            blockMap: blockMap,\n            entityMap: entityMap || DraftEntity,\n            selectionBefore: selectionState,\n            selectionAfter: selectionState\n        });\n    };\n    ContentState.createFromText = function createFromText(text) {\n        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\r\\n?|\\n/g;\n        var strings = text.split(delimiter);\n        var blocks = strings.map(function(block) {\n            block = sanitizeDraftText(block);\n            return new ContentBlockNodeRecord({\n                key: generateRandomKey(),\n                text: block,\n                type: \"unstyled\",\n                characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\n            });\n        });\n        return ContentState.createFromBlockArray(blocks);\n    };\n    ContentState.fromJS = function fromJS(state) {\n        return new ContentState(_objectSpread({}, state, {\n            blockMap: OrderedMap(state.blockMap).map(ContentState.createContentBlockFromJS),\n            selectionBefore: new SelectionState(state.selectionBefore),\n            selectionAfter: new SelectionState(state.selectionAfter)\n        }));\n    };\n    ContentState.createContentBlockFromJS = function createContentBlockFromJS(block) {\n        var characterList = block.characterList;\n        return new ContentBlockNodeRecord(_objectSpread({}, block, {\n            data: ImmutableMap(block.data),\n            characterList: characterList != null ? List((Array.isArray(characterList) ? characterList : getOwnObjectValues(characterList)).map(function(c) {\n                return CharacterMetadata.fromJS(c);\n            })) : undefined\n        }));\n    };\n    return ContentState;\n}(ContentStateRecord);\nmodule.exports = ContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentStateInlineStyle.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentStateInlineStyle.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), Map = _require.Map;\nvar ContentStateInlineStyle = {\n    add: function add(contentState, selectionState, inlineStyle) {\n        return modifyInlineStyle(contentState, selectionState, inlineStyle, true);\n    },\n    remove: function remove(contentState, selectionState, inlineStyle) {\n        return modifyInlineStyle(contentState, selectionState, inlineStyle, false);\n    }\n};\nfunction modifyInlineStyle(contentState, selectionState, inlineStyle, addOrRemove) {\n    var blockMap = contentState.getBlockMap();\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var newBlocks = blockMap.skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).concat(Map([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ])).map(function(block, blockKey) {\n        var sliceStart;\n        var sliceEnd;\n        if (startKey === endKey) {\n            sliceStart = startOffset;\n            sliceEnd = endOffset;\n        } else {\n            sliceStart = blockKey === startKey ? startOffset : 0;\n            sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n        }\n        var chars = block.getCharacterList();\n        var current;\n        while(sliceStart < sliceEnd){\n            current = chars.get(sliceStart);\n            chars = chars.set(sliceStart, addOrRemove ? CharacterMetadata.applyStyle(current, inlineStyle) : CharacterMetadata.removeStyle(current, inlineStyle));\n            sliceStart++;\n        }\n        return block.set(\"characterList\", chars);\n    });\n    return contentState.merge({\n        blockMap: blockMap.merge(newBlocks),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = ContentStateInlineStyle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0NvbnRlbnRTdGF0ZUlubGluZVN0eWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsb0JBQW9CQyxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUMseUZBQVcsR0FDOUJFLE1BQU1ELFNBQVNDLEdBQUc7QUFFdEIsSUFBSUMsMEJBQTBCO0lBQzVCQyxLQUFLLFNBQVNBLElBQUlDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxXQUFXO1FBQ3pELE9BQU9DLGtCQUFrQkgsY0FBY0MsZ0JBQWdCQyxhQUFhO0lBQ3RFO0lBQ0FFLFFBQVEsU0FBU0EsT0FBT0osWUFBWSxFQUFFQyxjQUFjLEVBQUVDLFdBQVc7UUFDL0QsT0FBT0Msa0JBQWtCSCxjQUFjQyxnQkFBZ0JDLGFBQWE7SUFDdEU7QUFDRjtBQUVBLFNBQVNDLGtCQUFrQkgsWUFBWSxFQUFFQyxjQUFjLEVBQUVDLFdBQVcsRUFBRUcsV0FBVztJQUMvRSxJQUFJQyxXQUFXTixhQUFhTyxXQUFXO0lBQ3ZDLElBQUlDLFdBQVdQLGVBQWVRLFdBQVc7SUFDekMsSUFBSUMsY0FBY1QsZUFBZVUsY0FBYztJQUMvQyxJQUFJQyxTQUFTWCxlQUFlWSxTQUFTO0lBQ3JDLElBQUlDLFlBQVliLGVBQWVjLFlBQVk7SUFDM0MsSUFBSUMsWUFBWVYsU0FBU1csU0FBUyxDQUFDLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUMvQyxPQUFPQSxNQUFNWDtJQUNmLEdBQUdZLFNBQVMsQ0FBQyxTQUFVRixDQUFDLEVBQUVDLENBQUM7UUFDekIsT0FBT0EsTUFBTVA7SUFDZixHQUFHUyxNQUFNLENBQUN4QixJQUFJO1FBQUM7WUFBQ2U7WUFBUU4sU0FBU2dCLEdBQUcsQ0FBQ1Y7U0FBUTtLQUFDLEdBQUdXLEdBQUcsQ0FBQyxTQUFVQyxLQUFLLEVBQUVDLFFBQVE7UUFDNUUsSUFBSUM7UUFDSixJQUFJQztRQUVKLElBQUluQixhQUFhSSxRQUFRO1lBQ3ZCYyxhQUFhaEI7WUFDYmlCLFdBQVdiO1FBQ2IsT0FBTztZQUNMWSxhQUFhRCxhQUFhakIsV0FBV0UsY0FBYztZQUNuRGlCLFdBQVdGLGFBQWFiLFNBQVNFLFlBQVlVLE1BQU1JLFNBQVM7UUFDOUQ7UUFFQSxJQUFJQyxRQUFRTCxNQUFNTSxnQkFBZ0I7UUFDbEMsSUFBSUM7UUFFSixNQUFPTCxhQUFhQyxTQUFVO1lBQzVCSSxVQUFVRixNQUFNUCxHQUFHLENBQUNJO1lBQ3BCRyxRQUFRQSxNQUFNRyxHQUFHLENBQUNOLFlBQVlyQixjQUFjWCxrQkFBa0J1QyxVQUFVLENBQUNGLFNBQVM3QixlQUFlUixrQkFBa0J3QyxXQUFXLENBQUNILFNBQVM3QjtZQUN4SXdCO1FBQ0Y7UUFFQSxPQUFPRixNQUFNUSxHQUFHLENBQUMsaUJBQWlCSDtJQUNwQztJQUNBLE9BQU83QixhQUFhbUMsS0FBSyxDQUFDO1FBQ3hCN0IsVUFBVUEsU0FBUzZCLEtBQUssQ0FBQ25CO1FBQ3pCb0IsaUJBQWlCbkM7UUFDakJvQyxnQkFBZ0JwQztJQUNsQjtBQUNGO0FBRUFxQyxPQUFPQyxPQUFPLEdBQUd6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQ29udGVudFN0YXRlSW5saW5lU3R5bGUuanM/NzlkOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKFwiLi9DaGFyYWN0ZXJNZXRhZGF0YVwiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcImltbXV0YWJsZVwiKSxcbiAgICBNYXAgPSBfcmVxdWlyZS5NYXA7XG5cbnZhciBDb250ZW50U3RhdGVJbmxpbmVTdHlsZSA9IHtcbiAgYWRkOiBmdW5jdGlvbiBhZGQoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgaW5saW5lU3R5bGUpIHtcbiAgICByZXR1cm4gbW9kaWZ5SW5saW5lU3R5bGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgaW5saW5lU3R5bGUsIHRydWUpO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHJldHVybiBtb2RpZnlJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSwgZmFsc2UpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtb2RpZnlJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSwgYWRkT3JSZW1vdmUpIHtcbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRLZXkoKTtcbiAgdmFyIGVuZE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpO1xuICB2YXIgbmV3QmxvY2tzID0gYmxvY2tNYXAuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IHN0YXJ0S2V5O1xuICB9KS50YWtlVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gZW5kS2V5O1xuICB9KS5jb25jYXQoTWFwKFtbZW5kS2V5LCBibG9ja01hcC5nZXQoZW5kS2V5KV1dKSkubWFwKGZ1bmN0aW9uIChibG9jaywgYmxvY2tLZXkpIHtcbiAgICB2YXIgc2xpY2VTdGFydDtcbiAgICB2YXIgc2xpY2VFbmQ7XG5cbiAgICBpZiAoc3RhcnRLZXkgPT09IGVuZEtleSkge1xuICAgICAgc2xpY2VTdGFydCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgc2xpY2VFbmQgPSBlbmRPZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWNlU3RhcnQgPSBibG9ja0tleSA9PT0gc3RhcnRLZXkgPyBzdGFydE9mZnNldCA6IDA7XG4gICAgICBzbGljZUVuZCA9IGJsb2NrS2V5ID09PSBlbmRLZXkgPyBlbmRPZmZzZXQgOiBibG9jay5nZXRMZW5ndGgoKTtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG4gICAgdmFyIGN1cnJlbnQ7XG5cbiAgICB3aGlsZSAoc2xpY2VTdGFydCA8IHNsaWNlRW5kKSB7XG4gICAgICBjdXJyZW50ID0gY2hhcnMuZ2V0KHNsaWNlU3RhcnQpO1xuICAgICAgY2hhcnMgPSBjaGFycy5zZXQoc2xpY2VTdGFydCwgYWRkT3JSZW1vdmUgPyBDaGFyYWN0ZXJNZXRhZGF0YS5hcHBseVN0eWxlKGN1cnJlbnQsIGlubGluZVN0eWxlKSA6IENoYXJhY3Rlck1ldGFkYXRhLnJlbW92ZVN0eWxlKGN1cnJlbnQsIGlubGluZVN0eWxlKSk7XG4gICAgICBzbGljZVN0YXJ0Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJsb2NrLnNldCgnY2hhcmFjdGVyTGlzdCcsIGNoYXJzKTtcbiAgfSk7XG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5tZXJnZShuZXdCbG9ja3MpLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRlbnRTdGF0ZUlubGluZVN0eWxlOyJdLCJuYW1lcyI6WyJDaGFyYWN0ZXJNZXRhZGF0YSIsInJlcXVpcmUiLCJfcmVxdWlyZSIsIk1hcCIsIkNvbnRlbnRTdGF0ZUlubGluZVN0eWxlIiwiYWRkIiwiY29udGVudFN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJpbmxpbmVTdHlsZSIsIm1vZGlmeUlubGluZVN0eWxlIiwicmVtb3ZlIiwiYWRkT3JSZW1vdmUiLCJibG9ja01hcCIsImdldEJsb2NrTWFwIiwic3RhcnRLZXkiLCJnZXRTdGFydEtleSIsInN0YXJ0T2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJlbmRLZXkiLCJnZXRFbmRLZXkiLCJlbmRPZmZzZXQiLCJnZXRFbmRPZmZzZXQiLCJuZXdCbG9ja3MiLCJza2lwVW50aWwiLCJfIiwiayIsInRha2VVbnRpbCIsImNvbmNhdCIsImdldCIsIm1hcCIsImJsb2NrIiwiYmxvY2tLZXkiLCJzbGljZVN0YXJ0Iiwic2xpY2VFbmQiLCJnZXRMZW5ndGgiLCJjaGFycyIsImdldENoYXJhY3Rlckxpc3QiLCJjdXJyZW50Iiwic2V0IiwiYXBwbHlTdHlsZSIsInJlbW92ZVN0eWxlIiwibWVyZ2UiLCJzZWxlY3Rpb25CZWZvcmUiLCJzZWxlY3Rpb25BZnRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentStateInlineStyle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DOMObserver.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/DOMObserver.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar getWindowForNode = __webpack_require__(/*! ./getWindowForNode */ \"(ssr)/./node_modules/draft-js/lib/getWindowForNode.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar Map = Immutable.Map;\n// Heavily based on Prosemirror's DOMObserver https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\nvar DOM_OBSERVER_OPTIONS = {\n    subtree: true,\n    characterData: true,\n    childList: true,\n    characterDataOldValue: false,\n    attributes: false\n}; // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\nvar USE_CHAR_DATA = UserAgent.isBrowser(\"IE <= 11\");\nvar DOMObserver = /*#__PURE__*/ function() {\n    function DOMObserver(container) {\n        var _this = this;\n        _defineProperty(this, \"observer\", void 0);\n        _defineProperty(this, \"container\", void 0);\n        _defineProperty(this, \"mutations\", void 0);\n        _defineProperty(this, \"onCharData\", void 0);\n        this.container = container;\n        this.mutations = Map();\n        var containerWindow = getWindowForNode(container);\n        if (containerWindow.MutationObserver && !USE_CHAR_DATA) {\n            this.observer = new containerWindow.MutationObserver(function(mutations) {\n                return _this.registerMutations(mutations);\n            });\n        } else {\n            this.onCharData = function(e) {\n                !(e.target instanceof Node) ?  true ? invariant(false, \"Expected target to be an instance of Node\") : 0 : void 0;\n                _this.registerMutation({\n                    type: \"characterData\",\n                    target: e.target\n                });\n            };\n        }\n    }\n    var _proto = DOMObserver.prototype;\n    _proto.start = function start() {\n        if (this.observer) {\n            this.observer.observe(this.container, DOM_OBSERVER_OPTIONS);\n        } else {\n            /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */ this.container.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\n        }\n    };\n    _proto.stopAndFlushMutations = function stopAndFlushMutations() {\n        var observer = this.observer;\n        if (observer) {\n            this.registerMutations(observer.takeRecords());\n            observer.disconnect();\n        } else {\n            /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */ this.container.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\n        }\n        var mutations = this.mutations;\n        this.mutations = Map();\n        return mutations;\n    };\n    _proto.registerMutations = function registerMutations(mutations) {\n        for(var i = 0; i < mutations.length; i++){\n            this.registerMutation(mutations[i]);\n        }\n    };\n    _proto.getMutationTextContent = function getMutationTextContent(mutation) {\n        var type = mutation.type, target = mutation.target, removedNodes = mutation.removedNodes;\n        if (type === \"characterData\") {\n            // When `textContent` is '', there is a race condition that makes\n            // getting the offsetKey from the target not possible.\n            // These events are also followed by a `childList`, which is the one\n            // we are able to retrieve the offsetKey and apply the '' text.\n            if (target.textContent !== \"\") {\n                // IE 11 considers the enter keypress that concludes the composition\n                // as an input char. This strips that newline character so the draft\n                // state does not receive spurious newlines.\n                if (USE_CHAR_DATA) {\n                    return target.textContent.replace(\"\\n\", \"\");\n                }\n                return target.textContent;\n            }\n        } else if (type === \"childList\") {\n            if (removedNodes && removedNodes.length) {\n                // `characterData` events won't happen or are ignored when\n                // removing the last character of a leaf node, what happens\n                // instead is a `childList` event with a `removedNodes` array.\n                // For this case the textContent should be '' and\n                // `DraftModifier.replaceText` will make sure the content is\n                // updated properly.\n                return \"\";\n            } else if (target.textContent !== \"\") {\n                // Typing Chinese in an empty block in MS Edge results in a\n                // `childList` event with non-empty textContent.\n                // See https://github.com/facebook/draft-js/issues/2082\n                return target.textContent;\n            }\n        }\n        return null;\n    };\n    _proto.registerMutation = function registerMutation(mutation) {\n        var textContent = this.getMutationTextContent(mutation);\n        if (textContent != null) {\n            var offsetKey = nullthrows(findAncestorOffsetKey(mutation.target));\n            this.mutations = this.mutations.set(offsetKey, textContent);\n        }\n    };\n    return DOMObserver;\n}();\nmodule.exports = DOMObserver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DOMObserver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), Map = _require.Map;\nvar UL_WRAP = React.createElement(\"ul\", {\n    className: cx(\"public/DraftStyleDefault/ul\")\n});\nvar OL_WRAP = React.createElement(\"ol\", {\n    className: cx(\"public/DraftStyleDefault/ol\")\n});\nvar PRE_WRAP = React.createElement(\"pre\", {\n    className: cx(\"public/DraftStyleDefault/pre\")\n});\nvar DefaultDraftBlockRenderMap = Map({\n    \"header-one\": {\n        element: \"h1\"\n    },\n    \"header-two\": {\n        element: \"h2\"\n    },\n    \"header-three\": {\n        element: \"h3\"\n    },\n    \"header-four\": {\n        element: \"h4\"\n    },\n    \"header-five\": {\n        element: \"h5\"\n    },\n    \"header-six\": {\n        element: \"h6\"\n    },\n    section: {\n        element: \"section\"\n    },\n    article: {\n        element: \"article\"\n    },\n    \"unordered-list-item\": {\n        element: \"li\",\n        wrapper: UL_WRAP\n    },\n    \"ordered-list-item\": {\n        element: \"li\",\n        wrapper: OL_WRAP\n    },\n    blockquote: {\n        element: \"blockquote\"\n    },\n    atomic: {\n        element: \"figure\"\n    },\n    \"code-block\": {\n        element: \"pre\",\n        wrapper: PRE_WRAP\n    },\n    unstyled: {\n        element: \"div\",\n        aliasedElements: [\n            \"p\"\n        ]\n    }\n});\nmodule.exports = DefaultDraftBlockRenderMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUMsd0dBQU87QUFFM0IsSUFBSUMsS0FBS0QsbUJBQU9BLENBQUMsd0RBQWE7QUFFOUIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUMseUZBQVcsR0FDOUJHLE1BQU1ELFNBQVNDLEdBQUc7QUFFdEIsSUFBSUMsVUFBVUwsTUFBTU0sYUFBYSxDQUFDLE1BQU07SUFDdENDLFdBQVdMLEdBQUc7QUFDaEI7QUFDQSxJQUFJTSxVQUFVUixNQUFNTSxhQUFhLENBQUMsTUFBTTtJQUN0Q0MsV0FBV0wsR0FBRztBQUNoQjtBQUNBLElBQUlPLFdBQVdULE1BQU1NLGFBQWEsQ0FBQyxPQUFPO0lBQ3hDQyxXQUFXTCxHQUFHO0FBQ2hCO0FBQ0EsSUFBSVEsNkJBQTZCTixJQUFJO0lBQ25DLGNBQWM7UUFDWk8sU0FBUztJQUNYO0lBQ0EsY0FBYztRQUNaQSxTQUFTO0lBQ1g7SUFDQSxnQkFBZ0I7UUFDZEEsU0FBUztJQUNYO0lBQ0EsZUFBZTtRQUNiQSxTQUFTO0lBQ1g7SUFDQSxlQUFlO1FBQ2JBLFNBQVM7SUFDWDtJQUNBLGNBQWM7UUFDWkEsU0FBUztJQUNYO0lBQ0FDLFNBQVM7UUFDUEQsU0FBUztJQUNYO0lBQ0FFLFNBQVM7UUFDUEYsU0FBUztJQUNYO0lBQ0EsdUJBQXVCO1FBQ3JCQSxTQUFTO1FBQ1RHLFNBQVNUO0lBQ1g7SUFDQSxxQkFBcUI7UUFDbkJNLFNBQVM7UUFDVEcsU0FBU047SUFDWDtJQUNBTyxZQUFZO1FBQ1ZKLFNBQVM7SUFDWDtJQUNBSyxRQUFRO1FBQ05MLFNBQVM7SUFDWDtJQUNBLGNBQWM7UUFDWkEsU0FBUztRQUNURyxTQUFTTDtJQUNYO0lBQ0FRLFVBQVU7UUFDUk4sU0FBUztRQUNUTyxpQkFBaUI7WUFBQztTQUFJO0lBQ3hCO0FBQ0Y7QUFDQUMsT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAuanM/ZjVhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBjeCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9jeFwiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcImltbXV0YWJsZVwiKSxcbiAgICBNYXAgPSBfcmVxdWlyZS5NYXA7XG5cbnZhciBVTF9XUkFQID0gUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHtcbiAgY2xhc3NOYW1lOiBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3VsJylcbn0pO1xudmFyIE9MX1dSQVAgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwib2xcIiwge1xuICBjbGFzc05hbWU6IGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvb2wnKVxufSk7XG52YXIgUFJFX1dSQVAgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwicHJlXCIsIHtcbiAgY2xhc3NOYW1lOiBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3ByZScpXG59KTtcbnZhciBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCA9IE1hcCh7XG4gICdoZWFkZXItb25lJzoge1xuICAgIGVsZW1lbnQ6ICdoMSdcbiAgfSxcbiAgJ2hlYWRlci10d28nOiB7XG4gICAgZWxlbWVudDogJ2gyJ1xuICB9LFxuICAnaGVhZGVyLXRocmVlJzoge1xuICAgIGVsZW1lbnQ6ICdoMydcbiAgfSxcbiAgJ2hlYWRlci1mb3VyJzoge1xuICAgIGVsZW1lbnQ6ICdoNCdcbiAgfSxcbiAgJ2hlYWRlci1maXZlJzoge1xuICAgIGVsZW1lbnQ6ICdoNSdcbiAgfSxcbiAgJ2hlYWRlci1zaXgnOiB7XG4gICAgZWxlbWVudDogJ2g2J1xuICB9LFxuICBzZWN0aW9uOiB7XG4gICAgZWxlbWVudDogJ3NlY3Rpb24nXG4gIH0sXG4gIGFydGljbGU6IHtcbiAgICBlbGVtZW50OiAnYXJ0aWNsZSdcbiAgfSxcbiAgJ3Vub3JkZXJlZC1saXN0LWl0ZW0nOiB7XG4gICAgZWxlbWVudDogJ2xpJyxcbiAgICB3cmFwcGVyOiBVTF9XUkFQXG4gIH0sXG4gICdvcmRlcmVkLWxpc3QtaXRlbSc6IHtcbiAgICBlbGVtZW50OiAnbGknLFxuICAgIHdyYXBwZXI6IE9MX1dSQVBcbiAgfSxcbiAgYmxvY2txdW90ZToge1xuICAgIGVsZW1lbnQ6ICdibG9ja3F1b3RlJ1xuICB9LFxuICBhdG9taWM6IHtcbiAgICBlbGVtZW50OiAnZmlndXJlJ1xuICB9LFxuICAnY29kZS1ibG9jayc6IHtcbiAgICBlbGVtZW50OiAncHJlJyxcbiAgICB3cmFwcGVyOiBQUkVfV1JBUFxuICB9LFxuICB1bnN0eWxlZDoge1xuICAgIGVsZW1lbnQ6ICdkaXYnLFxuICAgIGFsaWFzZWRFbGVtZW50czogWydwJ11cbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwOyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJjeCIsIl9yZXF1aXJlIiwiTWFwIiwiVUxfV1JBUCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJPTF9XUkFQIiwiUFJFX1dSQVAiLCJEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCIsImVsZW1lbnQiLCJzZWN0aW9uIiwiYXJ0aWNsZSIsIndyYXBwZXIiLCJibG9ja3F1b3RlIiwiYXRvbWljIiwidW5zdHlsZWQiLCJhbGlhc2VkRWxlbWVudHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/DefaultDraftInlineStyle.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nmodule.exports = {\n    BOLD: {\n        fontWeight: \"bold\"\n    },\n    CODE: {\n        fontFamily: \"monospace\",\n        wordWrap: \"break-word\"\n    },\n    ITALIC: {\n        fontStyle: \"italic\"\n    },\n    STRIKETHROUGH: {\n        textDecoration: \"line-through\"\n    },\n    UNDERLINE: {\n        textDecoration: \"underline\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RlZmF1bHREcmFmdElubGluZVN0eWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxNQUFNO1FBQ0pDLFlBQVk7SUFDZDtJQUNBQyxNQUFNO1FBQ0pDLFlBQVk7UUFDWkMsVUFBVTtJQUNaO0lBQ0FDLFFBQVE7UUFDTkMsV0FBVztJQUNiO0lBQ0FDLGVBQWU7UUFDYkMsZ0JBQWdCO0lBQ2xCO0lBQ0FDLFdBQVc7UUFDVEQsZ0JBQWdCO0lBQ2xCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RlZmF1bHREcmFmdElubGluZVN0eWxlLmpzPzZmMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJPTEQ6IHtcbiAgICBmb250V2VpZ2h0OiAnYm9sZCdcbiAgfSxcbiAgQ09ERToge1xuICAgIGZvbnRGYW1pbHk6ICdtb25vc3BhY2UnLFxuICAgIHdvcmRXcmFwOiAnYnJlYWstd29yZCdcbiAgfSxcbiAgSVRBTElDOiB7XG4gICAgZm9udFN0eWxlOiAnaXRhbGljJ1xuICB9LFxuICBTVFJJS0VUSFJPVUdIOiB7XG4gICAgdGV4dERlY29yYXRpb246ICdsaW5lLXRocm91Z2gnXG4gIH0sXG4gIFVOREVSTElORToge1xuICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJ1xuICB9XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQk9MRCIsImZvbnRXZWlnaHQiLCJDT0RFIiwiZm9udEZhbWlseSIsIndvcmRXcmFwIiwiSVRBTElDIiwiZm9udFN0eWxlIiwiU1RSSUtFVEhST1VHSCIsInRleHREZWNvcmF0aW9uIiwiVU5ERVJMSU5FIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/Draft.js":
/*!********************************************!*\
  !*** ./node_modules/draft-js/lib/Draft.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */ \nvar AtomicBlockUtils = __webpack_require__(/*! ./AtomicBlockUtils */ \"(ssr)/./node_modules/draft-js/lib/AtomicBlockUtils.js\");\nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar CompositeDraftDecorator = __webpack_require__(/*! ./CompositeDraftDecorator */ \"(ssr)/./node_modules/draft-js/lib/CompositeDraftDecorator.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentState = __webpack_require__(/*! ./ContentState */ \"(ssr)/./node_modules/draft-js/lib/ContentState.js\");\nvar DefaultDraftBlockRenderMap = __webpack_require__(/*! ./DefaultDraftBlockRenderMap */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\");\nvar DefaultDraftInlineStyle = __webpack_require__(/*! ./DefaultDraftInlineStyle */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js\");\nvar DraftEditor = __webpack_require__(/*! ./DraftEditor.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditor.react.js\");\nvar DraftEditorBlock = __webpack_require__(/*! ./DraftEditorBlock.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftEntityInstance = __webpack_require__(/*! ./DraftEntityInstance */ \"(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar KeyBindingUtil = __webpack_require__(/*! ./KeyBindingUtil */ \"(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\");\nvar RawDraftContentState = __webpack_require__(/*! ./RawDraftContentState */ \"(ssr)/./node_modules/draft-js/lib/RawDraftContentState.js\");\nvar RichTextEditorUtil = __webpack_require__(/*! ./RichTextEditorUtil */ \"(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar convertFromDraftStateToRaw = __webpack_require__(/*! ./convertFromDraftStateToRaw */ \"(ssr)/./node_modules/draft-js/lib/convertFromDraftStateToRaw.js\");\nvar convertFromRawToDraftState = __webpack_require__(/*! ./convertFromRawToDraftState */ \"(ssr)/./node_modules/draft-js/lib/convertFromRawToDraftState.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getDefaultKeyBinding = __webpack_require__(/*! ./getDefaultKeyBinding */ \"(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js\");\nvar getVisibleSelectionRect = __webpack_require__(/*! ./getVisibleSelectionRect */ \"(ssr)/./node_modules/draft-js/lib/getVisibleSelectionRect.js\");\nvar convertFromHTML = __webpack_require__(/*! ./convertFromHTMLToContentBlocks */ \"(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js\");\nvar DraftPublic = {\n    Editor: DraftEditor,\n    EditorBlock: DraftEditorBlock,\n    EditorState: EditorState,\n    CompositeDecorator: CompositeDraftDecorator,\n    Entity: DraftEntity,\n    EntityInstance: DraftEntityInstance,\n    BlockMapBuilder: BlockMapBuilder,\n    CharacterMetadata: CharacterMetadata,\n    ContentBlock: ContentBlock,\n    ContentState: ContentState,\n    RawDraftContentState: RawDraftContentState,\n    SelectionState: SelectionState,\n    AtomicBlockUtils: AtomicBlockUtils,\n    KeyBindingUtil: KeyBindingUtil,\n    Modifier: DraftModifier,\n    RichUtils: RichTextEditorUtil,\n    DefaultDraftBlockRenderMap: DefaultDraftBlockRenderMap,\n    DefaultDraftInlineStyle: DefaultDraftInlineStyle,\n    convertFromHTML: convertFromHTML,\n    convertFromRaw: convertFromRawToDraftState,\n    convertToRaw: convertFromDraftStateToRaw,\n    genKey: generateRandomKey,\n    getDefaultKeyBinding: getDefaultKeyBinding,\n    getVisibleSelectionRect: getVisibleSelectionRect\n};\nmodule.exports = DraftPublic;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDLEdBQ0Q7QUFFQSxJQUFJQSxtQkFBbUJDLG1CQUFPQSxDQUFDLGlGQUFvQjtBQUVuRCxJQUFJQyxrQkFBa0JELG1CQUFPQSxDQUFDLCtFQUFtQjtBQUVqRCxJQUFJRSxvQkFBb0JGLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUVyRCxJQUFJRywwQkFBMEJILG1CQUFPQSxDQUFDLCtGQUEyQjtBQUVqRSxJQUFJSSxlQUFlSixtQkFBT0EsQ0FBQyx5RUFBZ0I7QUFFM0MsSUFBSUssZUFBZUwsbUJBQU9BLENBQUMseUVBQWdCO0FBRTNDLElBQUlNLDZCQUE2Qk4sbUJBQU9BLENBQUMscUdBQThCO0FBRXZFLElBQUlPLDBCQUEwQlAsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUlRLGNBQWNSLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUUvQyxJQUFJUyxtQkFBbUJULG1CQUFPQSxDQUFDLDZGQUEwQjtBQUV6RCxJQUFJVSxjQUFjVixtQkFBT0EsQ0FBQyx1RUFBZTtBQUV6QyxJQUFJVyxnQkFBZ0JYLG1CQUFPQSxDQUFDLDJFQUFpQjtBQUU3QyxJQUFJWSxzQkFBc0JaLG1CQUFPQSxDQUFDLHVGQUF1QjtBQUV6RCxJQUFJYSxjQUFjYixtQkFBT0EsQ0FBQyx1RUFBZTtBQUV6QyxJQUFJYyxpQkFBaUJkLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUUvQyxJQUFJZSx1QkFBdUJmLG1CQUFPQSxDQUFDLHlGQUF3QjtBQUUzRCxJQUFJZ0IscUJBQXFCaEIsbUJBQU9BLENBQUMscUZBQXNCO0FBRXZELElBQUlpQixpQkFBaUJqQixtQkFBT0EsQ0FBQyw2RUFBa0I7QUFFL0MsSUFBSWtCLDZCQUE2QmxCLG1CQUFPQSxDQUFDLHFHQUE4QjtBQUV2RSxJQUFJbUIsNkJBQTZCbkIsbUJBQU9BLENBQUMscUdBQThCO0FBRXZFLElBQUlvQixvQkFBb0JwQixtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSXFCLHVCQUF1QnJCLG1CQUFPQSxDQUFDLHlGQUF3QjtBQUUzRCxJQUFJc0IsMEJBQTBCdEIsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUl1QixrQkFBa0J2QixtQkFBT0EsQ0FBQyw2R0FBa0M7QUFFaEUsSUFBSXdCLGNBQWM7SUFDaEJDLFFBQVFqQjtJQUNSa0IsYUFBYWpCO0lBQ2JJLGFBQWFBO0lBQ2JjLG9CQUFvQnhCO0lBQ3BCeUIsUUFBUWxCO0lBQ1JtQixnQkFBZ0JqQjtJQUNoQlgsaUJBQWlCQTtJQUNqQkMsbUJBQW1CQTtJQUNuQkUsY0FBY0E7SUFDZEMsY0FBY0E7SUFDZFUsc0JBQXNCQTtJQUN0QkUsZ0JBQWdCQTtJQUNoQmxCLGtCQUFrQkE7SUFDbEJlLGdCQUFnQkE7SUFDaEJnQixVQUFVbkI7SUFDVm9CLFdBQVdmO0lBQ1hWLDRCQUE0QkE7SUFDNUJDLHlCQUF5QkE7SUFDekJnQixpQkFBaUJBO0lBQ2pCUyxnQkFBZ0JiO0lBQ2hCYyxjQUFjZjtJQUNkZ0IsUUFBUWQ7SUFDUkMsc0JBQXNCQTtJQUN0QkMseUJBQXlCQTtBQUMzQjtBQUNBYSxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdC5qcz80NGVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEF0b21pY0Jsb2NrVXRpbHMgPSByZXF1aXJlKFwiLi9BdG9taWNCbG9ja1V0aWxzXCIpO1xuXG52YXIgQmxvY2tNYXBCdWlsZGVyID0gcmVxdWlyZShcIi4vQmxvY2tNYXBCdWlsZGVyXCIpO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKFwiLi9DaGFyYWN0ZXJNZXRhZGF0YVwiKTtcblxudmFyIENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yID0gcmVxdWlyZShcIi4vQ29tcG9zaXRlRHJhZnREZWNvcmF0b3JcIik7XG5cbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKFwiLi9Db250ZW50QmxvY2tcIik7XG5cbnZhciBDb250ZW50U3RhdGUgPSByZXF1aXJlKFwiLi9Db250ZW50U3RhdGVcIik7XG5cbnZhciBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCA9IHJlcXVpcmUoXCIuL0RlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwXCIpO1xuXG52YXIgRGVmYXVsdERyYWZ0SW5saW5lU3R5bGUgPSByZXF1aXJlKFwiLi9EZWZhdWx0RHJhZnRJbmxpbmVTdHlsZVwiKTtcblxudmFyIERyYWZ0RWRpdG9yID0gcmVxdWlyZShcIi4vRHJhZnRFZGl0b3IucmVhY3RcIik7XG5cbnZhciBEcmFmdEVkaXRvckJsb2NrID0gcmVxdWlyZShcIi4vRHJhZnRFZGl0b3JCbG9jay5yZWFjdFwiKTtcblxudmFyIERyYWZ0RW50aXR5ID0gcmVxdWlyZShcIi4vRHJhZnRFbnRpdHlcIik7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZShcIi4vRHJhZnRNb2RpZmllclwiKTtcblxudmFyIERyYWZ0RW50aXR5SW5zdGFuY2UgPSByZXF1aXJlKFwiLi9EcmFmdEVudGl0eUluc3RhbmNlXCIpO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxudmFyIEtleUJpbmRpbmdVdGlsID0gcmVxdWlyZShcIi4vS2V5QmluZGluZ1V0aWxcIik7XG5cbnZhciBSYXdEcmFmdENvbnRlbnRTdGF0ZSA9IHJlcXVpcmUoXCIuL1Jhd0RyYWZ0Q29udGVudFN0YXRlXCIpO1xuXG52YXIgUmljaFRleHRFZGl0b3JVdGlsID0gcmVxdWlyZShcIi4vUmljaFRleHRFZGl0b3JVdGlsXCIpO1xuXG52YXIgU2VsZWN0aW9uU3RhdGUgPSByZXF1aXJlKFwiLi9TZWxlY3Rpb25TdGF0ZVwiKTtcblxudmFyIGNvbnZlcnRGcm9tRHJhZnRTdGF0ZVRvUmF3ID0gcmVxdWlyZShcIi4vY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXdcIik7XG5cbnZhciBjb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZSA9IHJlcXVpcmUoXCIuL2NvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlXCIpO1xuXG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKFwiLi9nZW5lcmF0ZVJhbmRvbUtleVwiKTtcblxudmFyIGdldERlZmF1bHRLZXlCaW5kaW5nID0gcmVxdWlyZShcIi4vZ2V0RGVmYXVsdEtleUJpbmRpbmdcIik7XG5cbnZhciBnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdCA9IHJlcXVpcmUoXCIuL2dldFZpc2libGVTZWxlY3Rpb25SZWN0XCIpO1xuXG52YXIgY29udmVydEZyb21IVE1MID0gcmVxdWlyZShcIi4vY29udmVydEZyb21IVE1MVG9Db250ZW50QmxvY2tzXCIpO1xuXG52YXIgRHJhZnRQdWJsaWMgPSB7XG4gIEVkaXRvcjogRHJhZnRFZGl0b3IsXG4gIEVkaXRvckJsb2NrOiBEcmFmdEVkaXRvckJsb2NrLFxuICBFZGl0b3JTdGF0ZTogRWRpdG9yU3RhdGUsXG4gIENvbXBvc2l0ZURlY29yYXRvcjogQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IsXG4gIEVudGl0eTogRHJhZnRFbnRpdHksXG4gIEVudGl0eUluc3RhbmNlOiBEcmFmdEVudGl0eUluc3RhbmNlLFxuICBCbG9ja01hcEJ1aWxkZXI6IEJsb2NrTWFwQnVpbGRlcixcbiAgQ2hhcmFjdGVyTWV0YWRhdGE6IENoYXJhY3Rlck1ldGFkYXRhLFxuICBDb250ZW50QmxvY2s6IENvbnRlbnRCbG9jayxcbiAgQ29udGVudFN0YXRlOiBDb250ZW50U3RhdGUsXG4gIFJhd0RyYWZ0Q29udGVudFN0YXRlOiBSYXdEcmFmdENvbnRlbnRTdGF0ZSxcbiAgU2VsZWN0aW9uU3RhdGU6IFNlbGVjdGlvblN0YXRlLFxuICBBdG9taWNCbG9ja1V0aWxzOiBBdG9taWNCbG9ja1V0aWxzLFxuICBLZXlCaW5kaW5nVXRpbDogS2V5QmluZGluZ1V0aWwsXG4gIE1vZGlmaWVyOiBEcmFmdE1vZGlmaWVyLFxuICBSaWNoVXRpbHM6IFJpY2hUZXh0RWRpdG9yVXRpbCxcbiAgRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXA6IERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwLFxuICBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZTogRGVmYXVsdERyYWZ0SW5saW5lU3R5bGUsXG4gIGNvbnZlcnRGcm9tSFRNTDogY29udmVydEZyb21IVE1MLFxuICBjb252ZXJ0RnJvbVJhdzogY29udmVydEZyb21SYXdUb0RyYWZ0U3RhdGUsXG4gIGNvbnZlcnRUb1JhdzogY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXcsXG4gIGdlbktleTogZ2VuZXJhdGVSYW5kb21LZXksXG4gIGdldERlZmF1bHRLZXlCaW5kaW5nOiBnZXREZWZhdWx0S2V5QmluZGluZyxcbiAgZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3Q6IGdldFZpc2libGVTZWxlY3Rpb25SZWN0XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFB1YmxpYzsiXSwibmFtZXMiOlsiQXRvbWljQmxvY2tVdGlscyIsInJlcXVpcmUiLCJCbG9ja01hcEJ1aWxkZXIiLCJDaGFyYWN0ZXJNZXRhZGF0YSIsIkNvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yIiwiQ29udGVudEJsb2NrIiwiQ29udGVudFN0YXRlIiwiRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAiLCJEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZSIsIkRyYWZ0RWRpdG9yIiwiRHJhZnRFZGl0b3JCbG9jayIsIkRyYWZ0RW50aXR5IiwiRHJhZnRNb2RpZmllciIsIkRyYWZ0RW50aXR5SW5zdGFuY2UiLCJFZGl0b3JTdGF0ZSIsIktleUJpbmRpbmdVdGlsIiwiUmF3RHJhZnRDb250ZW50U3RhdGUiLCJSaWNoVGV4dEVkaXRvclV0aWwiLCJTZWxlY3Rpb25TdGF0ZSIsImNvbnZlcnRGcm9tRHJhZnRTdGF0ZVRvUmF3IiwiY29udmVydEZyb21SYXdUb0RyYWZ0U3RhdGUiLCJnZW5lcmF0ZVJhbmRvbUtleSIsImdldERlZmF1bHRLZXlCaW5kaW5nIiwiZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3QiLCJjb252ZXJ0RnJvbUhUTUwiLCJEcmFmdFB1YmxpYyIsIkVkaXRvciIsIkVkaXRvckJsb2NrIiwiQ29tcG9zaXRlRGVjb3JhdG9yIiwiRW50aXR5IiwiRW50aXR5SW5zdGFuY2UiLCJNb2RpZmllciIsIlJpY2hVdGlscyIsImNvbnZlcnRGcm9tUmF3IiwiY29udmVydFRvUmF3IiwiZ2VuS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/Draft.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditor.react.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditor.react.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @preventMunge\n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DefaultDraftBlockRenderMap = __webpack_require__(/*! ./DefaultDraftBlockRenderMap */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\");\nvar DefaultDraftInlineStyle = __webpack_require__(/*! ./DefaultDraftInlineStyle */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js\");\nvar DraftEditorCompositionHandler = __webpack_require__(/*! ./DraftEditorCompositionHandler */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorCompositionHandler.js\");\nvar DraftEditorContents = __webpack_require__(/*! ./DraftEditorContents.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorContents.react.js\");\nvar DraftEditorDragHandler = __webpack_require__(/*! ./DraftEditorDragHandler */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorDragHandler.js\");\nvar DraftEditorEditHandler = __webpack_require__(/*! ./DraftEditorEditHandler */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorEditHandler.js\");\nvar flushControlled = __webpack_require__(/*! ./DraftEditorFlushControlled */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorFlushControlled.js\");\nvar DraftEditorPlaceholder = __webpack_require__(/*! ./DraftEditorPlaceholder.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js\");\nvar DraftEffects = __webpack_require__(/*! ./DraftEffects */ \"(ssr)/./node_modules/draft-js/lib/DraftEffects.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Scroll = __webpack_require__(/*! fbjs/lib/Scroll */ \"(ssr)/./node_modules/fbjs/lib/Scroll.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getDefaultKeyBinding = __webpack_require__(/*! ./getDefaultKeyBinding */ \"(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar isIE = UserAgent.isBrowser(\"IE\"); // IE does not support the `input` event on contentEditable, so we can't\n// observe spellcheck behavior.\nvar allowSpellCheck = !isIE; // Define a set of handler objects to correspond to each possible `mode`\n// of editor behavior.\nvar handlerMap = {\n    edit: DraftEditorEditHandler,\n    composite: DraftEditorCompositionHandler,\n    drag: DraftEditorDragHandler,\n    cut: null,\n    render: null\n};\nvar didInitODS = false;\nvar UpdateDraftEditorFlags = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(UpdateDraftEditorFlags, _React$Component);\n    function UpdateDraftEditorFlags() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = UpdateDraftEditorFlags.prototype;\n    _proto.render = function render() {\n        return null;\n    };\n    _proto.componentDidMount = function componentDidMount() {\n        this._update();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        this._update();\n    };\n    _proto._update = function _update() {\n        var editor = this.props.editor;\n        /**\n     * Sometimes a render triggers a 'focus' or other event, and that will\n     * schedule a second render pass.\n     * In order to make sure the second render pass gets the latest editor\n     * state, we update it here.\n     * Example:\n     * render #1\n     * +\n     * |\n     * | cWU -> Nothing ... latestEditorState = STALE_STATE :(\n     * |\n     * | render -> this.props.editorState = FRESH_STATE\n     * | +         *and* set latestEditorState = FRESH_STATE\n     *   |\n     * | |\n     * | +--> triggers 'focus' event, calling 'handleFocus' with latestEditorState\n     * |                                                +\n     * |                                                |\n     * +>cdU -> latestEditorState = FRESH_STATE         | the 'handleFocus' call schedules render #2\n     *                                                  | with latestEditorState, which is FRESH_STATE\n     *                                                  |\n     * render #2 <--------------------------------------+\n     * +\n     * |\n     * | cwU -> nothing updates\n     * |\n     * | render -> this.props.editorState = FRESH_STATE which was passed in above\n     * |\n     * +>cdU fires and resets latestEditorState = FRESH_STATE\n     * ---\n     * Note that if we don't set latestEditorState in 'render' in the above\n     * diagram, then STALE_STATE gets passed to render #2.\n     */ editor._latestEditorState = this.props.editorState;\n        /**\n     * The reason we set this 'blockSelectEvents' flag is that  IE will fire a\n     * 'selectionChange' event when we programmatically change the selection,\n     * meaning it would trigger a new select event while we are in the middle\n     * of updating.\n     * We found that the 'selection.addRange' was what triggered the stray\n     * selectionchange event in IE.\n     * To be clear - we have not been able to reproduce specific bugs related\n     * to this stray selection event, but have recorded logs that some\n     * conditions do cause it to get bumped into during editOnSelect.\n     */ editor._blockSelectEvents = true;\n    };\n    return UpdateDraftEditorFlags;\n}(React.Component);\n/**\n * `DraftEditor` is the root editor component. It composes a `contentEditable`\n * div, and provides a wide variety of useful function props for managing the\n * state of the editor. See `DraftEditorProps` for details.\n */ var DraftEditor = /*#__PURE__*/ function(_React$Component2) {\n    _inheritsLoose(DraftEditor, _React$Component2);\n    /**\n   * Define proxies that can route events to the current handler.\n   */ function DraftEditor(props) {\n        var _this;\n        _this = _React$Component2.call(this, props) || this;\n        _defineProperty(_assertThisInitialized(_this), \"_blockSelectEvents\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_clipboard\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_handler\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_dragCount\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_internalDrag\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_editorKey\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_placeholderAccessibilityID\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_latestEditorState\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_latestCommittedEditorState\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_pendingStateFromBeforeInput\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onBeforeInput\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onBlur\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCharacterData\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCompositionEnd\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCompositionStart\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCopy\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCut\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDragEnd\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDragOver\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDragStart\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDrop\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onInput\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onFocus\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onKeyDown\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onKeyPress\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onKeyUp\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onMouseDown\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onMouseUp\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onPaste\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onSelect\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"editor\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"editorContainer\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"focus\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"blur\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"setMode\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"exitCurrentMode\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"restoreEditorDOM\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"setClipboard\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"getClipboard\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"getEditorKey\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"update\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"onDragEnter\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"onDragLeave\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_handleEditorContainerRef\", function(node) {\n            _this.editorContainer = node; // Instead of having a direct ref on the child, we'll grab it here.\n            // This is safe as long as the rendered structure is static (which it is).\n            // This lets the child support ref={props.editorRef} without merging refs.\n            _this.editor = node !== null ? node.firstChild : null;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"focus\", function(scrollPosition) {\n            var editorState = _this.props.editorState;\n            var alreadyHasFocus = editorState.getSelection().getHasFocus();\n            var editorNode = _this.editor;\n            if (!editorNode) {\n                // once in a while people call 'focus' in a setTimeout, and the node has\n                // been deleted, so it can be null in that case.\n                return;\n            }\n            var scrollParent = Style.getScrollParent(editorNode);\n            var _ref = scrollPosition || getScrollPosition(scrollParent), x = _ref.x, y = _ref.y;\n            !isHTMLElement(editorNode) ?  true ? invariant(false, \"editorNode is not an HTMLElement\") : 0 : void 0;\n            editorNode.focus(); // Restore scroll position\n            if (scrollParent === window) {\n                window.scrollTo(x, y);\n            } else {\n                Scroll.setTop(scrollParent, y);\n            } // On Chrome and Safari, calling focus on contenteditable focuses the\n            // cursor at the first character. This is something you don't expect when\n            // you're clicking on an input element but not directly on a character.\n            // Put the cursor back where it was before the blur.\n            if (!alreadyHasFocus) {\n                _this.update(EditorState.forceSelection(editorState, editorState.getSelection()));\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"blur\", function() {\n            var editorNode = _this.editor;\n            if (!editorNode) {\n                return;\n            }\n            !isHTMLElement(editorNode) ?  true ? invariant(false, \"editorNode is not an HTMLElement\") : 0 : void 0;\n            editorNode.blur();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setMode\", function(mode) {\n            var _this$props = _this.props, onPaste = _this$props.onPaste, onCut = _this$props.onCut, onCopy = _this$props.onCopy;\n            var editHandler = _objectSpread({}, handlerMap.edit);\n            if (onPaste) {\n                /* $FlowFixMe[incompatible-type] (>=0.117.0 site=www,mobile) This comment\n         * suppresses an error found when Flow v0.117 was deployed. To see the\n         * error delete this comment and run Flow. */ editHandler.onPaste = onPaste;\n            }\n            if (onCut) {\n                editHandler.onCut = onCut;\n            }\n            if (onCopy) {\n                editHandler.onCopy = onCopy;\n            }\n            var handler = _objectSpread({}, handlerMap, {\n                edit: editHandler\n            });\n            _this._handler = handler[mode];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"exitCurrentMode\", function() {\n            _this.setMode(\"edit\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"restoreEditorDOM\", function(scrollPosition) {\n            _this.setState({\n                contentsKey: _this.state.contentsKey + 1\n            }, function() {\n                _this.focus(scrollPosition);\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setClipboard\", function(clipboard) {\n            _this._clipboard = clipboard;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getClipboard\", function() {\n            return _this._clipboard;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"update\", function(editorState) {\n            _this._latestEditorState = editorState;\n            _this.props.onChange(editorState);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDragEnter\", function() {\n            _this._dragCount++;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDragLeave\", function() {\n            _this._dragCount--;\n            if (_this._dragCount === 0) {\n                _this.exitCurrentMode();\n            }\n        });\n        _this._blockSelectEvents = false;\n        _this._clipboard = null;\n        _this._handler = null;\n        _this._dragCount = 0;\n        _this._editorKey = props.editorKey || generateRandomKey();\n        _this._placeholderAccessibilityID = \"placeholder-\" + _this._editorKey;\n        _this._latestEditorState = props.editorState;\n        _this._latestCommittedEditorState = props.editorState;\n        _this._onBeforeInput = _this._buildHandler(\"onBeforeInput\");\n        _this._onBlur = _this._buildHandler(\"onBlur\");\n        _this._onCharacterData = _this._buildHandler(\"onCharacterData\");\n        _this._onCompositionEnd = _this._buildHandler(\"onCompositionEnd\");\n        _this._onCompositionStart = _this._buildHandler(\"onCompositionStart\");\n        _this._onCopy = _this._buildHandler(\"onCopy\");\n        _this._onCut = _this._buildHandler(\"onCut\");\n        _this._onDragEnd = _this._buildHandler(\"onDragEnd\");\n        _this._onDragOver = _this._buildHandler(\"onDragOver\");\n        _this._onDragStart = _this._buildHandler(\"onDragStart\");\n        _this._onDrop = _this._buildHandler(\"onDrop\");\n        _this._onInput = _this._buildHandler(\"onInput\");\n        _this._onFocus = _this._buildHandler(\"onFocus\");\n        _this._onKeyDown = _this._buildHandler(\"onKeyDown\");\n        _this._onKeyPress = _this._buildHandler(\"onKeyPress\");\n        _this._onKeyUp = _this._buildHandler(\"onKeyUp\");\n        _this._onMouseDown = _this._buildHandler(\"onMouseDown\");\n        _this._onMouseUp = _this._buildHandler(\"onMouseUp\");\n        _this._onPaste = _this._buildHandler(\"onPaste\");\n        _this._onSelect = _this._buildHandler(\"onSelect\");\n        _this.getEditorKey = function() {\n            return _this._editorKey;\n        };\n        if (true) {\n            [\n                \"onDownArrow\",\n                \"onEscape\",\n                \"onLeftArrow\",\n                \"onRightArrow\",\n                \"onTab\",\n                \"onUpArrow\"\n            ].forEach(function(propName) {\n                if (props.hasOwnProperty(propName)) {\n                    // eslint-disable-next-line no-console\n                    console.warn(\"Supplying an `\".concat(propName, \"` prop to `DraftEditor` has \") + \"been deprecated. If your handler needs access to the keyboard \" + \"event, supply a custom `keyBindingFn` prop that falls back to \" + \"the default one (eg. https://is.gd/wHKQ3W).\");\n                }\n            });\n        } // See `restoreEditorDOM()`.\n        _this.state = {\n            contentsKey: 0\n        };\n        return _this;\n    }\n    /**\n   * Build a method that will pass the event to the specified handler method.\n   * This allows us to look up the correct handler function for the current\n   * editor mode, if any has been specified.\n   */ var _proto2 = DraftEditor.prototype;\n    _proto2._buildHandler = function _buildHandler(eventName) {\n        var _this2 = this;\n        // Wrap event handlers in `flushControlled`. In sync mode, this is\n        // effectively a no-op. In async mode, this ensures all updates scheduled\n        // inside the handler are flushed before React yields to the browser.\n        return function(e) {\n            if (!_this2.props.readOnly) {\n                var method = _this2._handler && _this2._handler[eventName];\n                if (method) {\n                    if (flushControlled) {\n                        flushControlled(function() {\n                            return method(_this2, e);\n                        });\n                    } else {\n                        method(_this2, e);\n                    }\n                }\n            }\n        };\n    };\n    _proto2._showPlaceholder = function _showPlaceholder() {\n        return !!this.props.placeholder && !this.props.editorState.isInCompositionMode() && !this.props.editorState.getCurrentContent().hasText();\n    };\n    _proto2._renderPlaceholder = function _renderPlaceholder() {\n        if (this._showPlaceholder()) {\n            var placeHolderProps = {\n                text: nullthrows(this.props.placeholder),\n                editorState: this.props.editorState,\n                textAlignment: this.props.textAlignment,\n                accessibilityID: this._placeholderAccessibilityID\n            };\n            /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This comment\n       * suppresses an error found when Flow v0.112 was deployed. To see the\n       * error delete this comment and run Flow. */ return React.createElement(DraftEditorPlaceholder, placeHolderProps);\n        }\n        return null;\n    } /**\n   * returns ariaDescribedBy prop with '{{editor_id_placeholder}}' replaced with\n   * the DOM id of the placeholder (if it exists)\n   * @returns aria-describedby attribute value\n   */ ;\n    _proto2._renderARIADescribedBy = function _renderARIADescribedBy() {\n        var describedBy = this.props.ariaDescribedBy || \"\";\n        var placeholderID = this._showPlaceholder() ? this._placeholderAccessibilityID : \"\";\n        return describedBy.replace(\"{{editor_id_placeholder}}\", placeholderID) || undefined;\n    };\n    _proto2.render = function render() {\n        var _this$props2 = this.props, blockRenderMap = _this$props2.blockRenderMap, blockRendererFn = _this$props2.blockRendererFn, blockStyleFn = _this$props2.blockStyleFn, customStyleFn = _this$props2.customStyleFn, customStyleMap = _this$props2.customStyleMap, editorState = _this$props2.editorState, preventScroll = _this$props2.preventScroll, readOnly = _this$props2.readOnly, textAlignment = _this$props2.textAlignment, textDirectionality = _this$props2.textDirectionality;\n        var rootClass = cx({\n            \"DraftEditor/root\": true,\n            \"DraftEditor/alignLeft\": textAlignment === \"left\",\n            \"DraftEditor/alignRight\": textAlignment === \"right\",\n            \"DraftEditor/alignCenter\": textAlignment === \"center\"\n        });\n        var contentStyle = {\n            outline: \"none\",\n            // fix parent-draggable Safari bug. #1326\n            userSelect: \"text\",\n            WebkitUserSelect: \"text\",\n            whiteSpace: \"pre-wrap\",\n            wordWrap: \"break-word\"\n        }; // The aria-expanded and aria-haspopup properties should only be rendered\n        // for a combobox.\n        /* $FlowFixMe[prop-missing] (>=0.68.0 site=www,mobile) This comment\n     * suppresses an error found when Flow v0.68 was deployed. To see the error\n     * delete this comment and run Flow. */ var ariaRole = this.props.role || \"textbox\";\n        var ariaExpanded = ariaRole === \"combobox\" ? !!this.props.ariaExpanded : null;\n        var editorContentsProps = {\n            blockRenderMap: blockRenderMap,\n            blockRendererFn: blockRendererFn,\n            blockStyleFn: blockStyleFn,\n            customStyleMap: _objectSpread({}, DefaultDraftInlineStyle, customStyleMap),\n            customStyleFn: customStyleFn,\n            editorKey: this._editorKey,\n            editorState: editorState,\n            preventScroll: preventScroll,\n            textDirectionality: textDirectionality\n        };\n        return React.createElement(\"div\", {\n            className: rootClass\n        }, this._renderPlaceholder(), React.createElement(\"div\", {\n            className: cx(\"DraftEditor/editorContainer\"),\n            ref: this._handleEditorContainerRef\n        }, React.createElement(\"div\", {\n            \"aria-activedescendant\": readOnly ? null : this.props.ariaActiveDescendantID,\n            \"aria-autocomplete\": readOnly ? null : this.props.ariaAutoComplete,\n            \"aria-controls\": readOnly ? null : this.props.ariaControls,\n            \"aria-describedby\": this._renderARIADescribedBy(),\n            \"aria-expanded\": readOnly ? null : ariaExpanded,\n            \"aria-label\": this.props.ariaLabel,\n            \"aria-labelledby\": this.props.ariaLabelledBy,\n            \"aria-multiline\": this.props.ariaMultiline,\n            \"aria-owns\": readOnly ? null : this.props.ariaOwneeID,\n            autoCapitalize: this.props.autoCapitalize,\n            autoComplete: this.props.autoComplete,\n            autoCorrect: this.props.autoCorrect,\n            className: cx({\n                // Chrome's built-in translation feature mutates the DOM in ways\n                // that Draft doesn't expect (ex: adding <font> tags inside\n                // DraftEditorLeaf spans) and causes problems. We add notranslate\n                // here which makes its autotranslation skip over this subtree.\n                notranslate: !readOnly,\n                \"public/DraftEditor/content\": true\n            }),\n            contentEditable: !readOnly,\n            \"data-testid\": this.props.webDriverTestID,\n            onBeforeInput: this._onBeforeInput,\n            onBlur: this._onBlur,\n            onCompositionEnd: this._onCompositionEnd,\n            onCompositionStart: this._onCompositionStart,\n            onCopy: this._onCopy,\n            onCut: this._onCut,\n            onDragEnd: this._onDragEnd,\n            onDragEnter: this.onDragEnter,\n            onDragLeave: this.onDragLeave,\n            onDragOver: this._onDragOver,\n            onDragStart: this._onDragStart,\n            onDrop: this._onDrop,\n            onFocus: this._onFocus,\n            onInput: this._onInput,\n            onKeyDown: this._onKeyDown,\n            onKeyPress: this._onKeyPress,\n            onKeyUp: this._onKeyUp,\n            onMouseUp: this._onMouseUp,\n            onPaste: this._onPaste,\n            onSelect: this._onSelect,\n            ref: this.props.editorRef,\n            role: readOnly ? null : ariaRole,\n            spellCheck: allowSpellCheck && this.props.spellCheck,\n            style: contentStyle,\n            suppressContentEditableWarning: true,\n            tabIndex: this.props.tabIndex\n        }, React.createElement(UpdateDraftEditorFlags, {\n            editor: this,\n            editorState: editorState\n        }), React.createElement(DraftEditorContents, _extends({}, editorContentsProps, {\n            key: \"contents\" + this.state.contentsKey\n        })))));\n    };\n    _proto2.componentDidMount = function componentDidMount() {\n        this._blockSelectEvents = false;\n        if (!didInitODS && gkx(\"draft_ods_enabled\")) {\n            didInitODS = true;\n            DraftEffects.initODS();\n        }\n        this.setMode(\"edit\");\n        /**\n     * IE has a hardcoded \"feature\" that attempts to convert link text into\n     * anchors in contentEditable DOM. This breaks the editor's expectations of\n     * the DOM, and control is lost. Disable it to make IE behave.\n     * See: http://blogs.msdn.com/b/ieinternals/archive/2010/09/15/\n     * ie9-beta-minor-change-list.aspx\n     */ if (isIE) {\n            // editor can be null after mounting\n            // https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback\n            if (!this.editor) {\n                global.execCommand(\"AutoUrlDetect\", false, false);\n            } else {\n                this.editor.ownerDocument.execCommand(\"AutoUrlDetect\", false, false);\n            }\n        }\n    };\n    _proto2.componentDidUpdate = function componentDidUpdate() {\n        this._blockSelectEvents = false;\n        this._latestEditorState = this.props.editorState;\n        this._latestCommittedEditorState = this.props.editorState;\n    } /**\n   * Used via `this.focus()`.\n   *\n   * Force focus back onto the editor node.\n   *\n   * We attempt to preserve scroll position when focusing. You can also pass\n   * a specified scroll position (for cases like `cut` behavior where it should\n   * be restored to a known position).\n   */ ;\n    return DraftEditor;\n}(React.Component);\n_defineProperty(DraftEditor, \"defaultProps\", {\n    ariaDescribedBy: \"{{editor_id_placeholder}}\",\n    blockRenderMap: DefaultDraftBlockRenderMap,\n    blockRendererFn: function blockRendererFn() {\n        return null;\n    },\n    blockStyleFn: function blockStyleFn() {\n        return \"\";\n    },\n    keyBindingFn: getDefaultKeyBinding,\n    readOnly: false,\n    spellCheck: false,\n    stripPastedStyles: false\n});\nmodule.exports = DraftEditor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditor.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorBlock.react.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DraftEditorLeaf = __webpack_require__(/*! ./DraftEditorLeaf.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Scroll = __webpack_require__(/*! fbjs/lib/Scroll */ \"(ssr)/./node_modules/fbjs/lib/Scroll.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar UnicodeBidi = __webpack_require__(/*! fbjs/lib/UnicodeBidi */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidi.js\");\nvar UnicodeBidiDirection = __webpack_require__(/*! fbjs/lib/UnicodeBidiDirection */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidiDirection.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar getElementPosition = __webpack_require__(/*! fbjs/lib/getElementPosition */ \"(ssr)/./node_modules/fbjs/lib/getElementPosition.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar getViewportDimensions = __webpack_require__(/*! fbjs/lib/getViewportDimensions */ \"(ssr)/./node_modules/fbjs/lib/getViewportDimensions.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar SCROLL_BUFFER = 10;\n/**\n * Return whether a block overlaps with either edge of the `SelectionState`.\n */ var isBlockOnSelectionEdge = function isBlockOnSelectionEdge(selection, key) {\n    return selection.getAnchorKey() === key || selection.getFocusKey() === key;\n};\n/**\n * The default block renderer for a `DraftEditor` component.\n *\n * A `DraftEditorBlock` is able to render a given `ContentBlock` to its\n * appropriate decorator and inline style components.\n */ var DraftEditorBlock = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorBlock, _React$Component);\n    function DraftEditorBlock() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _defineProperty(_assertThisInitialized(_this), \"_node\", void 0);\n        return _this;\n    }\n    var _proto = DraftEditorBlock.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        return this.props.block !== nextProps.block || this.props.tree !== nextProps.tree || this.props.direction !== nextProps.direction || isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) && nextProps.forceSelection;\n    } /**\n   * When a block is mounted and overlaps the selection state, we need to make\n   * sure that the cursor is visible to match native behavior. This may not\n   * be the case if the user has pressed `RETURN` or pasted some content, since\n   * programmatically creating these new blocks and setting the DOM selection\n   * will miss out on the browser natively scrolling to that position.\n   *\n   * To replicate native behavior, if the block overlaps the selection state\n   * on mount, force the scroll position. Check the scroll state of the scroll\n   * parent, and adjust it to align the entire block to the bottom of the\n   * scroll parent.\n   */ ;\n    _proto.componentDidMount = function componentDidMount() {\n        if (this.props.preventScroll) {\n            return;\n        }\n        var selection = this.props.selection;\n        var endKey = selection.getEndKey();\n        if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {\n            return;\n        }\n        var blockNode = this._node;\n        if (blockNode == null) {\n            return;\n        }\n        var scrollParent = Style.getScrollParent(blockNode);\n        var scrollPosition = getScrollPosition(scrollParent);\n        var scrollDelta;\n        if (scrollParent === window) {\n            var nodePosition = getElementPosition(blockNode);\n            var nodeBottom = nodePosition.y + nodePosition.height;\n            var viewportHeight = getViewportDimensions().height;\n            scrollDelta = nodeBottom - viewportHeight;\n            if (scrollDelta > 0) {\n                window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);\n            }\n        } else {\n            !isHTMLElement(blockNode) ?  true ? invariant(false, \"blockNode is not an HTMLElement\") : 0 : void 0;\n            var blockBottom = blockNode.offsetHeight + blockNode.offsetTop;\n            var pOffset = scrollParent.offsetTop + scrollParent.offsetHeight;\n            var scrollBottom = pOffset + scrollPosition.y;\n            scrollDelta = blockBottom - scrollBottom;\n            if (scrollDelta > 0) {\n                Scroll.setTop(scrollParent, Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER);\n            }\n        }\n    };\n    _proto._renderChildren = function _renderChildren() {\n        var _this2 = this;\n        var block = this.props.block;\n        var blockKey = block.getKey();\n        var text = block.getText();\n        var lastLeafSet = this.props.tree.size - 1;\n        var hasSelection = isBlockOnSelectionEdge(this.props.selection, blockKey);\n        return this.props.tree.map(function(leafSet, ii) {\n            var leavesForLeafSet = leafSet.get(\"leaves\"); // T44088704\n            if (leavesForLeafSet.size === 0) {\n                return null;\n            }\n            var lastLeaf = leavesForLeafSet.size - 1;\n            var leaves = leavesForLeafSet.map(function(leaf, jj) {\n                var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);\n                var start = leaf.get(\"start\");\n                var end = leaf.get(\"end\");\n                return React.createElement(DraftEditorLeaf, {\n                    key: offsetKey,\n                    offsetKey: offsetKey,\n                    block: block,\n                    start: start,\n                    selection: hasSelection ? _this2.props.selection : null,\n                    forceSelection: _this2.props.forceSelection,\n                    text: text.slice(start, end),\n                    styleSet: block.getInlineStyleAt(start),\n                    customStyleMap: _this2.props.customStyleMap,\n                    customStyleFn: _this2.props.customStyleFn,\n                    isLast: ii === lastLeafSet && jj === lastLeaf\n                });\n            }).toArray();\n            var decoratorKey = leafSet.get(\"decoratorKey\");\n            if (decoratorKey == null) {\n                return leaves;\n            }\n            if (!_this2.props.decorator) {\n                return leaves;\n            }\n            var decorator = nullthrows(_this2.props.decorator);\n            var DecoratorComponent = decorator.getComponentForKey(decoratorKey);\n            if (!DecoratorComponent) {\n                return leaves;\n            }\n            var decoratorProps = decorator.getPropsForKey(decoratorKey);\n            var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, ii, 0);\n            var start = leavesForLeafSet.first().get(\"start\");\n            var end = leavesForLeafSet.last().get(\"end\");\n            var decoratedText = text.slice(start, end);\n            var entityKey = block.getEntityAt(leafSet.get(\"start\")); // Resetting dir to the same value on a child node makes Chrome/Firefox\n            // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/\n            var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(UnicodeBidi.getDirection(decoratedText), _this2.props.direction);\n            var commonProps = {\n                contentState: _this2.props.contentState,\n                decoratedText: decoratedText,\n                dir: dir,\n                start: start,\n                end: end,\n                blockKey: blockKey,\n                entityKey: entityKey,\n                offsetKey: decoratorOffsetKey\n            };\n            return React.createElement(DecoratorComponent, _extends({}, decoratorProps, commonProps, {\n                key: decoratorOffsetKey\n            }), leaves);\n        }).toArray();\n    };\n    _proto.render = function render() {\n        var _this3 = this;\n        var _this$props = this.props, direction = _this$props.direction, offsetKey = _this$props.offsetKey;\n        var className = cx({\n            \"public/DraftStyleDefault/block\": true,\n            \"public/DraftStyleDefault/ltr\": direction === \"LTR\",\n            \"public/DraftStyleDefault/rtl\": direction === \"RTL\"\n        });\n        return React.createElement(\"div\", {\n            \"data-offset-key\": offsetKey,\n            className: className,\n            ref: function ref(_ref) {\n                return _this3._node = _ref;\n            }\n        }, this._renderChildren());\n    };\n    return DraftEditorBlock;\n}(React.Component);\nmodule.exports = DraftEditorBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorBlockNode.react.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorBlockNode.react.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of DraftEditorBlock.react.js and DraftEditorContents.react.js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DraftEditorNode = __webpack_require__(/*! ./DraftEditorNode.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorNode.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Scroll = __webpack_require__(/*! fbjs/lib/Scroll */ \"(ssr)/./node_modules/fbjs/lib/Scroll.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar getElementPosition = __webpack_require__(/*! fbjs/lib/getElementPosition */ \"(ssr)/./node_modules/fbjs/lib/getElementPosition.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar getViewportDimensions = __webpack_require__(/*! fbjs/lib/getViewportDimensions */ \"(ssr)/./node_modules/fbjs/lib/getViewportDimensions.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar SCROLL_BUFFER = 10;\nvar List = Immutable.List; // we should harden up the bellow flow types to make them more strict\n/**\n * Return whether a block overlaps with either edge of the `SelectionState`.\n */ var isBlockOnSelectionEdge = function isBlockOnSelectionEdge(selection, key) {\n    return selection.getAnchorKey() === key || selection.getFocusKey() === key;\n};\n/**\n * We will use this helper to identify blocks that need to be wrapped but have siblings that\n * also share the same wrapper element, this way we can do the wrapping once the last sibling\n * is added.\n */ var shouldNotAddWrapperElement = function shouldNotAddWrapperElement(block, contentState) {\n    var nextSiblingKey = block.getNextSiblingKey();\n    return nextSiblingKey ? contentState.getBlockForKey(nextSiblingKey).getType() === block.getType() : false;\n};\nvar applyWrapperElementToSiblings = function applyWrapperElementToSiblings(wrapperTemplate, Element, nodes) {\n    var wrappedSiblings = []; // we check back until we find a sibling that does not have same wrapper\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n        for(var _iterator = nodes.reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var sibling = _step.value;\n            if (sibling.type !== Element) {\n                break;\n            }\n            wrappedSiblings.push(sibling);\n        } // we now should remove from acc the wrappedSiblings and add them back under same wrap\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    nodes.splice(nodes.indexOf(wrappedSiblings[0]), wrappedSiblings.length + 1);\n    var childrenIs = wrappedSiblings.reverse();\n    var key = childrenIs[0].key;\n    nodes.push(React.cloneElement(wrapperTemplate, {\n        key: \"\".concat(key, \"-wrap\"),\n        \"data-offset-key\": DraftOffsetKey.encode(key, 0, 0)\n    }, childrenIs));\n    return nodes;\n};\nvar getDraftRenderConfig = function getDraftRenderConfig(block, blockRenderMap) {\n    var configForType = blockRenderMap.get(block.getType()) || blockRenderMap.get(\"unstyled\");\n    var wrapperTemplate = configForType.wrapper;\n    var Element = configForType.element || blockRenderMap.get(\"unstyled\").element;\n    return {\n        Element: Element,\n        wrapperTemplate: wrapperTemplate\n    };\n};\nvar getCustomRenderConfig = function getCustomRenderConfig(block, blockRendererFn) {\n    var customRenderer = blockRendererFn(block);\n    if (!customRenderer) {\n        return {};\n    }\n    var CustomComponent = customRenderer.component, customProps = customRenderer.props, customEditable = customRenderer.editable;\n    return {\n        CustomComponent: CustomComponent,\n        customProps: customProps,\n        customEditable: customEditable\n    };\n};\nvar getElementPropsConfig = function getElementPropsConfig(block, editorKey, offsetKey, blockStyleFn, customConfig, ref) {\n    var elementProps = {\n        \"data-block\": true,\n        \"data-editor\": editorKey,\n        \"data-offset-key\": offsetKey,\n        key: block.getKey(),\n        ref: ref\n    };\n    var customClass = blockStyleFn(block);\n    if (customClass) {\n        elementProps.className = customClass;\n    }\n    if (customConfig.customEditable !== undefined) {\n        elementProps = _objectSpread({}, elementProps, {\n            contentEditable: customConfig.customEditable,\n            suppressContentEditableWarning: true\n        });\n    }\n    return elementProps;\n};\nvar DraftEditorBlockNode = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorBlockNode, _React$Component);\n    function DraftEditorBlockNode() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _defineProperty(_assertThisInitialized(_this), \"wrapperRef\", React.createRef());\n        return _this;\n    }\n    var _proto = DraftEditorBlockNode.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var _this$props = this.props, block = _this$props.block, direction = _this$props.direction, tree = _this$props.tree;\n        var isContainerNode = !block.getChildKeys().isEmpty();\n        var blockHasChanged = block !== nextProps.block || tree !== nextProps.tree || direction !== nextProps.direction || isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) && nextProps.forceSelection; // if we have children at this stage we always re-render container nodes\n        // else if its a root node we avoid re-rendering by checking for block updates\n        return isContainerNode || blockHasChanged;\n    } /**\n   * When a block is mounted and overlaps the selection state, we need to make\n   * sure that the cursor is visible to match native behavior. This may not\n   * be the case if the user has pressed `RETURN` or pasted some content, since\n   * programatically creating these new blocks and setting the DOM selection\n   * will miss out on the browser natively scrolling to that position.\n   *\n   * To replicate native behavior, if the block overlaps the selection state\n   * on mount, force the scroll position. Check the scroll state of the scroll\n   * parent, and adjust it to align the entire block to the bottom of the\n   * scroll parent.\n   */ ;\n    _proto.componentDidMount = function componentDidMount() {\n        var selection = this.props.selection;\n        var endKey = selection.getEndKey();\n        if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {\n            return;\n        }\n        var blockNode = this.wrapperRef.current;\n        if (!blockNode) {\n            // This Block Node was rendered without a wrapper element.\n            return;\n        }\n        var scrollParent = Style.getScrollParent(blockNode);\n        var scrollPosition = getScrollPosition(scrollParent);\n        var scrollDelta;\n        if (scrollParent === window) {\n            var nodePosition = getElementPosition(blockNode);\n            var nodeBottom = nodePosition.y + nodePosition.height;\n            var viewportHeight = getViewportDimensions().height;\n            scrollDelta = nodeBottom - viewportHeight;\n            if (scrollDelta > 0) {\n                window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);\n            }\n        } else {\n            !isHTMLElement(blockNode) ?  true ? invariant(false, \"blockNode is not an HTMLElement\") : 0 : void 0;\n            var htmlBlockNode = blockNode;\n            var blockBottom = htmlBlockNode.offsetHeight + htmlBlockNode.offsetTop;\n            var scrollBottom = scrollParent.offsetHeight + scrollPosition.y;\n            scrollDelta = blockBottom - scrollBottom;\n            if (scrollDelta > 0) {\n                Scroll.setTop(scrollParent, Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER);\n            }\n        }\n    };\n    _proto.render = function render() {\n        var _this2 = this;\n        var _this$props2 = this.props, block = _this$props2.block, blockRenderMap = _this$props2.blockRenderMap, blockRendererFn = _this$props2.blockRendererFn, blockStyleFn = _this$props2.blockStyleFn, contentState = _this$props2.contentState, decorator = _this$props2.decorator, editorKey = _this$props2.editorKey, editorState = _this$props2.editorState, customStyleFn = _this$props2.customStyleFn, customStyleMap = _this$props2.customStyleMap, direction = _this$props2.direction, forceSelection = _this$props2.forceSelection, selection = _this$props2.selection, tree = _this$props2.tree;\n        var children = null;\n        if (block.children.size) {\n            children = block.children.reduce(function(acc, key) {\n                var offsetKey = DraftOffsetKey.encode(key, 0, 0);\n                var child = contentState.getBlockForKey(key);\n                var customConfig = getCustomRenderConfig(child, blockRendererFn);\n                var Component = customConfig.CustomComponent || DraftEditorBlockNode;\n                var _getDraftRenderConfig = getDraftRenderConfig(child, blockRenderMap), Element = _getDraftRenderConfig.Element, wrapperTemplate = _getDraftRenderConfig.wrapperTemplate;\n                var elementProps = getElementPropsConfig(child, editorKey, offsetKey, blockStyleFn, customConfig, null);\n                var childProps = _objectSpread({}, _this2.props, {\n                    tree: editorState.getBlockTree(key),\n                    blockProps: customConfig.customProps,\n                    offsetKey: offsetKey,\n                    block: child\n                });\n                acc.push(React.createElement(Element, elementProps, React.createElement(Component, childProps)));\n                if (!wrapperTemplate || shouldNotAddWrapperElement(child, contentState)) {\n                    return acc;\n                } // if we are here it means we are the last block\n                // that has a wrapperTemplate so we should wrap itself\n                // and all other previous siblings that share the same wrapper\n                applyWrapperElementToSiblings(wrapperTemplate, Element, acc);\n                return acc;\n            }, []);\n        }\n        var blockKey = block.getKey();\n        var offsetKey = DraftOffsetKey.encode(blockKey, 0, 0);\n        var customConfig = getCustomRenderConfig(block, blockRendererFn);\n        var Component = customConfig.CustomComponent;\n        var blockNode = Component != null ? React.createElement(Component, _extends({}, this.props, {\n            tree: editorState.getBlockTree(blockKey),\n            blockProps: customConfig.customProps,\n            offsetKey: offsetKey,\n            block: block\n        })) : React.createElement(DraftEditorNode, {\n            block: block,\n            children: children,\n            contentState: contentState,\n            customStyleFn: customStyleFn,\n            customStyleMap: customStyleMap,\n            decorator: decorator,\n            direction: direction,\n            forceSelection: forceSelection,\n            hasSelection: isBlockOnSelectionEdge(selection, blockKey),\n            selection: selection,\n            tree: tree\n        });\n        if (block.getParentKey()) {\n            return blockNode;\n        }\n        var _getDraftRenderConfig2 = getDraftRenderConfig(block, blockRenderMap), Element = _getDraftRenderConfig2.Element;\n        var elementProps = getElementPropsConfig(block, editorKey, offsetKey, blockStyleFn, customConfig, this.wrapperRef); // root block nodes needs to be wrapped\n        return React.createElement(Element, elementProps, blockNode);\n    };\n    return DraftEditorBlockNode;\n}(React.Component);\nmodule.exports = DraftEditorBlockNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorBlockNode.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorCompositionHandler.js":
/*!********************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorCompositionHandler.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DOMObserver = __webpack_require__(/*! ./DOMObserver */ \"(ssr)/./node_modules/draft-js/lib/DOMObserver.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar editOnSelect = __webpack_require__(/*! ./editOnSelect */ \"(ssr)/./node_modules/draft-js/lib/editOnSelect.js\");\nvar getContentEditableContainer = __webpack_require__(/*! ./getContentEditableContainer */ \"(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js\");\nvar getDraftEditorSelection = __webpack_require__(/*! ./getDraftEditorSelection */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js\");\nvar getEntityKeyForSelection = __webpack_require__(/*! ./getEntityKeyForSelection */ \"(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar isIE = UserAgent.isBrowser(\"IE\");\n/**\n * Millisecond delay to allow `compositionstart` to fire again upon\n * `compositionend`.\n *\n * This is used for Korean input to ensure that typing can continue without\n * the editor trying to render too quickly. More specifically, Safari 7.1+\n * triggers `compositionstart` a little slower than Chrome/FF, which\n * leads to composed characters being resolved and re-render occurring\n * sooner than we want.\n */ var RESOLVE_DELAY = 20;\n/**\n * A handful of variables used to track the current composition and its\n * resolution status. These exist at the module level because it is not\n * possible to have compositions occurring in multiple editors simultaneously,\n * and it simplifies state management with respect to the DraftEditor component.\n */ var resolved = false;\nvar stillComposing = false;\nvar domObserver = null;\nfunction startDOMObserver(editor) {\n    if (!domObserver) {\n        domObserver = new DOMObserver(getContentEditableContainer(editor));\n        domObserver.start();\n    }\n}\nvar DraftEditorCompositionHandler = {\n    /**\n   * A `compositionstart` event has fired while we're still in composition\n   * mode. Continue the current composition session to prevent a re-render.\n   */ onCompositionStart: function onCompositionStart(editor) {\n        stillComposing = true;\n        startDOMObserver(editor);\n    },\n    /**\n   * Attempt to end the current composition session.\n   *\n   * Defer handling because browser will still insert the chars into active\n   * element after `compositionend`. If a `compositionstart` event fires\n   * before `resolveComposition` executes, our composition session will\n   * continue.\n   *\n   * The `resolved` flag is useful because certain IME interfaces fire the\n   * `compositionend` event multiple times, thus queueing up multiple attempts\n   * at handling the composition. Since handling the same composition event\n   * twice could break the DOM, we only use the first event. Example: Arabic\n   * Google Input Tools on Windows 8.1 fires `compositionend` three times.\n   */ onCompositionEnd: function onCompositionEnd(editor) {\n        resolved = false;\n        stillComposing = false;\n        setTimeout(function() {\n            if (!resolved) {\n                DraftEditorCompositionHandler.resolveComposition(editor);\n            }\n        }, RESOLVE_DELAY);\n    },\n    onSelect: editOnSelect,\n    /**\n   * In Safari, keydown events may fire when committing compositions. If\n   * the arrow keys are used to commit, prevent default so that the cursor\n   * doesn't move, otherwise it will jump back noticeably on re-render.\n   */ onKeyDown: function onKeyDown(editor, e) {\n        if (!stillComposing) {\n            // If a keydown event is received after compositionend but before the\n            // 20ms timer expires (ex: type option-E then backspace, or type A then\n            // backspace in 2-Set Korean), we should immediately resolve the\n            // composition and reinterpret the key press in edit mode.\n            DraftEditorCompositionHandler.resolveComposition(editor);\n            editor._onKeyDown(e);\n            return;\n        }\n        if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {\n            e.preventDefault();\n        }\n    },\n    /**\n   * Keypress events may fire when committing compositions. In Firefox,\n   * pressing RETURN commits the composition and inserts extra newline\n   * characters that we do not want. `preventDefault` allows the composition\n   * to be committed while preventing the extra characters.\n   */ onKeyPress: function onKeyPress(_editor, e) {\n        if (e.which === Keys.RETURN) {\n            e.preventDefault();\n        }\n    },\n    /**\n   * Attempt to insert composed characters into the document.\n   *\n   * If we are still in a composition session, do nothing. Otherwise, insert\n   * the characters into the document and terminate the composition session.\n   *\n   * If no characters were composed -- for instance, the user\n   * deleted all composed characters and committed nothing new --\n   * force a re-render. We also re-render when the composition occurs\n   * at the beginning of a leaf, to ensure that if the browser has\n   * created a new text node for the composition, we will discard it.\n   *\n   * Resetting innerHTML will move focus to the beginning of the editor,\n   * so we update to force it back to the correct place.\n   */ resolveComposition: function resolveComposition(editor) {\n        if (stillComposing) {\n            return;\n        }\n        var mutations = nullthrows(domObserver).stopAndFlushMutations();\n        domObserver = null;\n        resolved = true;\n        var editorState = EditorState.set(editor._latestEditorState, {\n            inCompositionMode: false\n        });\n        editor.exitCurrentMode();\n        if (!mutations.size) {\n            editor.update(editorState);\n            return;\n        } // TODO, check if Facebook still needs this flag or if it could be removed.\n        // Since there can be multiple mutations providing a `composedChars` doesn't\n        // apply well on this new model.\n        // if (\n        //   gkx('draft_handlebeforeinput_composed_text') &&\n        //   editor.props.handleBeforeInput &&\n        //   isEventHandled(\n        //     editor.props.handleBeforeInput(\n        //       composedChars,\n        //       editorState,\n        //       event.timeStamp,\n        //     ),\n        //   )\n        // ) {\n        //   return;\n        // }\n        var contentState = editorState.getCurrentContent();\n        mutations.forEach(function(composedChars, offsetKey) {\n            var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey), blockKey = _DraftOffsetKey$decod.blockKey, decoratorKey = _DraftOffsetKey$decod.decoratorKey, leafKey = _DraftOffsetKey$decod.leafKey;\n            var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([\n                decoratorKey,\n                \"leaves\",\n                leafKey\n            ]), start = _editorState$getBlock.start, end = _editorState$getBlock.end;\n            var replacementRange = editorState.getSelection().merge({\n                anchorKey: blockKey,\n                focusKey: blockKey,\n                anchorOffset: start,\n                focusOffset: end,\n                isBackward: false\n            });\n            var entityKey = getEntityKeyForSelection(contentState, replacementRange);\n            var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);\n            contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars, currentStyle, entityKey); // We need to update the editorState so the leaf node ranges are properly\n            // updated and multiple mutations are correctly applied.\n            editorState = EditorState.set(editorState, {\n                currentContent: contentState\n            });\n        }); // When we apply the text changes to the ContentState, the selection always\n        // goes to the end of the field, but it should just stay where it is\n        // after compositionEnd.\n        var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n        var compositionEndSelectionState = documentSelection.selectionState;\n        editor.restoreEditorDOM(); // See:\n        // - https://github.com/facebook/draft-js/issues/2093\n        // - https://github.com/facebook/draft-js/pull/2094\n        // Apply this fix only in IE for now. We can test it in\n        // other browsers in the future to ensure no regressions\n        var editorStateWithUpdatedSelection = isIE ? EditorState.forceSelection(editorState, compositionEndSelectionState) : EditorState.acceptSelection(editorState, compositionEndSelectionState);\n        editor.update(EditorState.push(editorStateWithUpdatedSelection, contentState, \"insert-characters\"));\n    }\n};\nmodule.exports = DraftEditorCompositionHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorCompositionHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorContents-core.react.js":
/*!*********************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorContents-core.react.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftEditorBlock = __webpack_require__(/*! ./DraftEditorBlock.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar joinClasses = __webpack_require__(/*! fbjs/lib/joinClasses */ \"(ssr)/./node_modules/fbjs/lib/joinClasses.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * Provide default styling for list items. This way, lists will be styled with\n * proper counters and indentation even if the caller does not specify\n * their own styling at all. If more than five levels of nesting are needed,\n * the necessary CSS classes can be provided via `blockStyleFn` configuration.\n */ var getListItemClasses = function getListItemClasses(type, depth, shouldResetCount, direction) {\n    return cx({\n        \"public/DraftStyleDefault/unorderedListItem\": type === \"unordered-list-item\",\n        \"public/DraftStyleDefault/orderedListItem\": type === \"ordered-list-item\",\n        \"public/DraftStyleDefault/reset\": shouldResetCount,\n        \"public/DraftStyleDefault/depth0\": depth === 0,\n        \"public/DraftStyleDefault/depth1\": depth === 1,\n        \"public/DraftStyleDefault/depth2\": depth === 2,\n        \"public/DraftStyleDefault/depth3\": depth === 3,\n        \"public/DraftStyleDefault/depth4\": depth >= 4,\n        \"public/DraftStyleDefault/listLTR\": direction === \"LTR\",\n        \"public/DraftStyleDefault/listRTL\": direction === \"RTL\"\n    });\n};\n/**\n * `DraftEditorContents` is the container component for all block components\n * rendered for a `DraftEditor`. It is optimized to aggressively avoid\n * re-rendering blocks whenever possible.\n *\n * This component is separate from `DraftEditor` because certain props\n * (for instance, ARIA props) must be allowed to update without affecting\n * the contents of the editor.\n */ var DraftEditorContents = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorContents, _React$Component);\n    function DraftEditorContents() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorContents.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var prevEditorState = this.props.editorState;\n        var nextEditorState = nextProps.editorState;\n        var prevDirectionMap = prevEditorState.getDirectionMap();\n        var nextDirectionMap = nextEditorState.getDirectionMap(); // Text direction has changed for one or more blocks. We must re-render.\n        if (prevDirectionMap !== nextDirectionMap) {\n            return true;\n        }\n        var didHaveFocus = prevEditorState.getSelection().getHasFocus();\n        var nowHasFocus = nextEditorState.getSelection().getHasFocus();\n        if (didHaveFocus !== nowHasFocus) {\n            return true;\n        }\n        var nextNativeContent = nextEditorState.getNativelyRenderedContent();\n        var wasComposing = prevEditorState.isInCompositionMode();\n        var nowComposing = nextEditorState.isInCompositionMode(); // If the state is unchanged or we're currently rendering a natively\n        // rendered state, there's nothing new to be done.\n        if (prevEditorState === nextEditorState || nextNativeContent !== null && nextEditorState.getCurrentContent() === nextNativeContent || wasComposing && nowComposing) {\n            return false;\n        }\n        var prevContent = prevEditorState.getCurrentContent();\n        var nextContent = nextEditorState.getCurrentContent();\n        var prevDecorator = prevEditorState.getDecorator();\n        var nextDecorator = nextEditorState.getDecorator();\n        return wasComposing !== nowComposing || prevContent !== nextContent || prevDecorator !== nextDecorator || nextEditorState.mustForceSelection();\n    };\n    _proto.render = function render() {\n        var _this$props = this.props, blockRenderMap = _this$props.blockRenderMap, blockRendererFn = _this$props.blockRendererFn, blockStyleFn = _this$props.blockStyleFn, customStyleMap = _this$props.customStyleMap, customStyleFn = _this$props.customStyleFn, editorState = _this$props.editorState, editorKey = _this$props.editorKey, preventScroll = _this$props.preventScroll, textDirectionality = _this$props.textDirectionality;\n        var content = editorState.getCurrentContent();\n        var selection = editorState.getSelection();\n        var forceSelection = editorState.mustForceSelection();\n        var decorator = editorState.getDecorator();\n        var directionMap = nullthrows(editorState.getDirectionMap());\n        var blocksAsArray = content.getBlocksAsArray();\n        var processedBlocks = [];\n        var currentDepth = null;\n        var lastWrapperTemplate = null;\n        for(var ii = 0; ii < blocksAsArray.length; ii++){\n            var _block = blocksAsArray[ii];\n            var key = _block.getKey();\n            var blockType = _block.getType();\n            var customRenderer = blockRendererFn(_block);\n            var CustomComponent = void 0, customProps = void 0, customEditable = void 0;\n            if (customRenderer) {\n                CustomComponent = customRenderer.component;\n                customProps = customRenderer.props;\n                customEditable = customRenderer.editable;\n            }\n            var direction = textDirectionality ? textDirectionality : directionMap.get(key);\n            var offsetKey = DraftOffsetKey.encode(key, 0, 0);\n            var componentProps = {\n                contentState: content,\n                block: _block,\n                blockProps: customProps,\n                blockStyleFn: blockStyleFn,\n                customStyleMap: customStyleMap,\n                customStyleFn: customStyleFn,\n                decorator: decorator,\n                direction: direction,\n                forceSelection: forceSelection,\n                offsetKey: offsetKey,\n                preventScroll: preventScroll,\n                selection: selection,\n                tree: editorState.getBlockTree(key)\n            };\n            var configForType = blockRenderMap.get(blockType) || blockRenderMap.get(\"unstyled\");\n            var wrapperTemplate = configForType.wrapper;\n            var Element = configForType.element || blockRenderMap.get(\"unstyled\").element;\n            var depth = _block.getDepth();\n            var _className = \"\";\n            if (blockStyleFn) {\n                _className = blockStyleFn(_block);\n            } // List items are special snowflakes, since we handle nesting and\n            // counters manually.\n            if (Element === \"li\") {\n                var shouldResetCount = lastWrapperTemplate !== wrapperTemplate || currentDepth === null || depth > currentDepth;\n                _className = joinClasses(_className, getListItemClasses(blockType, depth, shouldResetCount, direction));\n            }\n            var Component = CustomComponent || DraftEditorBlock;\n            var childProps = {\n                className: _className,\n                \"data-block\": true,\n                \"data-editor\": editorKey,\n                \"data-offset-key\": offsetKey,\n                key: key\n            };\n            if (customEditable !== undefined) {\n                childProps = _objectSpread({}, childProps, {\n                    contentEditable: customEditable,\n                    suppressContentEditableWarning: true\n                });\n            }\n            var child = React.createElement(Element, childProps, /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This\n       * comment suppresses an error found when Flow v0.112 was deployed. To\n       * see the error delete this comment and run Flow. */ React.createElement(Component, _extends({}, componentProps, {\n                key: key\n            })));\n            processedBlocks.push({\n                block: child,\n                wrapperTemplate: wrapperTemplate,\n                key: key,\n                offsetKey: offsetKey\n            });\n            if (wrapperTemplate) {\n                currentDepth = _block.getDepth();\n            } else {\n                currentDepth = null;\n            }\n            lastWrapperTemplate = wrapperTemplate;\n        } // Group contiguous runs of blocks that have the same wrapperTemplate\n        var outputBlocks = [];\n        for(var _ii = 0; _ii < processedBlocks.length;){\n            var info = processedBlocks[_ii];\n            if (info.wrapperTemplate) {\n                var blocks = [];\n                do {\n                    blocks.push(processedBlocks[_ii].block);\n                    _ii++;\n                }while (_ii < processedBlocks.length && processedBlocks[_ii].wrapperTemplate === info.wrapperTemplate);\n                var wrapperElement = React.cloneElement(info.wrapperTemplate, {\n                    key: info.key + \"-wrap\",\n                    \"data-offset-key\": info.offsetKey\n                }, blocks);\n                outputBlocks.push(wrapperElement);\n            } else {\n                outputBlocks.push(info.block);\n                _ii++;\n            }\n        }\n        return React.createElement(\"div\", {\n            \"data-contents\": \"true\"\n        }, outputBlocks);\n    };\n    return DraftEditorContents;\n}(React.Component);\nmodule.exports = DraftEditorContents;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorContents-core.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorContents.react.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorContents.react.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */ \nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nmodule.exports = experimentalTreeDataSupport ? __webpack_require__(/*! ./DraftEditorContentsExperimental.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js\") : __webpack_require__(/*! ./DraftEditorContents-core.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorContents-core.react.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yQ29udGVudHMucmVhY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0NBUUMsR0FDRDtBQUVBLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDLHVEQUFPO0FBRXpCLElBQUlDLDhCQUE4QkYsSUFBSTtBQUN0Q0csT0FBT0MsT0FBTyxHQUFHRiw4QkFBOEJELG1CQUFPQSxDQUFDLDJIQUF5QyxJQUFJQSxtQkFBT0EsQ0FBQyw2R0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yQ29udGVudHMucmVhY3QuanM/MmVmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBna3ggPSByZXF1aXJlKFwiLi9na3hcIik7XG5cbnZhciBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPSBna3goJ2RyYWZ0X3RyZWVfZGF0YV9zdXBwb3J0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA/IHJlcXVpcmUoXCIuL0RyYWZ0RWRpdG9yQ29udGVudHNFeHBlcmltZW50YWwucmVhY3RcIikgOiByZXF1aXJlKFwiLi9EcmFmdEVkaXRvckNvbnRlbnRzLWNvcmUucmVhY3RcIik7Il0sIm5hbWVzIjpbImdreCIsInJlcXVpcmUiLCJleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorContents.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js":
/*!****************************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of DraftEditorContents.react.js for tree nodes\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftEditorBlockNode = __webpack_require__(/*! ./DraftEditorBlockNode.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorBlockNode.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * `DraftEditorContents` is the container component for all block components\n * rendered for a `DraftEditor`. It is optimized to aggressively avoid\n * re-rendering blocks whenever possible.\n *\n * This component is separate from `DraftEditor` because certain props\n * (for instance, ARIA props) must be allowed to update without affecting\n * the contents of the editor.\n */ var DraftEditorContentsExperimental = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorContentsExperimental, _React$Component);\n    function DraftEditorContentsExperimental() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorContentsExperimental.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var prevEditorState = this.props.editorState;\n        var nextEditorState = nextProps.editorState;\n        var prevDirectionMap = prevEditorState.getDirectionMap();\n        var nextDirectionMap = nextEditorState.getDirectionMap(); // Text direction has changed for one or more blocks. We must re-render.\n        if (prevDirectionMap !== nextDirectionMap) {\n            return true;\n        }\n        var didHaveFocus = prevEditorState.getSelection().getHasFocus();\n        var nowHasFocus = nextEditorState.getSelection().getHasFocus();\n        if (didHaveFocus !== nowHasFocus) {\n            return true;\n        }\n        var nextNativeContent = nextEditorState.getNativelyRenderedContent();\n        var wasComposing = prevEditorState.isInCompositionMode();\n        var nowComposing = nextEditorState.isInCompositionMode(); // If the state is unchanged or we're currently rendering a natively\n        // rendered state, there's nothing new to be done.\n        if (prevEditorState === nextEditorState || nextNativeContent !== null && nextEditorState.getCurrentContent() === nextNativeContent || wasComposing && nowComposing) {\n            return false;\n        }\n        var prevContent = prevEditorState.getCurrentContent();\n        var nextContent = nextEditorState.getCurrentContent();\n        var prevDecorator = prevEditorState.getDecorator();\n        var nextDecorator = nextEditorState.getDecorator();\n        return wasComposing !== nowComposing || prevContent !== nextContent || prevDecorator !== nextDecorator || nextEditorState.mustForceSelection();\n    };\n    _proto.render = function render() {\n        var _this$props = this.props, blockRenderMap = _this$props.blockRenderMap, blockRendererFn = _this$props.blockRendererFn, blockStyleFn = _this$props.blockStyleFn, customStyleMap = _this$props.customStyleMap, customStyleFn = _this$props.customStyleFn, editorState = _this$props.editorState, editorKey = _this$props.editorKey, textDirectionality = _this$props.textDirectionality;\n        var content = editorState.getCurrentContent();\n        var selection = editorState.getSelection();\n        var forceSelection = editorState.mustForceSelection();\n        var decorator = editorState.getDecorator();\n        var directionMap = nullthrows(editorState.getDirectionMap());\n        var blocksAsArray = content.getBlocksAsArray();\n        var rootBlock = blocksAsArray[0];\n        var processedBlocks = [];\n        var nodeBlock = rootBlock;\n        while(nodeBlock){\n            var blockKey = nodeBlock.getKey();\n            var blockProps = {\n                blockRenderMap: blockRenderMap,\n                blockRendererFn: blockRendererFn,\n                blockStyleFn: blockStyleFn,\n                contentState: content,\n                customStyleFn: customStyleFn,\n                customStyleMap: customStyleMap,\n                decorator: decorator,\n                editorKey: editorKey,\n                editorState: editorState,\n                forceSelection: forceSelection,\n                selection: selection,\n                block: nodeBlock,\n                direction: textDirectionality ? textDirectionality : directionMap.get(blockKey),\n                tree: editorState.getBlockTree(blockKey)\n            };\n            var configForType = blockRenderMap.get(nodeBlock.getType()) || blockRenderMap.get(\"unstyled\");\n            var wrapperTemplate = configForType.wrapper;\n            processedBlocks.push({\n                /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This\n         * comment suppresses an error found when Flow v0.112 was deployed. To\n         * see the error delete this comment and run Flow. */ block: React.createElement(DraftEditorBlockNode, _extends({\n                    key: blockKey\n                }, blockProps)),\n                wrapperTemplate: wrapperTemplate,\n                key: blockKey,\n                offsetKey: DraftOffsetKey.encode(blockKey, 0, 0)\n            });\n            var nextBlockKey = nodeBlock.getNextSiblingKey();\n            nodeBlock = nextBlockKey ? content.getBlockForKey(nextBlockKey) : null;\n        } // Group contiguous runs of blocks that have the same wrapperTemplate\n        var outputBlocks = [];\n        for(var ii = 0; ii < processedBlocks.length;){\n            var info = processedBlocks[ii];\n            if (info.wrapperTemplate) {\n                var blocks = [];\n                do {\n                    blocks.push(processedBlocks[ii].block);\n                    ii++;\n                }while (ii < processedBlocks.length && processedBlocks[ii].wrapperTemplate === info.wrapperTemplate);\n                var wrapperElement = React.cloneElement(info.wrapperTemplate, {\n                    key: info.key + \"-wrap\",\n                    \"data-offset-key\": info.offsetKey\n                }, blocks);\n                outputBlocks.push(wrapperElement);\n            } else {\n                outputBlocks.push(info.block);\n                ii++;\n            }\n        }\n        return React.createElement(\"div\", {\n            \"data-contents\": \"true\"\n        }, outputBlocks);\n    };\n    return DraftEditorContentsExperimental;\n}(React.Component);\nmodule.exports = DraftEditorContentsExperimental;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js":
/*!***********************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar UnicodeBidi = __webpack_require__(/*! fbjs/lib/UnicodeBidi */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidi.js\");\nvar UnicodeBidiDirection = __webpack_require__(/*! fbjs/lib/UnicodeBidiDirection */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidiDirection.js\");\nvar DraftEditorDecoratedLeaves = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorDecoratedLeaves, _React$Component);\n    function DraftEditorDecoratedLeaves() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorDecoratedLeaves.prototype;\n    _proto.render = function render() {\n        var _this$props = this.props, block = _this$props.block, children = _this$props.children, contentState = _this$props.contentState, decorator = _this$props.decorator, decoratorKey = _this$props.decoratorKey, direction = _this$props.direction, leafSet = _this$props.leafSet, text = _this$props.text;\n        var blockKey = block.getKey();\n        var leavesForLeafSet = leafSet.get(\"leaves\");\n        var DecoratorComponent = decorator.getComponentForKey(decoratorKey);\n        var decoratorProps = decorator.getPropsForKey(decoratorKey);\n        var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, parseInt(decoratorKey, 10), 0);\n        var decoratedText = text.slice(leavesForLeafSet.first().get(\"start\"), leavesForLeafSet.last().get(\"end\")); // Resetting dir to the same value on a child node makes Chrome/Firefox\n        // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/\n        var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(UnicodeBidi.getDirection(decoratedText), direction);\n        return React.createElement(DecoratorComponent, _extends({}, decoratorProps, {\n            contentState: contentState,\n            decoratedText: decoratedText,\n            dir: dir,\n            key: decoratorOffsetKey,\n            entityKey: block.getEntityAt(leafSet.get(\"start\")),\n            offsetKey: decoratorOffsetKey\n        }), children);\n    };\n    return DraftEditorDecoratedLeaves;\n}(React.Component);\nmodule.exports = DraftEditorDecoratedLeaves;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzLnJlYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNEO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUMsa0VBQWU7QUFFckMsU0FBU0M7SUFBYUEsV0FBV0YsV0FBVyxTQUFVRyxNQUFNO1FBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztZQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRTtZQUFFLElBQUssSUFBSUksT0FBT0QsT0FBUTtnQkFBRSxJQUFJRSxPQUFPQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTCxRQUFRQyxNQUFNO29CQUFFTCxNQUFNLENBQUNLLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO2dCQUFFO1lBQUU7UUFBRTtRQUFFLE9BQU9MO0lBQVE7SUFBRyxPQUFPRCxTQUFTVyxLQUFLLENBQUMsSUFBSSxFQUFFUjtBQUFZO0FBRXRULFNBQVNTLGVBQWVDLFFBQVEsRUFBRUMsVUFBVTtJQUFJRCxTQUFTTCxTQUFTLEdBQUdELE9BQU9RLE1BQU0sQ0FBQ0QsV0FBV04sU0FBUztJQUFHSyxTQUFTTCxTQUFTLENBQUNRLFdBQVcsR0FBR0g7SUFBVUEsU0FBU0ksU0FBUyxHQUFHSDtBQUFZO0FBRXRMLElBQUlJLGlCQUFpQm5CLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUUvQyxJQUFJb0IsUUFBUXBCLG1CQUFPQSxDQUFDLHdHQUFPO0FBRTNCLElBQUlxQixjQUFjckIsbUJBQU9BLENBQUMsMEVBQXNCO0FBRWhELElBQUlzQix1QkFBdUJ0QixtQkFBT0EsQ0FBQyw0RkFBK0I7QUFFbEUsSUFBSXVCLDZCQUE2QixXQUFXLEdBQUUsU0FBVUMsZ0JBQWdCO0lBQ3RFWCxlQUFlVSw0QkFBNEJDO0lBRTNDLFNBQVNEO1FBQ1AsT0FBT0MsaUJBQWlCWixLQUFLLENBQUMsSUFBSSxFQUFFUixjQUFjLElBQUk7SUFDeEQ7SUFFQSxJQUFJcUIsU0FBU0YsMkJBQTJCZCxTQUFTO0lBRWpEZ0IsT0FBT0MsTUFBTSxHQUFHLFNBQVNBO1FBQ3ZCLElBQUlDLGNBQWMsSUFBSSxDQUFDQyxLQUFLLEVBQ3hCQyxRQUFRRixZQUFZRSxLQUFLLEVBQ3pCQyxXQUFXSCxZQUFZRyxRQUFRLEVBQy9CQyxlQUFlSixZQUFZSSxZQUFZLEVBQ3ZDQyxZQUFZTCxZQUFZSyxTQUFTLEVBQ2pDQyxlQUFlTixZQUFZTSxZQUFZLEVBQ3ZDQyxZQUFZUCxZQUFZTyxTQUFTLEVBQ2pDQyxVQUFVUixZQUFZUSxPQUFPLEVBQzdCQyxPQUFPVCxZQUFZUyxJQUFJO1FBQzNCLElBQUlDLFdBQVdSLE1BQU1TLE1BQU07UUFDM0IsSUFBSUMsbUJBQW1CSixRQUFRSyxHQUFHLENBQUM7UUFDbkMsSUFBSUMscUJBQXFCVCxVQUFVVSxrQkFBa0IsQ0FBQ1Q7UUFDdEQsSUFBSVUsaUJBQWlCWCxVQUFVWSxjQUFjLENBQUNYO1FBQzlDLElBQUlZLHFCQUFxQjFCLGVBQWUyQixNQUFNLENBQUNULFVBQVVVLFNBQVNkLGNBQWMsS0FBSztRQUNyRixJQUFJZSxnQkFBZ0JaLEtBQUthLEtBQUssQ0FBQ1YsaUJBQWlCVyxLQUFLLEdBQUdWLEdBQUcsQ0FBQyxVQUFVRCxpQkFBaUJZLElBQUksR0FBR1gsR0FBRyxDQUFDLFNBQVMsdUVBQXVFO1FBQ2xMLG1FQUFtRTtRQUVuRSxJQUFJWSxNQUFNOUIscUJBQXFCK0IscUJBQXFCLENBQUNoQyxZQUFZaUMsWUFBWSxDQUFDTixnQkFBZ0JkO1FBQzlGLE9BQU9kLE1BQU1tQyxhQUFhLENBQUNkLG9CQUFvQnhDLFNBQVMsQ0FBQyxHQUFHMEMsZ0JBQWdCO1lBQzFFWixjQUFjQTtZQUNkaUIsZUFBZUE7WUFDZkksS0FBS0E7WUFDTDdDLEtBQUtzQztZQUNMVyxXQUFXM0IsTUFBTTRCLFdBQVcsQ0FBQ3RCLFFBQVFLLEdBQUcsQ0FBQztZQUN6Q2tCLFdBQVdiO1FBQ2IsSUFBSWY7SUFDTjtJQUVBLE9BQU9QO0FBQ1QsRUFBRUgsTUFBTXVDLFNBQVM7QUFFakJDLE9BQU9DLE9BQU8sR0FBR3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckRlY29yYXRlZExlYXZlcy5yZWFjdC5qcz8wZmM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICpcbiAqIFRoaXMgaXMgdW5zdGFibGUgYW5kIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgYnlcbiAqIHByb2R1Y3Rpb24gc3lzdGVtcy4gVGhpcyBmaWxlIG1heSBiZSB1cGRhdGUvcmVtb3ZlZCB3aXRob3V0IG5vdGljZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERyYWZ0T2Zmc2V0S2V5ID0gcmVxdWlyZShcIi4vRHJhZnRPZmZzZXRLZXlcIik7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIFVuaWNvZGVCaWRpID0gcmVxdWlyZShcImZianMvbGliL1VuaWNvZGVCaWRpXCIpO1xuXG52YXIgVW5pY29kZUJpZGlEaXJlY3Rpb24gPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZUJpZGlEaXJlY3Rpb25cIik7XG5cbnZhciBEcmFmdEVkaXRvckRlY29yYXRlZExlYXZlcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcmFmdEVkaXRvckRlY29yYXRlZExlYXZlcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJhZnRFZGl0b3JEZWNvcmF0ZWRMZWF2ZXMoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHMuYmxvY2ssXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbnRlbnRTdGF0ZSA9IF90aGlzJHByb3BzLmNvbnRlbnRTdGF0ZSxcbiAgICAgICAgZGVjb3JhdG9yID0gX3RoaXMkcHJvcHMuZGVjb3JhdG9yLFxuICAgICAgICBkZWNvcmF0b3JLZXkgPSBfdGhpcyRwcm9wcy5kZWNvcmF0b3JLZXksXG4gICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgbGVhZlNldCA9IF90aGlzJHByb3BzLmxlYWZTZXQsXG4gICAgICAgIHRleHQgPSBfdGhpcyRwcm9wcy50ZXh0O1xuICAgIHZhciBibG9ja0tleSA9IGJsb2NrLmdldEtleSgpO1xuICAgIHZhciBsZWF2ZXNGb3JMZWFmU2V0ID0gbGVhZlNldC5nZXQoJ2xlYXZlcycpO1xuICAgIHZhciBEZWNvcmF0b3JDb21wb25lbnQgPSBkZWNvcmF0b3IuZ2V0Q29tcG9uZW50Rm9yS2V5KGRlY29yYXRvcktleSk7XG4gICAgdmFyIGRlY29yYXRvclByb3BzID0gZGVjb3JhdG9yLmdldFByb3BzRm9yS2V5KGRlY29yYXRvcktleSk7XG4gICAgdmFyIGRlY29yYXRvck9mZnNldEtleSA9IERyYWZ0T2Zmc2V0S2V5LmVuY29kZShibG9ja0tleSwgcGFyc2VJbnQoZGVjb3JhdG9yS2V5LCAxMCksIDApO1xuICAgIHZhciBkZWNvcmF0ZWRUZXh0ID0gdGV4dC5zbGljZShsZWF2ZXNGb3JMZWFmU2V0LmZpcnN0KCkuZ2V0KCdzdGFydCcpLCBsZWF2ZXNGb3JMZWFmU2V0Lmxhc3QoKS5nZXQoJ2VuZCcpKTsgLy8gUmVzZXR0aW5nIGRpciB0byB0aGUgc2FtZSB2YWx1ZSBvbiBhIGNoaWxkIG5vZGUgbWFrZXMgQ2hyb21lL0ZpcmVmb3hcbiAgICAvLyBjb25mdXNlZCBvbiBjdXJzb3IgbW92ZW1lbnQuIFNlZSBodHRwOi8vanNmaWRkbGUubmV0L2QxNTdrTGNrLzMvXG5cbiAgICB2YXIgZGlyID0gVW5pY29kZUJpZGlEaXJlY3Rpb24uZ2V0SFRNTERpcklmRGlmZmVyZW50KFVuaWNvZGVCaWRpLmdldERpcmVjdGlvbihkZWNvcmF0ZWRUZXh0KSwgZGlyZWN0aW9uKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEZWNvcmF0b3JDb21wb25lbnQsIF9leHRlbmRzKHt9LCBkZWNvcmF0b3JQcm9wcywge1xuICAgICAgY29udGVudFN0YXRlOiBjb250ZW50U3RhdGUsXG4gICAgICBkZWNvcmF0ZWRUZXh0OiBkZWNvcmF0ZWRUZXh0LFxuICAgICAgZGlyOiBkaXIsXG4gICAgICBrZXk6IGRlY29yYXRvck9mZnNldEtleSxcbiAgICAgIGVudGl0eUtleTogYmxvY2suZ2V0RW50aXR5QXQobGVhZlNldC5nZXQoJ3N0YXJ0JykpLFxuICAgICAgb2Zmc2V0S2V5OiBkZWNvcmF0b3JPZmZzZXRLZXlcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBEcmFmdEVkaXRvckRlY29yYXRlZExlYXZlcztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckRlY29yYXRlZExlYXZlczsiXSwibmFtZXMiOlsiX2Fzc2lnbiIsInJlcXVpcmUiLCJfZXh0ZW5kcyIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJEcmFmdE9mZnNldEtleSIsIlJlYWN0IiwiVW5pY29kZUJpZGkiLCJVbmljb2RlQmlkaURpcmVjdGlvbiIsIkRyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzIiwiX1JlYWN0JENvbXBvbmVudCIsIl9wcm90byIsInJlbmRlciIsIl90aGlzJHByb3BzIiwicHJvcHMiLCJibG9jayIsImNoaWxkcmVuIiwiY29udGVudFN0YXRlIiwiZGVjb3JhdG9yIiwiZGVjb3JhdG9yS2V5IiwiZGlyZWN0aW9uIiwibGVhZlNldCIsInRleHQiLCJibG9ja0tleSIsImdldEtleSIsImxlYXZlc0ZvckxlYWZTZXQiLCJnZXQiLCJEZWNvcmF0b3JDb21wb25lbnQiLCJnZXRDb21wb25lbnRGb3JLZXkiLCJkZWNvcmF0b3JQcm9wcyIsImdldFByb3BzRm9yS2V5IiwiZGVjb3JhdG9yT2Zmc2V0S2V5IiwiZW5jb2RlIiwicGFyc2VJbnQiLCJkZWNvcmF0ZWRUZXh0Iiwic2xpY2UiLCJmaXJzdCIsImxhc3QiLCJkaXIiLCJnZXRIVE1MRGlySWZEaWZmZXJlbnQiLCJnZXREaXJlY3Rpb24iLCJjcmVhdGVFbGVtZW50IiwiZW50aXR5S2V5IiwiZ2V0RW50aXR5QXQiLCJvZmZzZXRLZXkiLCJDb21wb25lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorDragHandler.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorDragHandler.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DataTransfer = __webpack_require__(/*! fbjs/lib/DataTransfer */ \"(ssr)/./node_modules/fbjs/lib/DataTransfer.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar getTextContentFromFiles = __webpack_require__(/*! ./getTextContentFromFiles */ \"(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js\");\nvar getUpdatedSelectionState = __webpack_require__(/*! ./getUpdatedSelectionState */ \"(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js\");\nvar getWindowForNode = __webpack_require__(/*! ./getWindowForNode */ \"(ssr)/./node_modules/draft-js/lib/getWindowForNode.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * Get a SelectionState for the supplied mouse event.\n */ function getSelectionForEvent(event, editorState) {\n    var node = null;\n    var offset = null;\n    var eventTargetDocument = getCorrectDocumentFromNode(event.currentTarget);\n    /* $FlowFixMe[prop-missing] (>=0.68.0 site=www,mobile) This comment\n   * suppresses an error found when Flow v0.68 was deployed. To see the error\n   * delete this comment and run Flow. */ if (typeof eventTargetDocument.caretRangeFromPoint === \"function\") {\n        /* $FlowFixMe[incompatible-use] (>=0.68.0 site=www,mobile) This comment\n     * suppresses an error found when Flow v0.68 was deployed. To see the error\n     * delete this comment and run Flow. */ var dropRange = eventTargetDocument.caretRangeFromPoint(event.x, event.y);\n        node = dropRange.startContainer;\n        offset = dropRange.startOffset;\n    } else if (event.rangeParent) {\n        node = event.rangeParent;\n        offset = event.rangeOffset;\n    } else {\n        return null;\n    }\n    node = nullthrows(node);\n    offset = nullthrows(offset);\n    var offsetKey = nullthrows(findAncestorOffsetKey(node));\n    return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);\n}\nvar DraftEditorDragHandler = {\n    /**\n   * Drag originating from input terminated.\n   */ onDragEnd: function onDragEnd(editor) {\n        editor.exitCurrentMode();\n        endDrag(editor);\n    },\n    /**\n   * Handle data being dropped.\n   */ onDrop: function onDrop(editor, e) {\n        var data = new DataTransfer(e.nativeEvent.dataTransfer);\n        var editorState = editor._latestEditorState;\n        var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);\n        e.preventDefault();\n        editor._dragCount = 0;\n        editor.exitCurrentMode();\n        if (dropSelection == null) {\n            return;\n        }\n        var files = data.getFiles();\n        if (files.length > 0) {\n            if (editor.props.handleDroppedFiles && isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))) {\n                return;\n            }\n            /* $FlowFixMe[incompatible-call] This comment suppresses an error found\n       * DataTransfer was typed. getFiles() returns an array of <Files extends\n       * Blob>, not Blob */ getTextContentFromFiles(files, function(fileText) {\n                fileText && editor.update(insertTextAtSelection(editorState, dropSelection, fileText));\n            });\n            return;\n        }\n        var dragType = editor._internalDrag ? \"internal\" : \"external\";\n        if (editor.props.handleDrop && isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))) {} else if (editor._internalDrag) {\n            editor.update(moveText(editorState, dropSelection));\n        } else {\n            editor.update(insertTextAtSelection(editorState, dropSelection, data.getText()));\n        }\n        endDrag(editor);\n    }\n};\nfunction endDrag(editor) {\n    editor._internalDrag = false; // Fix issue #1383\n    // Prior to React v16.5.0 onDrop breaks onSelect event:\n    // https://github.com/facebook/react/issues/11379.\n    // Dispatching a mouseup event on DOM node will make it go back to normal.\n    var editorNode = editor.editorContainer;\n    if (editorNode) {\n        var mouseUpEvent = new MouseEvent(\"mouseup\", {\n            view: getWindowForNode(editorNode),\n            bubbles: true,\n            cancelable: true\n        });\n        editorNode.dispatchEvent(mouseUpEvent);\n    }\n}\nfunction moveText(editorState, targetSelection) {\n    var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);\n    return EditorState.push(editorState, newContentState, \"insert-fragment\");\n}\n/**\n * Insert text at a specified selection.\n */ function insertTextAtSelection(editorState, selection, text) {\n    var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());\n    return EditorState.push(editorState, newContentState, \"insert-fragment\");\n}\nmodule.exports = DraftEditorDragHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorDragHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorEditHandler.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorEditHandler.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar onBeforeInput = __webpack_require__(/*! ./editOnBeforeInput */ \"(ssr)/./node_modules/draft-js/lib/editOnBeforeInput.js\");\nvar onBlur = __webpack_require__(/*! ./editOnBlur */ \"(ssr)/./node_modules/draft-js/lib/editOnBlur.js\");\nvar onCompositionStart = __webpack_require__(/*! ./editOnCompositionStart */ \"(ssr)/./node_modules/draft-js/lib/editOnCompositionStart.js\");\nvar onCopy = __webpack_require__(/*! ./editOnCopy */ \"(ssr)/./node_modules/draft-js/lib/editOnCopy.js\");\nvar onCut = __webpack_require__(/*! ./editOnCut */ \"(ssr)/./node_modules/draft-js/lib/editOnCut.js\");\nvar onDragOver = __webpack_require__(/*! ./editOnDragOver */ \"(ssr)/./node_modules/draft-js/lib/editOnDragOver.js\");\nvar onDragStart = __webpack_require__(/*! ./editOnDragStart */ \"(ssr)/./node_modules/draft-js/lib/editOnDragStart.js\");\nvar onFocus = __webpack_require__(/*! ./editOnFocus */ \"(ssr)/./node_modules/draft-js/lib/editOnFocus.js\");\nvar onInput = __webpack_require__(/*! ./editOnInput */ \"(ssr)/./node_modules/draft-js/lib/editOnInput.js\");\nvar onKeyDown = __webpack_require__(/*! ./editOnKeyDown */ \"(ssr)/./node_modules/draft-js/lib/editOnKeyDown.js\");\nvar onPaste = __webpack_require__(/*! ./editOnPaste */ \"(ssr)/./node_modules/draft-js/lib/editOnPaste.js\");\nvar onSelect = __webpack_require__(/*! ./editOnSelect */ \"(ssr)/./node_modules/draft-js/lib/editOnSelect.js\");\nvar isChrome = UserAgent.isBrowser(\"Chrome\");\nvar isFirefox = UserAgent.isBrowser(\"Firefox\");\nvar selectionHandler = isChrome || isFirefox ? onSelect : function(e) {};\nvar DraftEditorEditHandler = {\n    onBeforeInput: onBeforeInput,\n    onBlur: onBlur,\n    onCompositionStart: onCompositionStart,\n    onCopy: onCopy,\n    onCut: onCut,\n    onDragOver: onDragOver,\n    onDragStart: onDragStart,\n    onFocus: onFocus,\n    onInput: onInput,\n    onKeyDown: onKeyDown,\n    onPaste: onPaste,\n    onSelect: onSelect,\n    // In certain cases, contenteditable on chrome does not fire the onSelect\n    // event, causing problems with cursor positioning. Therefore, the selection\n    // state update handler is added to more events to ensure that the selection\n    // state is always synced with the actual cursor positions.\n    onMouseUp: selectionHandler,\n    onKeyUp: selectionHandler\n};\nmodule.exports = DraftEditorEditHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRWRpdEhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxzRUFBb0I7QUFFNUMsSUFBSUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFakQsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUMscUVBQWM7QUFFbkMsSUFBSUcscUJBQXFCSCxtQkFBT0EsQ0FBQyw2RkFBMEI7QUFFM0QsSUFBSUksU0FBU0osbUJBQU9BLENBQUMscUVBQWM7QUFFbkMsSUFBSUssUUFBUUwsbUJBQU9BLENBQUMsbUVBQWE7QUFFakMsSUFBSU0sYUFBYU4sbUJBQU9BLENBQUMsNkVBQWtCO0FBRTNDLElBQUlPLGNBQWNQLG1CQUFPQSxDQUFDLCtFQUFtQjtBQUU3QyxJQUFJUSxVQUFVUixtQkFBT0EsQ0FBQyx1RUFBZTtBQUVyQyxJQUFJUyxVQUFVVCxtQkFBT0EsQ0FBQyx1RUFBZTtBQUVyQyxJQUFJVSxZQUFZVixtQkFBT0EsQ0FBQywyRUFBaUI7QUFFekMsSUFBSVcsVUFBVVgsbUJBQU9BLENBQUMsdUVBQWU7QUFFckMsSUFBSVksV0FBV1osbUJBQU9BLENBQUMseUVBQWdCO0FBRXZDLElBQUlhLFdBQVdkLFVBQVVlLFNBQVMsQ0FBQztBQUNuQyxJQUFJQyxZQUFZaEIsVUFBVWUsU0FBUyxDQUFDO0FBQ3BDLElBQUlFLG1CQUFtQkgsWUFBWUUsWUFBWUgsV0FBVyxTQUFVSyxDQUFDLEdBQUc7QUFDeEUsSUFBSUMseUJBQXlCO0lBQzNCakIsZUFBZUE7SUFDZkMsUUFBUUE7SUFDUkMsb0JBQW9CQTtJQUNwQkMsUUFBUUE7SUFDUkMsT0FBT0E7SUFDUEMsWUFBWUE7SUFDWkMsYUFBYUE7SUFDYkMsU0FBU0E7SUFDVEMsU0FBU0E7SUFDVEMsV0FBV0E7SUFDWEMsU0FBU0E7SUFDVEMsVUFBVUE7SUFDVix5RUFBeUU7SUFDekUsNEVBQTRFO0lBQzVFLDRFQUE0RTtJQUM1RSwyREFBMkQ7SUFDM0RPLFdBQVdIO0lBQ1hJLFNBQVNKO0FBQ1g7QUFDQUssT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFZGl0b3JFZGl0SGFuZGxlci5qcz81YjhjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvVXNlckFnZW50XCIpO1xuXG52YXIgb25CZWZvcmVJbnB1dCA9IHJlcXVpcmUoXCIuL2VkaXRPbkJlZm9yZUlucHV0XCIpO1xuXG52YXIgb25CbHVyID0gcmVxdWlyZShcIi4vZWRpdE9uQmx1clwiKTtcblxudmFyIG9uQ29tcG9zaXRpb25TdGFydCA9IHJlcXVpcmUoXCIuL2VkaXRPbkNvbXBvc2l0aW9uU3RhcnRcIik7XG5cbnZhciBvbkNvcHkgPSByZXF1aXJlKFwiLi9lZGl0T25Db3B5XCIpO1xuXG52YXIgb25DdXQgPSByZXF1aXJlKFwiLi9lZGl0T25DdXRcIik7XG5cbnZhciBvbkRyYWdPdmVyID0gcmVxdWlyZShcIi4vZWRpdE9uRHJhZ092ZXJcIik7XG5cbnZhciBvbkRyYWdTdGFydCA9IHJlcXVpcmUoXCIuL2VkaXRPbkRyYWdTdGFydFwiKTtcblxudmFyIG9uRm9jdXMgPSByZXF1aXJlKFwiLi9lZGl0T25Gb2N1c1wiKTtcblxudmFyIG9uSW5wdXQgPSByZXF1aXJlKFwiLi9lZGl0T25JbnB1dFwiKTtcblxudmFyIG9uS2V5RG93biA9IHJlcXVpcmUoXCIuL2VkaXRPbktleURvd25cIik7XG5cbnZhciBvblBhc3RlID0gcmVxdWlyZShcIi4vZWRpdE9uUGFzdGVcIik7XG5cbnZhciBvblNlbGVjdCA9IHJlcXVpcmUoXCIuL2VkaXRPblNlbGVjdFwiKTtcblxudmFyIGlzQ2hyb21lID0gVXNlckFnZW50LmlzQnJvd3NlcignQ2hyb21lJyk7XG52YXIgaXNGaXJlZm94ID0gVXNlckFnZW50LmlzQnJvd3NlcignRmlyZWZveCcpO1xudmFyIHNlbGVjdGlvbkhhbmRsZXIgPSBpc0Nocm9tZSB8fCBpc0ZpcmVmb3ggPyBvblNlbGVjdCA6IGZ1bmN0aW9uIChlKSB7fTtcbnZhciBEcmFmdEVkaXRvckVkaXRIYW5kbGVyID0ge1xuICBvbkJlZm9yZUlucHV0OiBvbkJlZm9yZUlucHV0LFxuICBvbkJsdXI6IG9uQmx1cixcbiAgb25Db21wb3NpdGlvblN0YXJ0OiBvbkNvbXBvc2l0aW9uU3RhcnQsXG4gIG9uQ29weTogb25Db3B5LFxuICBvbkN1dDogb25DdXQsXG4gIG9uRHJhZ092ZXI6IG9uRHJhZ092ZXIsXG4gIG9uRHJhZ1N0YXJ0OiBvbkRyYWdTdGFydCxcbiAgb25Gb2N1czogb25Gb2N1cyxcbiAgb25JbnB1dDogb25JbnB1dCxcbiAgb25LZXlEb3duOiBvbktleURvd24sXG4gIG9uUGFzdGU6IG9uUGFzdGUsXG4gIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgLy8gSW4gY2VydGFpbiBjYXNlcywgY29udGVudGVkaXRhYmxlIG9uIGNocm9tZSBkb2VzIG5vdCBmaXJlIHRoZSBvblNlbGVjdFxuICAvLyBldmVudCwgY2F1c2luZyBwcm9ibGVtcyB3aXRoIGN1cnNvciBwb3NpdGlvbmluZy4gVGhlcmVmb3JlLCB0aGUgc2VsZWN0aW9uXG4gIC8vIHN0YXRlIHVwZGF0ZSBoYW5kbGVyIGlzIGFkZGVkIHRvIG1vcmUgZXZlbnRzIHRvIGVuc3VyZSB0aGF0IHRoZSBzZWxlY3Rpb25cbiAgLy8gc3RhdGUgaXMgYWx3YXlzIHN5bmNlZCB3aXRoIHRoZSBhY3R1YWwgY3Vyc29yIHBvc2l0aW9ucy5cbiAgb25Nb3VzZVVwOiBzZWxlY3Rpb25IYW5kbGVyLFxuICBvbktleVVwOiBzZWxlY3Rpb25IYW5kbGVyXG59O1xubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckVkaXRIYW5kbGVyOyJdLCJuYW1lcyI6WyJVc2VyQWdlbnQiLCJyZXF1aXJlIiwib25CZWZvcmVJbnB1dCIsIm9uQmx1ciIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29weSIsIm9uQ3V0Iiwib25EcmFnT3ZlciIsIm9uRHJhZ1N0YXJ0Iiwib25Gb2N1cyIsIm9uSW5wdXQiLCJvbktleURvd24iLCJvblBhc3RlIiwib25TZWxlY3QiLCJpc0Nocm9tZSIsImlzQnJvd3NlciIsImlzRmlyZWZveCIsInNlbGVjdGlvbkhhbmRsZXIiLCJlIiwiRHJhZnRFZGl0b3JFZGl0SGFuZGxlciIsIm9uTW91c2VVcCIsIm9uS2V5VXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorEditHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorFlushControlled.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorFlushControlled.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var ReactDOMComet = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar flushControlled = ReactDOMComet.unstable_flushControlled;\nmodule.exports = flushControlled;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRmx1c2hDb250cm9sbGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7Ozs7Ozs7OztDQVNDLEdBQ0QsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxnSEFBVztBQUV2QyxJQUFJQyxrQkFBa0JGLGNBQWNHLHdCQUF3QjtBQUM1REMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFZGl0b3JGbHVzaENvbnRyb2xsZWQuanM/NzBjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbnZhciBSZWFjdERPTUNvbWV0ID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIGZsdXNoQ29udHJvbGxlZCA9IFJlYWN0RE9NQ29tZXQudW5zdGFibGVfZmx1c2hDb250cm9sbGVkO1xubW9kdWxlLmV4cG9ydHMgPSBmbHVzaENvbnRyb2xsZWQ7Il0sIm5hbWVzIjpbIlJlYWN0RE9NQ29tZXQiLCJyZXF1aXJlIiwiZmx1c2hDb250cm9sbGVkIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorFlushControlled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorLeaf.react.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DraftEditorTextNode = __webpack_require__(/*! ./DraftEditorTextNode.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorTextNode.react.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLBRElement = __webpack_require__(/*! ./isHTMLBRElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js\");\nvar setDraftEditorSelection = (__webpack_require__(/*! ./setDraftEditorSelection */ \"(ssr)/./node_modules/draft-js/lib/setDraftEditorSelection.js\").setDraftEditorSelection);\n/**\n * All leaf nodes in the editor are spans with single text nodes. Leaf\n * elements are styled based on the merging of an optional custom style map\n * and a default style map.\n *\n * `DraftEditorLeaf` also provides a wrapper for calling into the imperative\n * DOM Selection API. In this way, top-level components can declaratively\n * maintain the selection state.\n */ var DraftEditorLeaf = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorLeaf, _React$Component);\n    function DraftEditorLeaf() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _defineProperty(_assertThisInitialized(_this), \"leaf\", void 0);\n        return _this;\n    }\n    var _proto = DraftEditorLeaf.prototype;\n    _proto._setSelection = function _setSelection() {\n        var selection = this.props.selection; // If selection state is irrelevant to the parent block, no-op.\n        if (selection == null || !selection.getHasFocus()) {\n            return;\n        }\n        var _this$props = this.props, block = _this$props.block, start = _this$props.start, text = _this$props.text;\n        var blockKey = block.getKey();\n        var end = start + text.length;\n        if (!selection.hasEdgeWithin(blockKey, start, end)) {\n            return;\n        } // Determine the appropriate target node for selection. If the child\n        // is not a text node, it is a <br /> spacer. In this case, use the\n        // <span> itself as the selection target.\n        var node = this.leaf;\n        !node ?  true ? invariant(false, \"Missing node\") : 0 : void 0;\n        var child = node.firstChild;\n        !child ?  true ? invariant(false, \"Missing child\") : 0 : void 0;\n        var targetNode;\n        if (child.nodeType === Node.TEXT_NODE) {\n            targetNode = child;\n        } else if (isHTMLBRElement(child)) {\n            targetNode = node;\n        } else {\n            targetNode = child.firstChild;\n            !targetNode ?  true ? invariant(false, \"Missing targetNode\") : 0 : void 0;\n        }\n        setDraftEditorSelection(selection, targetNode, blockKey, start, end);\n    };\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var leafNode = this.leaf;\n        !leafNode ?  true ? invariant(false, \"Missing leafNode\") : 0 : void 0;\n        var shouldUpdate = leafNode.textContent !== nextProps.text || nextProps.styleSet !== this.props.styleSet || nextProps.forceSelection;\n        return shouldUpdate;\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        this._setSelection();\n    };\n    _proto.componentDidMount = function componentDidMount() {\n        this._setSelection();\n    };\n    _proto.render = function render() {\n        var _this2 = this;\n        var block = this.props.block;\n        var text = this.props.text; // If the leaf is at the end of its block and ends in a soft newline, append\n        // an extra line feed character. Browsers collapse trailing newline\n        // characters, which leaves the cursor in the wrong place after a\n        // shift+enter. The extra character repairs this.\n        if (text.endsWith(\"\\n\") && this.props.isLast) {\n            text += \"\\n\";\n        }\n        var _this$props2 = this.props, customStyleMap = _this$props2.customStyleMap, customStyleFn = _this$props2.customStyleFn, offsetKey = _this$props2.offsetKey, styleSet = _this$props2.styleSet;\n        var styleObj = styleSet.reduce(function(map, styleName) {\n            var mergedStyles = {};\n            var style = customStyleMap[styleName];\n            if (style !== undefined && map.textDecoration !== style.textDecoration) {\n                // .trim() is necessary for IE9/10/11 and Edge\n                mergedStyles.textDecoration = [\n                    map.textDecoration,\n                    style.textDecoration\n                ].join(\" \").trim();\n            }\n            return _assign(map, style, mergedStyles);\n        }, {});\n        if (customStyleFn) {\n            var newStyles = customStyleFn(styleSet, block);\n            styleObj = _assign(styleObj, newStyles);\n        }\n        return React.createElement(\"span\", {\n            \"data-offset-key\": offsetKey,\n            ref: function ref(_ref) {\n                return _this2.leaf = _ref;\n            },\n            style: styleObj\n        }, React.createElement(DraftEditorTextNode, null, text));\n    };\n    return DraftEditorLeaf;\n}(React.Component);\nmodule.exports = DraftEditorLeaf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorNode.react.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorNode.react.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftEditorDecoratedLeaves = __webpack_require__(/*! ./DraftEditorDecoratedLeaves.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js\");\nvar DraftEditorLeaf = __webpack_require__(/*! ./DraftEditorLeaf.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar List = Immutable.List;\nvar DraftEditorNode = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorNode, _React$Component);\n    function DraftEditorNode() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorNode.prototype;\n    _proto.render = function render() {\n        var _this$props = this.props, block = _this$props.block, contentState = _this$props.contentState, customStyleFn = _this$props.customStyleFn, customStyleMap = _this$props.customStyleMap, decorator = _this$props.decorator, direction = _this$props.direction, forceSelection = _this$props.forceSelection, hasSelection = _this$props.hasSelection, selection = _this$props.selection, tree = _this$props.tree;\n        var blockKey = block.getKey();\n        var text = block.getText();\n        var lastLeafSet = tree.size - 1;\n        var children = this.props.children || tree.map(function(leafSet, ii) {\n            var decoratorKey = leafSet.get(\"decoratorKey\");\n            var leavesForLeafSet = leafSet.get(\"leaves\");\n            var lastLeaf = leavesForLeafSet.size - 1;\n            var Leaves = leavesForLeafSet.map(function(leaf, jj) {\n                var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);\n                var start = leaf.get(\"start\");\n                var end = leaf.get(\"end\");\n                return React.createElement(DraftEditorLeaf, {\n                    key: offsetKey,\n                    offsetKey: offsetKey,\n                    block: block,\n                    start: start,\n                    selection: hasSelection ? selection : null,\n                    forceSelection: forceSelection,\n                    text: text.slice(start, end),\n                    styleSet: block.getInlineStyleAt(start),\n                    customStyleMap: customStyleMap,\n                    customStyleFn: customStyleFn,\n                    isLast: decoratorKey === lastLeafSet && jj === lastLeaf\n                });\n            }).toArray();\n            if (!decoratorKey || !decorator) {\n                return Leaves;\n            }\n            return React.createElement(DraftEditorDecoratedLeaves, {\n                block: block,\n                children: Leaves,\n                contentState: contentState,\n                decorator: decorator,\n                decoratorKey: decoratorKey,\n                direction: direction,\n                leafSet: leafSet,\n                text: text,\n                key: ii\n            });\n        }).toArray();\n        return React.createElement(\"div\", {\n            \"data-offset-key\": DraftOffsetKey.encode(blockKey, 0, 0),\n            className: cx({\n                \"public/DraftStyleDefault/block\": true,\n                \"public/DraftStyleDefault/ltr\": direction === \"LTR\",\n                \"public/DraftStyleDefault/rtl\": direction === \"RTL\"\n            })\n        }, children);\n    };\n    return DraftEditorNode;\n}(React.Component);\nmodule.exports = DraftEditorNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorNode.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js":
/*!*******************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\n/**\n * This component is responsible for rendering placeholder text for the\n * `DraftEditor` component.\n *\n * Override placeholder style via CSS.\n */ var DraftEditorPlaceholder = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorPlaceholder, _React$Component);\n    function DraftEditorPlaceholder() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorPlaceholder.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        return this.props.text !== nextProps.text || this.props.editorState.getSelection().getHasFocus() !== nextProps.editorState.getSelection().getHasFocus();\n    };\n    _proto.render = function render() {\n        var hasFocus = this.props.editorState.getSelection().getHasFocus();\n        var className = cx({\n            \"public/DraftEditorPlaceholder/root\": true,\n            \"public/DraftEditorPlaceholder/hasFocus\": hasFocus\n        });\n        var contentStyle = {\n            whiteSpace: \"pre-wrap\"\n        };\n        return React.createElement(\"div\", {\n            className: className\n        }, React.createElement(\"div\", {\n            className: cx(\"public/DraftEditorPlaceholder/inner\"),\n            id: this.props.accessibilityID,\n            style: contentStyle\n        }, this.props.text));\n    };\n    return DraftEditorPlaceholder;\n}(React.Component);\nmodule.exports = DraftEditorPlaceholder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucmVhY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSxlQUFlQyxRQUFRLEVBQUVDLFVBQVU7SUFBSUQsU0FBU0UsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNILFdBQVdDLFNBQVM7SUFBR0YsU0FBU0UsU0FBUyxDQUFDRyxXQUFXLEdBQUdMO0lBQVVBLFNBQVNNLFNBQVMsR0FBR0w7QUFBWTtBQUV0TCxJQUFJTSxRQUFRQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUUzQixJQUFJQyxLQUFLRCxtQkFBT0EsQ0FBQyx3REFBYTtBQUU5Qjs7Ozs7Q0FLQyxHQUNELElBQUlFLHlCQUF5QixXQUFXLEdBQUUsU0FBVUMsZ0JBQWdCO0lBQ2xFWixlQUFlVyx3QkFBd0JDO0lBRXZDLFNBQVNEO1FBQ1AsT0FBT0MsaUJBQWlCQyxLQUFLLENBQUMsSUFBSSxFQUFFQyxjQUFjLElBQUk7SUFDeEQ7SUFFQSxJQUFJQyxTQUFTSix1QkFBdUJSLFNBQVM7SUFFN0NZLE9BQU9DLHFCQUFxQixHQUFHLFNBQVNBLHNCQUFzQkMsU0FBUztRQUNyRSxPQUFPLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLEtBQUtGLFVBQVVFLElBQUksSUFBSSxJQUFJLENBQUNELEtBQUssQ0FBQ0UsV0FBVyxDQUFDQyxZQUFZLEdBQUdDLFdBQVcsT0FBT0wsVUFBVUcsV0FBVyxDQUFDQyxZQUFZLEdBQUdDLFdBQVc7SUFDdko7SUFFQVAsT0FBT1EsTUFBTSxHQUFHLFNBQVNBO1FBQ3ZCLElBQUlDLFdBQVcsSUFBSSxDQUFDTixLQUFLLENBQUNFLFdBQVcsQ0FBQ0MsWUFBWSxHQUFHQyxXQUFXO1FBQ2hFLElBQUlHLFlBQVlmLEdBQUc7WUFDakIsc0NBQXNDO1lBQ3RDLDBDQUEwQ2M7UUFDNUM7UUFDQSxJQUFJRSxlQUFlO1lBQ2pCQyxZQUFZO1FBQ2Q7UUFDQSxPQUFPbkIsTUFBTW9CLGFBQWEsQ0FBQyxPQUFPO1lBQ2hDSCxXQUFXQTtRQUNiLEdBQUdqQixNQUFNb0IsYUFBYSxDQUFDLE9BQU87WUFDNUJILFdBQVdmLEdBQUc7WUFDZG1CLElBQUksSUFBSSxDQUFDWCxLQUFLLENBQUNZLGVBQWU7WUFDOUJDLE9BQU9MO1FBQ1QsR0FBRyxJQUFJLENBQUNSLEtBQUssQ0FBQ0MsSUFBSTtJQUNwQjtJQUVBLE9BQU9SO0FBQ1QsRUFBRUgsTUFBTXdCLFNBQVM7QUFFakJDLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvclBsYWNlaG9sZGVyLnJlYWN0LmpzPzZkNDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIGN4ID0gcmVxdWlyZShcImZianMvbGliL2N4XCIpO1xuXG4vKipcbiAqIFRoaXMgY29tcG9uZW50IGlzIHJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgcGxhY2Vob2xkZXIgdGV4dCBmb3IgdGhlXG4gKiBgRHJhZnRFZGl0b3JgIGNvbXBvbmVudC5cbiAqXG4gKiBPdmVycmlkZSBwbGFjZWhvbGRlciBzdHlsZSB2aWEgQ1NTLlxuICovXG52YXIgRHJhZnRFZGl0b3JQbGFjZWhvbGRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcmFmdEVkaXRvclBsYWNlaG9sZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFmdEVkaXRvclBsYWNlaG9sZGVyKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEcmFmdEVkaXRvclBsYWNlaG9sZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRleHQgIT09IG5leHRQcm9wcy50ZXh0IHx8IHRoaXMucHJvcHMuZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKSAhPT0gbmV4dFByb3BzLmVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgaGFzRm9jdXMgPSB0aGlzLnByb3BzLmVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGN4KHtcbiAgICAgICdwdWJsaWMvRHJhZnRFZGl0b3JQbGFjZWhvbGRlci9yb290JzogdHJ1ZSxcbiAgICAgICdwdWJsaWMvRHJhZnRFZGl0b3JQbGFjZWhvbGRlci9oYXNGb2N1cyc6IGhhc0ZvY3VzXG4gICAgfSk7XG4gICAgdmFyIGNvbnRlbnRTdHlsZSA9IHtcbiAgICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCdcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGN4KCdwdWJsaWMvRHJhZnRFZGl0b3JQbGFjZWhvbGRlci9pbm5lcicpLFxuICAgICAgaWQ6IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUlELFxuICAgICAgc3R5bGU6IGNvbnRlbnRTdHlsZVxuICAgIH0sIHRoaXMucHJvcHMudGV4dCkpO1xuICB9O1xuXG4gIHJldHVybiBEcmFmdEVkaXRvclBsYWNlaG9sZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yUGxhY2Vob2xkZXI7Il0sIm5hbWVzIjpbIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJSZWFjdCIsInJlcXVpcmUiLCJjeCIsIkRyYWZ0RWRpdG9yUGxhY2Vob2xkZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfcHJvdG8iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0UHJvcHMiLCJwcm9wcyIsInRleHQiLCJlZGl0b3JTdGF0ZSIsImdldFNlbGVjdGlvbiIsImdldEhhc0ZvY3VzIiwicmVuZGVyIiwiaGFzRm9jdXMiLCJjbGFzc05hbWUiLCJjb250ZW50U3R5bGUiLCJ3aGl0ZVNwYWNlIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYWNjZXNzaWJpbGl0eUlEIiwic3R5bGUiLCJDb21wb25lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorTextNode.react.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorTextNode.react.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\"); // In IE, spans with <br> tags render as two newlines. By rendering a span\n// with only a newline character, we can be sure to render a single line.\nvar useNewlineChar = UserAgent.isBrowser(\"IE <= 11\");\n/**\n * Check whether the node should be considered a newline.\n */ function isNewline(node) {\n    return useNewlineChar ? node.textContent === \"\\n\" : node.tagName === \"BR\";\n}\n/**\n * Placeholder elements for empty text content.\n *\n * What is this `data-text` attribute, anyway? It turns out that we need to\n * put an attribute on the lowest-level text node in order to preserve correct\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\n * If the <span> has an attribute, this appears not to happen.\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\n */ var NEWLINE_A = function NEWLINE_A(ref) {\n    return useNewlineChar ? React.createElement(\"span\", {\n        key: \"A\",\n        \"data-text\": \"true\",\n        ref: ref\n    }, \"\\n\") : React.createElement(\"br\", {\n        key: \"A\",\n        \"data-text\": \"true\",\n        ref: ref\n    });\n};\nvar NEWLINE_B = function NEWLINE_B(ref) {\n    return useNewlineChar ? React.createElement(\"span\", {\n        key: \"B\",\n        \"data-text\": \"true\",\n        ref: ref\n    }, \"\\n\") : React.createElement(\"br\", {\n        key: \"B\",\n        \"data-text\": \"true\",\n        ref: ref\n    });\n};\n/**\n * The lowest-level component in a `DraftEditor`, the text node component\n * replaces the default React text node implementation. This allows us to\n * perform custom handling of newline behavior and avoid re-rendering text\n * nodes with DOM state that already matches the expectations of our immutable\n * editor state.\n */ var DraftEditorTextNode = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorTextNode, _React$Component);\n    function DraftEditorTextNode(props) {\n        var _this;\n        _this = _React$Component.call(this, props) || this; // By flipping this flag, we also keep flipping keys which forces\n        // React to remount this node every time it rerenders.\n        _defineProperty(_assertThisInitialized(_this), \"_forceFlag\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_node\", void 0);\n        _this._forceFlag = false;\n        return _this;\n    }\n    var _proto = DraftEditorTextNode.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var node = this._node;\n        var shouldBeNewline = nextProps.children === \"\";\n        !isElement(node) ?  true ? invariant(false, \"node is not an Element\") : 0 : void 0;\n        var elementNode = node;\n        if (shouldBeNewline) {\n            return !isNewline(elementNode);\n        }\n        return elementNode.textContent !== nextProps.children;\n    };\n    _proto.componentDidMount = function componentDidMount() {\n        this._forceFlag = !this._forceFlag;\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        this._forceFlag = !this._forceFlag;\n    };\n    _proto.render = function render() {\n        var _this2 = this;\n        if (this.props.children === \"\") {\n            return this._forceFlag ? NEWLINE_A(function(ref) {\n                return _this2._node = ref;\n            }) : NEWLINE_B(function(ref) {\n                return _this2._node = ref;\n            });\n        }\n        return React.createElement(\"span\", {\n            key: this._forceFlag ? \"A\" : \"B\",\n            \"data-text\": \"true\",\n            ref: function ref(_ref) {\n                return _this2._node = _ref;\n            }\n        }, this.props.children);\n    };\n    return DraftEditorTextNode;\n}(React.Component);\nmodule.exports = DraftEditorTextNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorTextNode.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEffects.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEffects.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ \nmodule.exports = {\n    initODS: function initODS() {},\n    handleExtensionCausedError: function handleExtensionCausedError() {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWZmZWN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FDRDtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsU0FBUyxTQUFTQSxXQUFXO0lBQzdCQyw0QkFBNEIsU0FBU0EsOEJBQThCO0FBQ3JFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVmZmVjdHMuanM/MmM2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5pdE9EUzogZnVuY3Rpb24gaW5pdE9EUygpIHt9LFxuICBoYW5kbGVFeHRlbnNpb25DYXVzZWRFcnJvcjogZnVuY3Rpb24gaGFuZGxlRXh0ZW5zaW9uQ2F1c2VkRXJyb3IoKSB7fVxufTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImluaXRPRFMiLCJoYW5kbGVFeHRlbnNpb25DYXVzZWRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEffects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEntity.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEntity.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var DraftEntityInstance = __webpack_require__(/*! ./DraftEntityInstance */ \"(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar uuid = __webpack_require__(/*! ./uuid */ \"(ssr)/./node_modules/draft-js/lib/uuid.js\");\nvar Map = Immutable.Map;\nvar instances = Map();\nvar instanceKey = uuid();\n/**\n * Temporary utility for generating the warnings\n */ function logWarning(oldMethodCall, newMethodCall) {\n    console.warn(\"WARNING: \" + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */ var DraftEntity = {\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */ getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n        logWarning(\"DraftEntity.getLastCreatedEntityKey\", \"contentState.getLastCreatedEntityKey\");\n        return DraftEntity.__getLastCreatedEntityKey();\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */ create: function create(type, mutability, data) {\n        logWarning(\"DraftEntity.create\", \"contentState.createEntity\");\n        return DraftEntity.__create(type, mutability, data);\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */ add: function add(instance) {\n        logWarning(\"DraftEntity.add\", \"contentState.addEntity\");\n        return DraftEntity.__add(instance);\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */ get: function get(key) {\n        logWarning(\"DraftEntity.get\", \"contentState.getEntity\");\n        return DraftEntity.__get(key);\n    },\n    /**\n   * Get all the entities in the content state.\n   */ __getAll: function __getAll() {\n        return instances;\n    },\n    /**\n   * Load the entity map with the given set of entities.\n   */ __loadWithEntities: function __loadWithEntities(entities) {\n        instances = entities;\n        instanceKey = uuid();\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */ mergeData: function mergeData(key, toMerge) {\n        logWarning(\"DraftEntity.mergeData\", \"contentState.mergeEntityData\");\n        return DraftEntity.__mergeData(key, toMerge);\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */ replaceData: function replaceData(key, newData) {\n        logWarning(\"DraftEntity.replaceData\", \"contentState.replaceEntityData\");\n        return DraftEntity.__replaceData(key, newData);\n    },\n    // ***********************************WARNING******************************\n    // --- the above public API will be deprecated in the next version of Draft!\n    // The methods below this line are private - don't call them directly.\n    /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */ __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n        return instanceKey;\n    },\n    /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */ __create: function __create(type, mutability, data) {\n        return DraftEntity.__add(new DraftEntityInstance({\n            type: type,\n            mutability: mutability,\n            data: data || {}\n        }));\n    },\n    /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */ __add: function __add(instance) {\n        instanceKey = uuid();\n        instances = instances.set(instanceKey, instance);\n        return instanceKey;\n    },\n    /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */ __get: function __get(key) {\n        var instance = instances.get(key);\n        !!!instance ?  true ? invariant(false, \"Unknown DraftEntity key: %s.\", key) : 0 : void 0;\n        return instance;\n    },\n    /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */ __mergeData: function __mergeData(key, toMerge) {\n        var instance = DraftEntity.__get(key);\n        var newData = _objectSpread({}, instance.getData(), toMerge);\n        var newInstance = instance.set(\"data\", newData);\n        instances = instances.set(key, newInstance);\n        return newInstance;\n    },\n    /**\n   * Completely replace the data for a given instance.\n   */ __replaceData: function __replaceData(key, newData) {\n        var instance = DraftEntity.__get(key);\n        var newInstance = instance.set(\"data\", newData);\n        instances = instances.set(key, newInstance);\n        return newInstance;\n    }\n};\nmodule.exports = DraftEntity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEntity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEntityInstance.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @legacyServerCallableInstance\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar Record = Immutable.Record;\nvar DraftEntityInstanceRecord = Record({\n    type: \"TOKEN\",\n    mutability: \"IMMUTABLE\",\n    data: Object\n});\n/**\n * An instance of a document entity, consisting of a `type` and relevant\n * `data`, metadata about the entity.\n *\n * For instance, a \"link\" entity might provide a URI, and a \"mention\"\n * entity might provide the mentioned user's ID. These pieces of data\n * may be used when rendering the entity as part of a ContentBlock DOM\n * representation. For a link, the data would be used as an href for\n * the rendered anchor. For a mention, the ID could be used to retrieve\n * a hovercard.\n */ var DraftEntityInstance = /*#__PURE__*/ function(_DraftEntityInstanceR) {\n    _inheritsLoose(DraftEntityInstance, _DraftEntityInstanceR);\n    function DraftEntityInstance() {\n        return _DraftEntityInstanceR.apply(this, arguments) || this;\n    }\n    var _proto = DraftEntityInstance.prototype;\n    _proto.getType = function getType() {\n        return this.get(\"type\");\n    };\n    _proto.getMutability = function getMutability() {\n        return this.get(\"mutability\");\n    };\n    _proto.getData = function getData() {\n        return this.get(\"data\");\n    };\n    return DraftEntityInstance;\n}(DraftEntityInstanceRecord);\nmodule.exports = DraftEntityInstance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RW50aXR5SW5zdGFuY2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNEO0FBRUEsU0FBU0EsZUFBZUMsUUFBUSxFQUFFQyxVQUFVO0lBQUlELFNBQVNFLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDSCxXQUFXQyxTQUFTO0lBQUdGLFNBQVNFLFNBQVMsQ0FBQ0csV0FBVyxHQUFHTDtJQUFVQSxTQUFTTSxTQUFTLEdBQUdMO0FBQVk7QUFFdEwsSUFBSU0sWUFBWUMsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUMsU0FBU0YsVUFBVUUsTUFBTTtBQUM3QixJQUFJQyw0QkFBNEJELE9BQU87SUFDckNFLE1BQU07SUFDTkMsWUFBWTtJQUNaQyxNQUFNVjtBQUNSO0FBQ0E7Ozs7Ozs7Ozs7Q0FVQyxHQUVELElBQUlXLHNCQUFzQixXQUFXLEdBQUUsU0FBVUMscUJBQXFCO0lBQ3BFaEIsZUFBZWUscUJBQXFCQztJQUVwQyxTQUFTRDtRQUNQLE9BQU9DLHNCQUFzQkMsS0FBSyxDQUFDLElBQUksRUFBRUMsY0FBYyxJQUFJO0lBQzdEO0lBRUEsSUFBSUMsU0FBU0osb0JBQW9CWixTQUFTO0lBRTFDZ0IsT0FBT0MsT0FBTyxHQUFHLFNBQVNBO1FBQ3hCLE9BQU8sSUFBSSxDQUFDQyxHQUFHLENBQUM7SUFDbEI7SUFFQUYsT0FBT0csYUFBYSxHQUFHLFNBQVNBO1FBQzlCLE9BQU8sSUFBSSxDQUFDRCxHQUFHLENBQUM7SUFDbEI7SUFFQUYsT0FBT0ksT0FBTyxHQUFHLFNBQVNBO1FBQ3hCLE9BQU8sSUFBSSxDQUFDRixHQUFHLENBQUM7SUFDbEI7SUFFQSxPQUFPTjtBQUNULEVBQUVKO0FBRUZhLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RW50aXR5SW5zdGFuY2UuanM/N2EwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsZWdhY3lTZXJ2ZXJDYWxsYWJsZUluc3RhbmNlXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG52YXIgUmVjb3JkID0gSW1tdXRhYmxlLlJlY29yZDtcbnZhciBEcmFmdEVudGl0eUluc3RhbmNlUmVjb3JkID0gUmVjb3JkKHtcbiAgdHlwZTogJ1RPS0VOJyxcbiAgbXV0YWJpbGl0eTogJ0lNTVVUQUJMRScsXG4gIGRhdGE6IE9iamVjdFxufSk7XG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgZG9jdW1lbnQgZW50aXR5LCBjb25zaXN0aW5nIG9mIGEgYHR5cGVgIGFuZCByZWxldmFudFxuICogYGRhdGFgLCBtZXRhZGF0YSBhYm91dCB0aGUgZW50aXR5LlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYSBcImxpbmtcIiBlbnRpdHkgbWlnaHQgcHJvdmlkZSBhIFVSSSwgYW5kIGEgXCJtZW50aW9uXCJcbiAqIGVudGl0eSBtaWdodCBwcm92aWRlIHRoZSBtZW50aW9uZWQgdXNlcidzIElELiBUaGVzZSBwaWVjZXMgb2YgZGF0YVxuICogbWF5IGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgdGhlIGVudGl0eSBhcyBwYXJ0IG9mIGEgQ29udGVudEJsb2NrIERPTVxuICogcmVwcmVzZW50YXRpb24uIEZvciBhIGxpbmssIHRoZSBkYXRhIHdvdWxkIGJlIHVzZWQgYXMgYW4gaHJlZiBmb3JcbiAqIHRoZSByZW5kZXJlZCBhbmNob3IuIEZvciBhIG1lbnRpb24sIHRoZSBJRCBjb3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlXG4gKiBhIGhvdmVyY2FyZC5cbiAqL1xuXG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0RyYWZ0RW50aXR5SW5zdGFuY2VSKSB7XG4gIF9pbmhlcml0c0xvb3NlKERyYWZ0RW50aXR5SW5zdGFuY2UsIF9EcmFmdEVudGl0eUluc3RhbmNlUik7XG5cbiAgZnVuY3Rpb24gRHJhZnRFbnRpdHlJbnN0YW5jZSgpIHtcbiAgICByZXR1cm4gX0RyYWZ0RW50aXR5SW5zdGFuY2VSLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEcmFmdEVudGl0eUluc3RhbmNlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0eXBlJyk7XG4gIH07XG5cbiAgX3Byb3RvLmdldE11dGFiaWxpdHkgPSBmdW5jdGlvbiBnZXRNdXRhYmlsaXR5KCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnbXV0YWJpbGl0eScpO1xuICB9O1xuXG4gIF9wcm90by5nZXREYXRhID0gZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2RhdGEnKTtcbiAgfTtcblxuICByZXR1cm4gRHJhZnRFbnRpdHlJbnN0YW5jZTtcbn0oRHJhZnRFbnRpdHlJbnN0YW5jZVJlY29yZCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRFbnRpdHlJbnN0YW5jZTsiXSwibmFtZXMiOlsiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIkltbXV0YWJsZSIsInJlcXVpcmUiLCJSZWNvcmQiLCJEcmFmdEVudGl0eUluc3RhbmNlUmVjb3JkIiwidHlwZSIsIm11dGFiaWxpdHkiLCJkYXRhIiwiRHJhZnRFbnRpdHlJbnN0YW5jZSIsIl9EcmFmdEVudGl0eUluc3RhbmNlUiIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3Byb3RvIiwiZ2V0VHlwZSIsImdldCIsImdldE11dGFiaWxpdHkiLCJnZXREYXRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEntitySegments.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEntitySegments.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Identify the range to delete from a segmented entity.\n *\n * Rules:\n *\n *  Example: 'John F. Kennedy'\n *\n *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])\n *     will return the range of that text.\n *\n *       'John F. Kennedy' -> 'John F.'\n *                  ^\n *\n *   - Forward deletion of whitespace will remove the following section:\n *\n *       'John F. Kennedy' -> 'John Kennedy'\n *            ^\n *\n *   - Backward deletion of whitespace will remove the previous section:\n *\n *       'John F. Kennedy' -> 'F. Kennedy'\n *            ^\n */ var DraftEntitySegments = {\n    getRemovalRange: function getRemovalRange(selectionStart, selectionEnd, text, entityStart, direction) {\n        var segments = text.split(\" \");\n        segments = segments.map(function(/*string*/ segment, /*number*/ ii) {\n            if (direction === \"forward\") {\n                if (ii > 0) {\n                    return \" \" + segment;\n                }\n            } else if (ii < segments.length - 1) {\n                return segment + \" \";\n            }\n            return segment;\n        });\n        var segmentStart = entityStart;\n        var segmentEnd;\n        var segment;\n        var removalStart = null;\n        var removalEnd = null;\n        for(var jj = 0; jj < segments.length; jj++){\n            segment = segments[jj];\n            segmentEnd = segmentStart + segment.length; // Our selection overlaps this segment.\n            if (selectionStart < segmentEnd && segmentStart < selectionEnd) {\n                if (removalStart !== null) {\n                    removalEnd = segmentEnd;\n                } else {\n                    removalStart = segmentStart;\n                    removalEnd = segmentEnd;\n                }\n            } else if (removalStart !== null) {\n                break;\n            }\n            segmentStart = segmentEnd;\n        }\n        var entityEnd = entityStart + text.length;\n        var atStart = removalStart === entityStart;\n        var atEnd = removalEnd === entityEnd;\n        if (!atStart && atEnd || atStart && !atEnd) {\n            if (direction === \"forward\") {\n                if (removalEnd !== entityEnd) {\n                    removalEnd++;\n                }\n            } else if (removalStart !== entityStart) {\n                removalStart--;\n            }\n        }\n        return {\n            start: removalStart,\n            end: removalEnd\n        };\n    }\n};\nmodule.exports = DraftEntitySegments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RW50aXR5U2VnbWVudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQyxHQUNELElBQUlBLHNCQUFzQjtJQUN4QkMsaUJBQWlCLFNBQVNBLGdCQUFnQkMsY0FBYyxFQUFFQyxZQUFZLEVBQUVDLElBQUksRUFBRUMsV0FBVyxFQUFFQyxTQUFTO1FBQ2xHLElBQUlDLFdBQVdILEtBQUtJLEtBQUssQ0FBQztRQUMxQkQsV0FBV0EsU0FBU0UsR0FBRyxDQUFDLFNBQ3hCLFFBQVEsR0FDUkMsT0FBTyxFQUNQLFFBQVEsR0FDUkMsRUFBRTtZQUNBLElBQUlMLGNBQWMsV0FBVztnQkFDM0IsSUFBSUssS0FBSyxHQUFHO29CQUNWLE9BQU8sTUFBTUQ7Z0JBQ2Y7WUFDRixPQUFPLElBQUlDLEtBQUtKLFNBQVNLLE1BQU0sR0FBRyxHQUFHO2dCQUNuQyxPQUFPRixVQUFVO1lBQ25CO1lBRUEsT0FBT0E7UUFDVDtRQUNBLElBQUlHLGVBQWVSO1FBQ25CLElBQUlTO1FBQ0osSUFBSUo7UUFDSixJQUFJSyxlQUFlO1FBQ25CLElBQUlDLGFBQWE7UUFFakIsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtWLFNBQVNLLE1BQU0sRUFBRUssS0FBTTtZQUMzQ1AsVUFBVUgsUUFBUSxDQUFDVSxHQUFHO1lBQ3RCSCxhQUFhRCxlQUFlSCxRQUFRRSxNQUFNLEVBQUUsdUNBQXVDO1lBRW5GLElBQUlWLGlCQUFpQlksY0FBY0QsZUFBZVYsY0FBYztnQkFDOUQsSUFBSVksaUJBQWlCLE1BQU07b0JBQ3pCQyxhQUFhRjtnQkFDZixPQUFPO29CQUNMQyxlQUFlRjtvQkFDZkcsYUFBYUY7Z0JBQ2Y7WUFDRixPQUFPLElBQUlDLGlCQUFpQixNQUFNO2dCQUNoQztZQUNGO1lBRUFGLGVBQWVDO1FBQ2pCO1FBRUEsSUFBSUksWUFBWWIsY0FBY0QsS0FBS1EsTUFBTTtRQUN6QyxJQUFJTyxVQUFVSixpQkFBaUJWO1FBQy9CLElBQUllLFFBQVFKLGVBQWVFO1FBRTNCLElBQUksQ0FBQ0MsV0FBV0MsU0FBU0QsV0FBVyxDQUFDQyxPQUFPO1lBQzFDLElBQUlkLGNBQWMsV0FBVztnQkFDM0IsSUFBSVUsZUFBZUUsV0FBVztvQkFDNUJGO2dCQUNGO1lBQ0YsT0FBTyxJQUFJRCxpQkFBaUJWLGFBQWE7Z0JBQ3ZDVTtZQUNGO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xNLE9BQU9OO1lBQ1BPLEtBQUtOO1FBQ1A7SUFDRjtBQUNGO0FBQ0FPLE9BQU9DLE9BQU8sR0FBR3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVudGl0eVNlZ21lbnRzLmpzPzNiOTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJZGVudGlmeSB0aGUgcmFuZ2UgdG8gZGVsZXRlIGZyb20gYSBzZWdtZW50ZWQgZW50aXR5LlxuICpcbiAqIFJ1bGVzOlxuICpcbiAqICBFeGFtcGxlOiAnSm9obiBGLiBLZW5uZWR5J1xuICpcbiAqICAgLSBEZWxldGlvbiBmcm9tIHdpdGhpbiBhbnkgbm9uLXdoaXRlc3BhY2UgKGkuZS4gWydKb2huJywgJ0YuJywgJ0tlbm5lZHknXSlcbiAqICAgICB3aWxsIHJldHVybiB0aGUgcmFuZ2Ugb2YgdGhhdCB0ZXh0LlxuICpcbiAqICAgICAgICdKb2huIEYuIEtlbm5lZHknIC0+ICdKb2huIEYuJ1xuICogICAgICAgICAgICAgICAgICBeXG4gKlxuICogICAtIEZvcndhcmQgZGVsZXRpb24gb2Ygd2hpdGVzcGFjZSB3aWxsIHJlbW92ZSB0aGUgZm9sbG93aW5nIHNlY3Rpb246XG4gKlxuICogICAgICAgJ0pvaG4gRi4gS2VubmVkeScgLT4gJ0pvaG4gS2VubmVkeSdcbiAqICAgICAgICAgICAgXlxuICpcbiAqICAgLSBCYWNrd2FyZCBkZWxldGlvbiBvZiB3aGl0ZXNwYWNlIHdpbGwgcmVtb3ZlIHRoZSBwcmV2aW91cyBzZWN0aW9uOlxuICpcbiAqICAgICAgICdKb2huIEYuIEtlbm5lZHknIC0+ICdGLiBLZW5uZWR5J1xuICogICAgICAgICAgICBeXG4gKi9cbnZhciBEcmFmdEVudGl0eVNlZ21lbnRzID0ge1xuICBnZXRSZW1vdmFsUmFuZ2U6IGZ1bmN0aW9uIGdldFJlbW92YWxSYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kLCB0ZXh0LCBlbnRpdHlTdGFydCwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gdGV4dC5zcGxpdCgnICcpO1xuICAgIHNlZ21lbnRzID0gc2VnbWVudHMubWFwKGZ1bmN0aW9uIChcbiAgICAvKnN0cmluZyovXG4gICAgc2VnbWVudCxcbiAgICAvKm51bWJlciovXG4gICAgaWkpIHtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgICBpZiAoaWkgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuICcgJyArIHNlZ21lbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWkgPCBzZWdtZW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50ICsgJyAnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9KTtcbiAgICB2YXIgc2VnbWVudFN0YXJ0ID0gZW50aXR5U3RhcnQ7XG4gICAgdmFyIHNlZ21lbnRFbmQ7XG4gICAgdmFyIHNlZ21lbnQ7XG4gICAgdmFyIHJlbW92YWxTdGFydCA9IG51bGw7XG4gICAgdmFyIHJlbW92YWxFbmQgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgamogPSAwOyBqaiA8IHNlZ21lbnRzLmxlbmd0aDsgamorKykge1xuICAgICAgc2VnbWVudCA9IHNlZ21lbnRzW2pqXTtcbiAgICAgIHNlZ21lbnRFbmQgPSBzZWdtZW50U3RhcnQgKyBzZWdtZW50Lmxlbmd0aDsgLy8gT3VyIHNlbGVjdGlvbiBvdmVybGFwcyB0aGlzIHNlZ21lbnQuXG5cbiAgICAgIGlmIChzZWxlY3Rpb25TdGFydCA8IHNlZ21lbnRFbmQgJiYgc2VnbWVudFN0YXJ0IDwgc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgIGlmIChyZW1vdmFsU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgICByZW1vdmFsRW5kID0gc2VnbWVudEVuZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmFsU3RhcnQgPSBzZWdtZW50U3RhcnQ7XG4gICAgICAgICAgcmVtb3ZhbEVuZCA9IHNlZ21lbnRFbmQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVtb3ZhbFN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBzZWdtZW50U3RhcnQgPSBzZWdtZW50RW5kO1xuICAgIH1cblxuICAgIHZhciBlbnRpdHlFbmQgPSBlbnRpdHlTdGFydCArIHRleHQubGVuZ3RoO1xuICAgIHZhciBhdFN0YXJ0ID0gcmVtb3ZhbFN0YXJ0ID09PSBlbnRpdHlTdGFydDtcbiAgICB2YXIgYXRFbmQgPSByZW1vdmFsRW5kID09PSBlbnRpdHlFbmQ7XG5cbiAgICBpZiAoIWF0U3RhcnQgJiYgYXRFbmQgfHwgYXRTdGFydCAmJiAhYXRFbmQpIHtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgICBpZiAocmVtb3ZhbEVuZCAhPT0gZW50aXR5RW5kKSB7XG4gICAgICAgICAgcmVtb3ZhbEVuZCsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlbW92YWxTdGFydCAhPT0gZW50aXR5U3RhcnQpIHtcbiAgICAgICAgcmVtb3ZhbFN0YXJ0LS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiByZW1vdmFsU3RhcnQsXG4gICAgICBlbmQ6IHJlbW92YWxFbmRcbiAgICB9O1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVudGl0eVNlZ21lbnRzOyJdLCJuYW1lcyI6WyJEcmFmdEVudGl0eVNlZ21lbnRzIiwiZ2V0UmVtb3ZhbFJhbmdlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJ0ZXh0IiwiZW50aXR5U3RhcnQiLCJkaXJlY3Rpb24iLCJzZWdtZW50cyIsInNwbGl0IiwibWFwIiwic2VnbWVudCIsImlpIiwibGVuZ3RoIiwic2VnbWVudFN0YXJ0Iiwic2VnbWVudEVuZCIsInJlbW92YWxTdGFydCIsInJlbW92YWxFbmQiLCJqaiIsImVudGl0eUVuZCIsImF0U3RhcnQiLCJhdEVuZCIsInN0YXJ0IiwiZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEntitySegments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftJsDebugLogging.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ \nmodule.exports = {\n    logBlockedSelectionEvent: function logBlockedSelectionEvent() {\n        return null;\n    },\n    logSelectionStateFailure: function logSelectionStateFailure() {\n        return null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0SnNEZWJ1Z0xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLDBCQUEwQixTQUFTQTtRQUNqQyxPQUFPO0lBQ1Q7SUFDQUMsMEJBQTBCLFNBQVNBO1FBQ2pDLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEpzRGVidWdMb2dnaW5nLmpzPzc0OTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ0Jsb2NrZWRTZWxlY3Rpb25FdmVudDogZnVuY3Rpb24gbG9nQmxvY2tlZFNlbGVjdGlvbkV2ZW50KCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBsb2dTZWxlY3Rpb25TdGF0ZUZhaWx1cmU6IGZ1bmN0aW9uIGxvZ1NlbGVjdGlvblN0YXRlRmFpbHVyZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxvZ0Jsb2NrZWRTZWxlY3Rpb25FdmVudCIsImxvZ1NlbGVjdGlvblN0YXRlRmFpbHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftModifier.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftModifier.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentStateInlineStyle = __webpack_require__(/*! ./ContentStateInlineStyle */ \"(ssr)/./node_modules/draft-js/lib/ContentStateInlineStyle.js\");\nvar applyEntityToContentState = __webpack_require__(/*! ./applyEntityToContentState */ \"(ssr)/./node_modules/draft-js/lib/applyEntityToContentState.js\");\nvar getCharacterRemovalRange = __webpack_require__(/*! ./getCharacterRemovalRange */ \"(ssr)/./node_modules/draft-js/lib/getCharacterRemovalRange.js\");\nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar insertFragmentIntoContentState = __webpack_require__(/*! ./insertFragmentIntoContentState */ \"(ssr)/./node_modules/draft-js/lib/insertFragmentIntoContentState.js\");\nvar insertTextIntoContentState = __webpack_require__(/*! ./insertTextIntoContentState */ \"(ssr)/./node_modules/draft-js/lib/insertTextIntoContentState.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar modifyBlockForContentState = __webpack_require__(/*! ./modifyBlockForContentState */ \"(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js\");\nvar removeEntitiesAtEdges = __webpack_require__(/*! ./removeEntitiesAtEdges */ \"(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js\");\nvar removeRangeFromContentState = __webpack_require__(/*! ./removeRangeFromContentState */ \"(ssr)/./node_modules/draft-js/lib/removeRangeFromContentState.js\");\nvar splitBlockInContentState = __webpack_require__(/*! ./splitBlockInContentState */ \"(ssr)/./node_modules/draft-js/lib/splitBlockInContentState.js\");\nvar OrderedSet = Immutable.OrderedSet;\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */ var DraftModifier = {\n    replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n        var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n        var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n        var character = CharacterMetadata.create({\n            style: inlineStyle || OrderedSet(),\n            entity: entityKey || null\n        });\n        return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n    },\n    insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n        !targetRange.isCollapsed() ?  true ? invariant(false, \"Target range must be collapsed for `insertText`.\") : 0 : void 0;\n        return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n    },\n    moveText: function moveText(contentState, removalRange, targetRange) {\n        var movedFragment = getContentStateFragment(contentState, removalRange);\n        var afterRemoval = DraftModifier.removeRange(contentState, removalRange, \"backward\");\n        return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n    },\n    replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n        var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"REPLACE_WITH_NEW_DATA\";\n        var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n        var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n        return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment, mergeBlockData);\n    },\n    removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n        var startKey, endKey, startBlock, endBlock;\n        if (rangeToRemove.getIsBackward()) {\n            rangeToRemove = rangeToRemove.merge({\n                anchorKey: rangeToRemove.getFocusKey(),\n                anchorOffset: rangeToRemove.getFocusOffset(),\n                focusKey: rangeToRemove.getAnchorKey(),\n                focusOffset: rangeToRemove.getAnchorOffset(),\n                isBackward: false\n            });\n        }\n        startKey = rangeToRemove.getAnchorKey();\n        endKey = rangeToRemove.getFocusKey();\n        startBlock = contentState.getBlockForKey(startKey);\n        endBlock = contentState.getBlockForKey(endKey);\n        var startOffset = rangeToRemove.getStartOffset();\n        var endOffset = rangeToRemove.getEndOffset();\n        var startEntityKey = startBlock.getEntityAt(startOffset);\n        var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\n        // If so, try to remove the appropriate substring of the entity text.\n        if (startKey === endKey) {\n            if (startEntityKey && startEntityKey === endEntityKey) {\n                var adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n                return removeRangeFromContentState(contentState, adjustedRemovalRange);\n            }\n        }\n        var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);\n        return removeRangeFromContentState(withoutEntities, rangeToRemove);\n    },\n    splitBlock: function splitBlock(contentState, selectionState) {\n        var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n        var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n        return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n    },\n    applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n        return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n    },\n    removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n        return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n    },\n    setBlockType: function setBlockType(contentState, selectionState, blockType) {\n        return modifyBlockForContentState(contentState, selectionState, function(block) {\n            return block.merge({\n                type: blockType,\n                depth: 0\n            });\n        });\n    },\n    setBlockData: function setBlockData(contentState, selectionState, blockData) {\n        return modifyBlockForContentState(contentState, selectionState, function(block) {\n            return block.merge({\n                data: blockData\n            });\n        });\n    },\n    mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n        return modifyBlockForContentState(contentState, selectionState, function(block) {\n            return block.merge({\n                data: block.getData().merge(blockData)\n            });\n        });\n    },\n    applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n        var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n        return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n    }\n};\nmodule.exports = DraftModifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftModifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftOffsetKey.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar KEY_DELIMITER = \"-\";\nvar DraftOffsetKey = {\n    encode: function encode(blockKey, decoratorKey, leafKey) {\n        return blockKey + KEY_DELIMITER + decoratorKey + KEY_DELIMITER + leafKey;\n    },\n    decode: function decode(offsetKey) {\n        // Extracts the last two parts of offsetKey and captures the rest in blockKeyParts\n        var _offsetKey$split$reve = offsetKey.split(KEY_DELIMITER).reverse(), leafKey = _offsetKey$split$reve[0], decoratorKey = _offsetKey$split$reve[1], blockKeyParts = _offsetKey$split$reve.slice(2);\n        return {\n            // Recomposes the parts of blockKey after reversing them\n            blockKey: blockKeyParts.reverse().join(KEY_DELIMITER),\n            decoratorKey: parseInt(decoratorKey, 10),\n            leafKey: parseInt(leafKey, 10)\n        };\n    }\n};\nmodule.exports = DraftOffsetKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0T2Zmc2V0S2V5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCO0FBQ3BCLElBQUlDLGlCQUFpQjtJQUNuQkMsUUFBUSxTQUFTQSxPQUFPQyxRQUFRLEVBQUVDLFlBQVksRUFBRUMsT0FBTztRQUNyRCxPQUFPRixXQUFXSCxnQkFBZ0JJLGVBQWVKLGdCQUFnQks7SUFDbkU7SUFDQUMsUUFBUSxTQUFTQSxPQUFPQyxTQUFTO1FBQy9CLGtGQUFrRjtRQUNsRixJQUFJQyx3QkFBd0JELFVBQVVFLEtBQUssQ0FBQ1QsZUFBZVUsT0FBTyxJQUM5REwsVUFBVUcscUJBQXFCLENBQUMsRUFBRSxFQUNsQ0osZUFBZUkscUJBQXFCLENBQUMsRUFBRSxFQUN2Q0csZ0JBQWdCSCxzQkFBc0JJLEtBQUssQ0FBQztRQUVoRCxPQUFPO1lBQ0wsd0RBQXdEO1lBQ3hEVCxVQUFVUSxjQUFjRCxPQUFPLEdBQUdHLElBQUksQ0FBQ2I7WUFDdkNJLGNBQWNVLFNBQVNWLGNBQWM7WUFDckNDLFNBQVNTLFNBQVNULFNBQVM7UUFDN0I7SUFDRjtBQUNGO0FBQ0FVLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0T2Zmc2V0S2V5LmpzPzRlYmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEtFWV9ERUxJTUlURVIgPSAnLSc7XG52YXIgRHJhZnRPZmZzZXRLZXkgPSB7XG4gIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlKGJsb2NrS2V5LCBkZWNvcmF0b3JLZXksIGxlYWZLZXkpIHtcbiAgICByZXR1cm4gYmxvY2tLZXkgKyBLRVlfREVMSU1JVEVSICsgZGVjb3JhdG9yS2V5ICsgS0VZX0RFTElNSVRFUiArIGxlYWZLZXk7XG4gIH0sXG4gIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlKG9mZnNldEtleSkge1xuICAgIC8vIEV4dHJhY3RzIHRoZSBsYXN0IHR3byBwYXJ0cyBvZiBvZmZzZXRLZXkgYW5kIGNhcHR1cmVzIHRoZSByZXN0IGluIGJsb2NrS2V5UGFydHNcbiAgICB2YXIgX29mZnNldEtleSRzcGxpdCRyZXZlID0gb2Zmc2V0S2V5LnNwbGl0KEtFWV9ERUxJTUlURVIpLnJldmVyc2UoKSxcbiAgICAgICAgbGVhZktleSA9IF9vZmZzZXRLZXkkc3BsaXQkcmV2ZVswXSxcbiAgICAgICAgZGVjb3JhdG9yS2V5ID0gX29mZnNldEtleSRzcGxpdCRyZXZlWzFdLFxuICAgICAgICBibG9ja0tleVBhcnRzID0gX29mZnNldEtleSRzcGxpdCRyZXZlLnNsaWNlKDIpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFJlY29tcG9zZXMgdGhlIHBhcnRzIG9mIGJsb2NrS2V5IGFmdGVyIHJldmVyc2luZyB0aGVtXG4gICAgICBibG9ja0tleTogYmxvY2tLZXlQYXJ0cy5yZXZlcnNlKCkuam9pbihLRVlfREVMSU1JVEVSKSxcbiAgICAgIGRlY29yYXRvcktleTogcGFyc2VJbnQoZGVjb3JhdG9yS2V5LCAxMCksXG4gICAgICBsZWFmS2V5OiBwYXJzZUludChsZWFmS2V5LCAxMClcbiAgICB9O1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEcmFmdE9mZnNldEtleTsiXSwibmFtZXMiOlsiS0VZX0RFTElNSVRFUiIsIkRyYWZ0T2Zmc2V0S2V5IiwiZW5jb2RlIiwiYmxvY2tLZXkiLCJkZWNvcmF0b3JLZXkiLCJsZWFmS2V5IiwiZGVjb2RlIiwib2Zmc2V0S2V5IiwiX29mZnNldEtleSRzcGxpdCRyZXZlIiwic3BsaXQiLCJyZXZlcnNlIiwiYmxvY2tLZXlQYXJ0cyIsInNsaWNlIiwiam9pbiIsInBhcnNlSW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftPasteProcessor.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftPasteProcessor.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar convertFromHTMLToContentBlocks = __webpack_require__(/*! ./convertFromHTMLToContentBlocks */ \"(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getSafeBodyFromHTML = __webpack_require__(/*! ./getSafeBodyFromHTML */ \"(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar sanitizeDraftText = __webpack_require__(/*! ./sanitizeDraftText */ \"(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js\");\nvar List = Immutable.List, Repeat = Immutable.Repeat;\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar DraftPasteProcessor = {\n    processHTML: function processHTML(html, blockRenderMap) {\n        return convertFromHTMLToContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\n    },\n    processText: function processText(textBlocks, character, type) {\n        return textBlocks.reduce(function(acc, textLine, index) {\n            textLine = sanitizeDraftText(textLine);\n            var key = generateRandomKey();\n            var blockNodeConfig = {\n                key: key,\n                type: type,\n                text: textLine,\n                characterList: List(Repeat(character, textLine.length))\n            }; // next block updates previous block\n            if (experimentalTreeDataSupport && index !== 0) {\n                var prevSiblingIndex = index - 1; // update previous block\n                var previousBlock = acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\n                    nextSibling: key\n                });\n                blockNodeConfig = _objectSpread({}, blockNodeConfig, {\n                    prevSibling: previousBlock.getKey()\n                });\n            }\n            acc.push(new ContentBlockRecord(blockNodeConfig));\n            return acc;\n        }, []);\n    }\n};\nmodule.exports = DraftPasteProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0UGFzdGVQcm9jZXNzb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSxjQUFjQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRSxJQUFJLE9BQU9DLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFBRyxJQUFJSSxVQUFVQyxPQUFPQyxJQUFJLENBQUNIO1FBQVMsSUFBSSxPQUFPRSxPQUFPRSxxQkFBcUIsS0FBSyxZQUFZO1lBQUVILFVBQVVBLFFBQVFJLE1BQU0sQ0FBQ0gsT0FBT0UscUJBQXFCLENBQUNKLFFBQVFNLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO2dCQUFJLE9BQU9MLE9BQU9NLHdCQUF3QixDQUFDUixRQUFRTyxLQUFLRSxVQUFVO1lBQUU7UUFBSztRQUFFUixRQUFRUyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJQyxnQkFBZ0JoQixRQUFRZSxLQUFLWCxNQUFNLENBQUNXLElBQUk7UUFBRztJQUFJO0lBQUUsT0FBT2Y7QUFBUTtBQUVoZSxTQUFTZ0IsZ0JBQWdCQyxHQUFHLEVBQUVGLEdBQUcsRUFBRUcsS0FBSztJQUFJLElBQUlILE9BQU9FLEtBQUs7UUFBRVgsT0FBT2EsY0FBYyxDQUFDRixLQUFLRixLQUFLO1lBQUVHLE9BQU9BO1lBQU9MLFlBQVk7WUFBTU8sY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVKLEdBQUcsQ0FBQ0YsSUFBSSxHQUFHRztJQUFPO0lBQUUsT0FBT0Q7QUFBSztBQUVoTixJQUFJSyxlQUFlQyxtQkFBT0EsQ0FBQyx5RUFBZ0I7QUFFM0MsSUFBSUMsbUJBQW1CRCxtQkFBT0EsQ0FBQyxpRkFBb0I7QUFFbkQsSUFBSUUsaUNBQWlDRixtQkFBT0EsQ0FBQyw2R0FBa0M7QUFFL0UsSUFBSUcsb0JBQW9CSCxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSUksc0JBQXNCSixtQkFBT0EsQ0FBQyx1RkFBdUI7QUFFekQsSUFBSUssTUFBTUwsbUJBQU9BLENBQUMsdURBQU87QUFFekIsSUFBSU0sWUFBWU4sbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSU8sb0JBQW9CUCxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSVEsT0FBT0YsVUFBVUUsSUFBSSxFQUNyQkMsU0FBU0gsVUFBVUcsTUFBTTtBQUM3QixJQUFJQyw4QkFBOEJMLElBQUk7QUFDdEMsSUFBSU0scUJBQXFCRCw4QkFBOEJULG1CQUFtQkY7QUFDMUUsSUFBSWEsc0JBQXNCO0lBQ3hCQyxhQUFhLFNBQVNBLFlBQVlDLElBQUksRUFBRUMsY0FBYztRQUNwRCxPQUFPYiwrQkFBK0JZLE1BQU1WLHFCQUFxQlc7SUFDbkU7SUFDQUMsYUFBYSxTQUFTQSxZQUFZQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsSUFBSTtRQUMzRCxPQUFPRixXQUFXRyxNQUFNLENBQUMsU0FBVUMsR0FBRyxFQUFFQyxRQUFRLEVBQUVDLEtBQUs7WUFDckRELFdBQVdmLGtCQUFrQmU7WUFDN0IsSUFBSTlCLE1BQU1XO1lBQ1YsSUFBSXFCLGtCQUFrQjtnQkFDcEJoQyxLQUFLQTtnQkFDTDJCLE1BQU1BO2dCQUNOTSxNQUFNSDtnQkFDTkksZUFBZWxCLEtBQUtDLE9BQU9TLFdBQVdJLFNBQVMxQyxNQUFNO1lBQ3ZELEdBQUcsb0NBQW9DO1lBRXZDLElBQUk4QiwrQkFBK0JhLFVBQVUsR0FBRztnQkFDOUMsSUFBSUksbUJBQW1CSixRQUFRLEdBQUcsd0JBQXdCO2dCQUUxRCxJQUFJSyxnQkFBZ0JQLEdBQUcsQ0FBQ00saUJBQWlCLEdBQUdOLEdBQUcsQ0FBQ00saUJBQWlCLENBQUNFLEtBQUssQ0FBQztvQkFDdEVDLGFBQWF0QztnQkFDZjtnQkFDQWdDLGtCQUFrQmhELGNBQWMsQ0FBQyxHQUFHZ0QsaUJBQWlCO29CQUNuRE8sYUFBYUgsY0FBY0ksTUFBTTtnQkFDbkM7WUFDRjtZQUVBWCxJQUFJWSxJQUFJLENBQUMsSUFBSXRCLG1CQUFtQmE7WUFDaEMsT0FBT0g7UUFDVCxHQUFHLEVBQUU7SUFDUDtBQUNGO0FBQ0FhLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdFBhc3RlUHJvY2Vzc29yLmpzPzU5ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgQ29udGVudEJsb2NrID0gcmVxdWlyZShcIi4vQ29udGVudEJsb2NrXCIpO1xuXG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoXCIuL0NvbnRlbnRCbG9ja05vZGVcIik7XG5cbnZhciBjb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3MgPSByZXF1aXJlKFwiLi9jb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3NcIik7XG5cbnZhciBnZW5lcmF0ZVJhbmRvbUtleSA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlUmFuZG9tS2V5XCIpO1xuXG52YXIgZ2V0U2FmZUJvZHlGcm9tSFRNTCA9IHJlcXVpcmUoXCIuL2dldFNhZmVCb2R5RnJvbUhUTUxcIik7XG5cbnZhciBna3ggPSByZXF1aXJlKFwiLi9na3hcIik7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG52YXIgc2FuaXRpemVEcmFmdFRleHQgPSByZXF1aXJlKFwiLi9zYW5pdGl6ZURyYWZ0VGV4dFwiKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBSZXBlYXQgPSBJbW11dGFibGUuUmVwZWF0O1xudmFyIGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA9IGdreCgnZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQnKTtcbnZhciBDb250ZW50QmxvY2tSZWNvcmQgPSBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPyBDb250ZW50QmxvY2tOb2RlIDogQ29udGVudEJsb2NrO1xudmFyIERyYWZ0UGFzdGVQcm9jZXNzb3IgPSB7XG4gIHByb2Nlc3NIVE1MOiBmdW5jdGlvbiBwcm9jZXNzSFRNTChodG1sLCBibG9ja1JlbmRlck1hcCkge1xuICAgIHJldHVybiBjb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3MoaHRtbCwgZ2V0U2FmZUJvZHlGcm9tSFRNTCwgYmxvY2tSZW5kZXJNYXApO1xuICB9LFxuICBwcm9jZXNzVGV4dDogZnVuY3Rpb24gcHJvY2Vzc1RleHQodGV4dEJsb2NrcywgY2hhcmFjdGVyLCB0eXBlKSB7XG4gICAgcmV0dXJuIHRleHRCbG9ja3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRleHRMaW5lLCBpbmRleCkge1xuICAgICAgdGV4dExpbmUgPSBzYW5pdGl6ZURyYWZ0VGV4dCh0ZXh0TGluZSk7XG4gICAgICB2YXIga2V5ID0gZ2VuZXJhdGVSYW5kb21LZXkoKTtcbiAgICAgIHZhciBibG9ja05vZGVDb25maWcgPSB7XG4gICAgICAgIGtleToga2V5LFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICB0ZXh0OiB0ZXh0TGluZSxcbiAgICAgICAgY2hhcmFjdGVyTGlzdDogTGlzdChSZXBlYXQoY2hhcmFjdGVyLCB0ZXh0TGluZS5sZW5ndGgpKVxuICAgICAgfTsgLy8gbmV4dCBibG9jayB1cGRhdGVzIHByZXZpb3VzIGJsb2NrXG5cbiAgICAgIGlmIChleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgJiYgaW5kZXggIT09IDApIHtcbiAgICAgICAgdmFyIHByZXZTaWJsaW5nSW5kZXggPSBpbmRleCAtIDE7IC8vIHVwZGF0ZSBwcmV2aW91cyBibG9ja1xuXG4gICAgICAgIHZhciBwcmV2aW91c0Jsb2NrID0gYWNjW3ByZXZTaWJsaW5nSW5kZXhdID0gYWNjW3ByZXZTaWJsaW5nSW5kZXhdLm1lcmdlKHtcbiAgICAgICAgICBuZXh0U2libGluZzoga2V5XG4gICAgICAgIH0pO1xuICAgICAgICBibG9ja05vZGVDb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBibG9ja05vZGVDb25maWcsIHtcbiAgICAgICAgICBwcmV2U2libGluZzogcHJldmlvdXNCbG9jay5nZXRLZXkoKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgYWNjLnB1c2gobmV3IENvbnRlbnRCbG9ja1JlY29yZChibG9ja05vZGVDb25maWcpKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFBhc3RlUHJvY2Vzc29yOyJdLCJuYW1lcyI6WyJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsIm93bktleXMiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY29uY2F0IiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb250ZW50QmxvY2siLCJyZXF1aXJlIiwiQ29udGVudEJsb2NrTm9kZSIsImNvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2NrcyIsImdlbmVyYXRlUmFuZG9tS2V5IiwiZ2V0U2FmZUJvZHlGcm9tSFRNTCIsImdreCIsIkltbXV0YWJsZSIsInNhbml0aXplRHJhZnRUZXh0IiwiTGlzdCIsIlJlcGVhdCIsImV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCIsIkNvbnRlbnRCbG9ja1JlY29yZCIsIkRyYWZ0UGFzdGVQcm9jZXNzb3IiLCJwcm9jZXNzSFRNTCIsImh0bWwiLCJibG9ja1JlbmRlck1hcCIsInByb2Nlc3NUZXh0IiwidGV4dEJsb2NrcyIsImNoYXJhY3RlciIsInR5cGUiLCJyZWR1Y2UiLCJhY2MiLCJ0ZXh0TGluZSIsImluZGV4IiwiYmxvY2tOb2RlQ29uZmlnIiwidGV4dCIsImNoYXJhY3Rlckxpc3QiLCJwcmV2U2libGluZ0luZGV4IiwicHJldmlvdXNCbG9jayIsIm1lcmdlIiwibmV4dFNpYmxpbmciLCJwcmV2U2libGluZyIsImdldEtleSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftPasteProcessor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftRemovableWord.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar TokenizeUtil = __webpack_require__(/*! fbjs/lib/TokenizeUtil */ \"(ssr)/./node_modules/fbjs/lib/TokenizeUtil.js\");\nvar punctuation = TokenizeUtil.getPunctuation(); // The apostrophe and curly single quotes behave in a curious way: when\n// surrounded on both sides by word characters, they behave as word chars; when\n// either neighbor is punctuation or an end of the string, they behave as\n// punctuation.\nvar CHAMELEON_CHARS = \"['‘’]\"; // Remove the underscore, which should count as part of the removable word. The\n// \"chameleon chars\" also count as punctuation in this regex.\nvar WHITESPACE_AND_PUNCTUATION = \"\\\\s|(?![_])\" + punctuation;\nvar DELETE_STRING = \"^\" + \"(?:\" + WHITESPACE_AND_PUNCTUATION + \")*\" + \"(?:\" + CHAMELEON_CHARS + \"|(?!\" + WHITESPACE_AND_PUNCTUATION + \").)*\" + \"(?:(?!\" + WHITESPACE_AND_PUNCTUATION + \").)\";\nvar DELETE_REGEX = new RegExp(DELETE_STRING);\nvar BACKSPACE_STRING = \"(?:(?!\" + WHITESPACE_AND_PUNCTUATION + \").)\" + \"(?:\" + CHAMELEON_CHARS + \"|(?!\" + WHITESPACE_AND_PUNCTUATION + \").)*\" + \"(?:\" + WHITESPACE_AND_PUNCTUATION + \")*\" + \"$\";\nvar BACKSPACE_REGEX = new RegExp(BACKSPACE_STRING);\nfunction getRemovableWord(text, isBackward) {\n    var matches = isBackward ? BACKSPACE_REGEX.exec(text) : DELETE_REGEX.exec(text);\n    return matches ? matches[0] : text;\n}\nvar DraftRemovableWord = {\n    getBackward: function getBackward(text) {\n        return getRemovableWord(text, true);\n    },\n    getForward: function getForward(text) {\n        return getRemovableWord(text, false);\n    }\n};\nmodule.exports = DraftRemovableWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0UmVtb3ZhYmxlV29yZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJQyxjQUFjRixhQUFhRyxjQUFjLElBQUksdUVBQXVFO0FBQ3hILCtFQUErRTtBQUMvRSx5RUFBeUU7QUFDekUsZUFBZTtBQUVmLElBQUlDLGtCQUFrQixTQUFtQiwrRUFBK0U7QUFDeEgsNkRBQTZEO0FBRTdELElBQUlDLDZCQUE2QixnQkFBZ0JIO0FBQ2pELElBQUlJLGdCQUFnQixNQUFNLFFBQVFELDZCQUE2QixPQUFPLFFBQVFELGtCQUFrQixTQUFTQyw2QkFBNkIsU0FBUyxXQUFXQSw2QkFBNkI7QUFDdkwsSUFBSUUsZUFBZSxJQUFJQyxPQUFPRjtBQUM5QixJQUFJRyxtQkFBbUIsV0FBV0osNkJBQTZCLFFBQVEsUUFBUUQsa0JBQWtCLFNBQVNDLDZCQUE2QixTQUFTLFFBQVFBLDZCQUE2QixPQUFPO0FBQzVMLElBQUlLLGtCQUFrQixJQUFJRixPQUFPQztBQUVqQyxTQUFTRSxpQkFBaUJDLElBQUksRUFBRUMsVUFBVTtJQUN4QyxJQUFJQyxVQUFVRCxhQUFhSCxnQkFBZ0JLLElBQUksQ0FBQ0gsUUFBUUwsYUFBYVEsSUFBSSxDQUFDSDtJQUMxRSxPQUFPRSxVQUFVQSxPQUFPLENBQUMsRUFBRSxHQUFHRjtBQUNoQztBQUVBLElBQUlJLHFCQUFxQjtJQUN2QkMsYUFBYSxTQUFTQSxZQUFZTCxJQUFJO1FBQ3BDLE9BQU9ELGlCQUFpQkMsTUFBTTtJQUNoQztJQUNBTSxZQUFZLFNBQVNBLFdBQVdOLElBQUk7UUFDbEMsT0FBT0QsaUJBQWlCQyxNQUFNO0lBQ2hDO0FBQ0Y7QUFDQU8sT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRSZW1vdmFibGVXb3JkLmpzP2QyNjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFRva2VuaXplVXRpbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9Ub2tlbml6ZVV0aWxcIik7XG5cbnZhciBwdW5jdHVhdGlvbiA9IFRva2VuaXplVXRpbC5nZXRQdW5jdHVhdGlvbigpOyAvLyBUaGUgYXBvc3Ryb3BoZSBhbmQgY3VybHkgc2luZ2xlIHF1b3RlcyBiZWhhdmUgaW4gYSBjdXJpb3VzIHdheTogd2hlblxuLy8gc3Vycm91bmRlZCBvbiBib3RoIHNpZGVzIGJ5IHdvcmQgY2hhcmFjdGVycywgdGhleSBiZWhhdmUgYXMgd29yZCBjaGFyczsgd2hlblxuLy8gZWl0aGVyIG5laWdoYm9yIGlzIHB1bmN0dWF0aW9uIG9yIGFuIGVuZCBvZiB0aGUgc3RyaW5nLCB0aGV5IGJlaGF2ZSBhc1xuLy8gcHVuY3R1YXRpb24uXG5cbnZhciBDSEFNRUxFT05fQ0hBUlMgPSBcIlsnXFx1MjAxOFxcdTIwMTldXCI7IC8vIFJlbW92ZSB0aGUgdW5kZXJzY29yZSwgd2hpY2ggc2hvdWxkIGNvdW50IGFzIHBhcnQgb2YgdGhlIHJlbW92YWJsZSB3b3JkLiBUaGVcbi8vIFwiY2hhbWVsZW9uIGNoYXJzXCIgYWxzbyBjb3VudCBhcyBwdW5jdHVhdGlvbiBpbiB0aGlzIHJlZ2V4LlxuXG52YXIgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gPSAnXFxcXHN8KD8hW19dKScgKyBwdW5jdHVhdGlvbjtcbnZhciBERUxFVEVfU1RSSU5HID0gJ14nICsgJyg/OicgKyBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiArICcpKicgKyAnKD86JyArIENIQU1FTEVPTl9DSEFSUyArICd8KD8hJyArIFdISVRFU1BBQ0VfQU5EX1BVTkNUVUFUSU9OICsgJykuKSonICsgJyg/Oig/IScgKyBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiArICcpLiknO1xudmFyIERFTEVURV9SRUdFWCA9IG5ldyBSZWdFeHAoREVMRVRFX1NUUklORyk7XG52YXIgQkFDS1NQQUNFX1NUUklORyA9ICcoPzooPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pJyArICcoPzonICsgQ0hBTUVMRU9OX0NIQVJTICsgJ3woPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pKicgKyAnKD86JyArIFdISVRFU1BBQ0VfQU5EX1BVTkNUVUFUSU9OICsgJykqJyArICckJztcbnZhciBCQUNLU1BBQ0VfUkVHRVggPSBuZXcgUmVnRXhwKEJBQ0tTUEFDRV9TVFJJTkcpO1xuXG5mdW5jdGlvbiBnZXRSZW1vdmFibGVXb3JkKHRleHQsIGlzQmFja3dhcmQpIHtcbiAgdmFyIG1hdGNoZXMgPSBpc0JhY2t3YXJkID8gQkFDS1NQQUNFX1JFR0VYLmV4ZWModGV4dCkgOiBERUxFVEVfUkVHRVguZXhlYyh0ZXh0KTtcbiAgcmV0dXJuIG1hdGNoZXMgPyBtYXRjaGVzWzBdIDogdGV4dDtcbn1cblxudmFyIERyYWZ0UmVtb3ZhYmxlV29yZCA9IHtcbiAgZ2V0QmFja3dhcmQ6IGZ1bmN0aW9uIGdldEJhY2t3YXJkKHRleHQpIHtcbiAgICByZXR1cm4gZ2V0UmVtb3ZhYmxlV29yZCh0ZXh0LCB0cnVlKTtcbiAgfSxcbiAgZ2V0Rm9yd2FyZDogZnVuY3Rpb24gZ2V0Rm9yd2FyZCh0ZXh0KSB7XG4gICAgcmV0dXJuIGdldFJlbW92YWJsZVdvcmQodGV4dCwgZmFsc2UpO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFJlbW92YWJsZVdvcmQ7Il0sIm5hbWVzIjpbIlRva2VuaXplVXRpbCIsInJlcXVpcmUiLCJwdW5jdHVhdGlvbiIsImdldFB1bmN0dWF0aW9uIiwiQ0hBTUVMRU9OX0NIQVJTIiwiV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04iLCJERUxFVEVfU1RSSU5HIiwiREVMRVRFX1JFR0VYIiwiUmVnRXhwIiwiQkFDS1NQQUNFX1NUUklORyIsIkJBQ0tTUEFDRV9SRUdFWCIsImdldFJlbW92YWJsZVdvcmQiLCJ0ZXh0IiwiaXNCYWNrd2FyZCIsIm1hdGNoZXMiLCJleGVjIiwiRHJhZnRSZW1vdmFibGVXb3JkIiwiZ2V0QmFja3dhcmQiLCJnZXRGb3J3YXJkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftStringKey.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftStringKey.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftStringKey = {\n    stringify: function stringify(key) {\n        return \"_\" + String(key);\n    },\n    unstringify: function unstringify(key) {\n        return key.slice(1);\n    }\n};\nmodule.exports = DraftStringKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0U3RyaW5nS2V5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsaUJBQWlCO0lBQ25CQyxXQUFXLFNBQVNBLFVBQVVDLEdBQUc7UUFDL0IsT0FBTyxNQUFNQyxPQUFPRDtJQUN0QjtJQUNBRSxhQUFhLFNBQVNBLFlBQVlGLEdBQUc7UUFDbkMsT0FBT0EsSUFBSUcsS0FBSyxDQUFDO0lBQ25CO0FBQ0Y7QUFDQUMsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRTdHJpbmdLZXkuanM/MGZiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRTdHJpbmdLZXkgPSB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGtleSkge1xuICAgIHJldHVybiAnXycgKyBTdHJpbmcoa2V5KTtcbiAgfSxcbiAgdW5zdHJpbmdpZnk6IGZ1bmN0aW9uIHVuc3RyaW5naWZ5KGtleSkge1xuICAgIHJldHVybiBrZXkuc2xpY2UoMSk7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0U3RyaW5nS2V5OyJdLCJuYW1lcyI6WyJEcmFmdFN0cmluZ0tleSIsInN0cmluZ2lmeSIsImtleSIsIlN0cmluZyIsInVuc3RyaW5naWZ5Iiwic2xpY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftStringKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftTreeAdapter.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftTreeAdapter.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ var generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n    var stack = [].concat(blocks).reverse();\n    while(stack.length){\n        var _block = stack.pop();\n        fn(_block);\n        var children = _block.children;\n        !Array.isArray(children) ?  true ? invariant(false, \"Invalid tree raw block\") : 0 : void 0;\n        stack = stack.concat([].concat(children.reverse()));\n    }\n};\nvar isListBlock = function isListBlock(block) {\n    if (!(block && block.type)) {\n        return false;\n    }\n    var type = block.type;\n    return type === \"unordered-list-item\" || type === \"ordered-list-item\";\n};\nvar addDepthToChildren = function addDepthToChildren(block) {\n    if (Array.isArray(block.children)) {\n        block.children = block.children.map(function(child) {\n            return child.type === block.type ? _objectSpread({}, child, {\n                depth: (block.depth || 0) + 1\n            }) : child;\n        });\n    }\n};\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */ var DraftTreeAdapter = {\n    /**\n   * Converts from a tree raw state back to draft raw state\n   */ fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n        var blocks = draftTreeState.blocks;\n        var transformedBlocks = [];\n        !Array.isArray(blocks) ?  true ? invariant(false, \"Invalid raw state\") : 0 : void 0;\n        if (!Array.isArray(blocks) || !blocks.length) {\n            return draftTreeState;\n        }\n        traverseInDepthOrder(blocks, function(block) {\n            var newBlock = _objectSpread({}, block);\n            if (isListBlock(block)) {\n                newBlock.depth = newBlock.depth || 0;\n                addDepthToChildren(block); // if it's a non-leaf node, we don't do anything else\n                if (block.children != null && block.children.length > 0) {\n                    return;\n                }\n            }\n            delete newBlock.children;\n            transformedBlocks.push(newBlock);\n        });\n        draftTreeState.blocks = transformedBlocks;\n        return _objectSpread({}, draftTreeState, {\n            blocks: transformedBlocks\n        });\n    },\n    /**\n   * Converts from draft raw state to tree draft state\n   */ fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n        var transformedBlocks = [];\n        var parentStack = [];\n        draftState.blocks.forEach(function(block) {\n            var isList = isListBlock(block);\n            var depth = block.depth || 0;\n            var treeBlock = _objectSpread({}, block, {\n                children: []\n            });\n            if (!isList) {\n                transformedBlocks.push(treeBlock);\n                return;\n            }\n            var lastParent = parentStack[0]; // block is non-nested & there are no nested blocks, directly push block\n            if (lastParent == null && depth === 0) {\n                transformedBlocks.push(treeBlock); // block is first nested block or previous nested block is at a lower level\n            } else if (lastParent == null || lastParent.depth < depth - 1) {\n                // create new parent block\n                var newParent = {\n                    key: generateRandomKey(),\n                    text: \"\",\n                    depth: depth - 1,\n                    type: block.type,\n                    children: [],\n                    entityRanges: [],\n                    inlineStyleRanges: []\n                };\n                parentStack.unshift(newParent);\n                if (depth === 1) {\n                    // add as a root-level block\n                    transformedBlocks.push(newParent);\n                } else if (lastParent != null) {\n                    // depth > 1 => also add as previous parent's child\n                    lastParent.children.push(newParent);\n                }\n                newParent.children.push(treeBlock);\n            } else if (lastParent.depth === depth - 1) {\n                // add as child of last parent\n                lastParent.children.push(treeBlock);\n            } else {\n                // pop out parents at levels above this one from the parent stack\n                while(lastParent != null && lastParent.depth >= depth){\n                    parentStack.shift();\n                    lastParent = parentStack[0];\n                }\n                if (depth > 0) {\n                    lastParent.children.push(treeBlock);\n                } else {\n                    transformedBlocks.push(treeBlock);\n                }\n            }\n        });\n        return _objectSpread({}, draftState, {\n            blocks: transformedBlocks\n        });\n    }\n};\nmodule.exports = DraftTreeAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftTreeAdapter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftTreeInvariants.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftTreeInvariants.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ var warning = __webpack_require__(/*! fbjs/lib/warning */ \"(ssr)/./node_modules/fbjs/lib/warning.js\");\nvar DraftTreeInvariants = {\n    /**\n   * Check if the block is valid\n   */ isValidBlock: function isValidBlock(block, blockMap) {\n        var key = block.getKey(); // is its parent's child\n        var parentKey = block.getParentKey();\n        if (parentKey != null) {\n            var parent = blockMap.get(parentKey);\n            if (!parent.getChildKeys().includes(key)) {\n                 true ? warning(true, \"Tree is missing parent -> child pointer on %s\", key) : 0;\n                return false;\n            }\n        } // is its children's parent\n        var children = block.getChildKeys().map(function(k) {\n            return blockMap.get(k);\n        });\n        if (!children.every(function(c) {\n            return c.getParentKey() === key;\n        })) {\n             true ? warning(true, \"Tree is missing child -> parent pointer on %s\", key) : 0;\n            return false;\n        } // is its previous sibling's next sibling\n        var prevSiblingKey = block.getPrevSiblingKey();\n        if (prevSiblingKey != null) {\n            var prevSibling = blockMap.get(prevSiblingKey);\n            if (prevSibling.getNextSiblingKey() !== key) {\n                 true ? warning(true, \"Tree is missing nextSibling pointer on %s's prevSibling\", key) : 0;\n                return false;\n            }\n        } // is its next sibling's previous sibling\n        var nextSiblingKey = block.getNextSiblingKey();\n        if (nextSiblingKey != null) {\n            var nextSibling = blockMap.get(nextSiblingKey);\n            if (nextSibling.getPrevSiblingKey() !== key) {\n                 true ? warning(true, \"Tree is missing prevSibling pointer on %s's nextSibling\", key) : 0;\n                return false;\n            }\n        } // no 2-node cycles\n        if (nextSiblingKey !== null && prevSiblingKey !== null) {\n            if (prevSiblingKey === nextSiblingKey) {\n                 true ? warning(true, \"Tree has a two-node cycle at %s\", key) : 0;\n                return false;\n            }\n        } // if it's a leaf node, it has text but no children\n        if (block.text != \"\") {\n            if (block.getChildKeys().size > 0) {\n                 true ? warning(true, \"Leaf node %s has children\", key) : 0;\n                return false;\n            }\n        }\n        return true;\n    },\n    /**\n   * Checks that this is a connected tree on all the blocks\n   * starting from the first block, traversing nextSibling and child pointers\n   * should be a tree (preorder traversal - parent, then children)\n   * num of connected node === number of blocks\n   */ isConnectedTree: function isConnectedTree(blockMap) {\n        // exactly one node has no previous sibling + no parent\n        var eligibleFirstNodes = blockMap.toArray().filter(function(block) {\n            return block.getParentKey() == null && block.getPrevSiblingKey() == null;\n        });\n        if (eligibleFirstNodes.length !== 1) {\n             true ? warning(true, \"Tree is not connected. More or less than one first node\") : 0;\n            return false;\n        }\n        var firstNode = eligibleFirstNodes.shift();\n        var nodesSeen = 0;\n        var currentKey = firstNode.getKey();\n        var visitedStack = [];\n        while(currentKey != null){\n            var currentNode = blockMap.get(currentKey);\n            var childKeys = currentNode.getChildKeys();\n            var nextSiblingKey = currentNode.getNextSiblingKey(); // if the node has children, add parent's next sibling to stack and go to children\n            if (childKeys.size > 0) {\n                if (nextSiblingKey != null) {\n                    visitedStack.unshift(nextSiblingKey);\n                }\n                var children = childKeys.map(function(k) {\n                    return blockMap.get(k);\n                });\n                var _firstNode = children.find(function(block) {\n                    return block.getPrevSiblingKey() == null;\n                });\n                if (_firstNode == null) {\n                     true ? warning(true, \"%s has no first child\", currentKey) : 0;\n                    return false;\n                }\n                currentKey = _firstNode.getKey(); // TODO(T32490138): Deal with multi-node cycles here\n            } else {\n                if (currentNode.getNextSiblingKey() != null) {\n                    currentKey = currentNode.getNextSiblingKey();\n                } else {\n                    currentKey = visitedStack.shift();\n                }\n            }\n            nodesSeen++;\n        }\n        if (nodesSeen !== blockMap.size) {\n             true ? warning(true, \"Tree is not connected. %s nodes were seen instead of %s\", nodesSeen, blockMap.size) : 0;\n            return false;\n        }\n        return true;\n    },\n    /**\n   * Checks that the block map is a connected tree with valid blocks\n   */ isValidTree: function isValidTree(blockMap) {\n        var _this = this;\n        var blocks = blockMap.toArray();\n        if (!blocks.every(function(block) {\n            return _this.isValidBlock(block, blockMap);\n        })) {\n            return false;\n        }\n        return this.isConnectedTree(blockMap);\n    }\n};\nmodule.exports = DraftTreeInvariants;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftTreeInvariants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/EditorBidiService.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/EditorBidiService.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeBidiService = __webpack_require__(/*! fbjs/lib/UnicodeBidiService */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidiService.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar OrderedMap = Immutable.OrderedMap;\nvar bidiService;\nvar EditorBidiService = {\n    getDirectionMap: function getDirectionMap(content, prevBidiMap) {\n        if (!bidiService) {\n            bidiService = new UnicodeBidiService();\n        } else {\n            bidiService.reset();\n        }\n        var blockMap = content.getBlockMap();\n        var nextBidi = blockMap.valueSeq().map(function(block) {\n            return nullthrows(bidiService).getDirection(block.getText());\n        });\n        var bidiMap = OrderedMap(blockMap.keySeq().zip(nextBidi));\n        if (prevBidiMap != null && Immutable.is(prevBidiMap, bidiMap)) {\n            return prevBidiMap;\n        }\n        return bidiMap;\n    }\n};\nmodule.exports = EditorBidiService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0VkaXRvckJpZGlTZXJ2aWNlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEscUJBQXFCQyxtQkFBT0EsQ0FBQyx3RkFBNkI7QUFFOUQsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUUsYUFBYUYsbUJBQU9BLENBQUMsd0VBQXFCO0FBRTlDLElBQUlHLGFBQWFGLFVBQVVFLFVBQVU7QUFDckMsSUFBSUM7QUFDSixJQUFJQyxvQkFBb0I7SUFDdEJDLGlCQUFpQixTQUFTQSxnQkFBZ0JDLE9BQU8sRUFBRUMsV0FBVztRQUM1RCxJQUFJLENBQUNKLGFBQWE7WUFDaEJBLGNBQWMsSUFBSUw7UUFDcEIsT0FBTztZQUNMSyxZQUFZSyxLQUFLO1FBQ25CO1FBRUEsSUFBSUMsV0FBV0gsUUFBUUksV0FBVztRQUNsQyxJQUFJQyxXQUFXRixTQUFTRyxRQUFRLEdBQUdDLEdBQUcsQ0FBQyxTQUFVQyxLQUFLO1lBQ3BELE9BQU9iLFdBQVdFLGFBQWFZLFlBQVksQ0FBQ0QsTUFBTUUsT0FBTztRQUMzRDtRQUNBLElBQUlDLFVBQVVmLFdBQVdPLFNBQVNTLE1BQU0sR0FBR0MsR0FBRyxDQUFDUjtRQUUvQyxJQUFJSixlQUFlLFFBQVFQLFVBQVVvQixFQUFFLENBQUNiLGFBQWFVLFVBQVU7WUFDN0QsT0FBT1Y7UUFDVDtRQUVBLE9BQU9VO0lBQ1Q7QUFDRjtBQUNBSSxPQUFPQyxPQUFPLEdBQUdsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRWRpdG9yQmlkaVNlcnZpY2UuanM/ZWVlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVW5pY29kZUJpZGlTZXJ2aWNlID0gcmVxdWlyZShcImZianMvbGliL1VuaWNvZGVCaWRpU2VydmljZVwiKTtcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZShcImZianMvbGliL251bGx0aHJvd3NcIik7XG5cbnZhciBPcmRlcmVkTWFwID0gSW1tdXRhYmxlLk9yZGVyZWRNYXA7XG52YXIgYmlkaVNlcnZpY2U7XG52YXIgRWRpdG9yQmlkaVNlcnZpY2UgPSB7XG4gIGdldERpcmVjdGlvbk1hcDogZnVuY3Rpb24gZ2V0RGlyZWN0aW9uTWFwKGNvbnRlbnQsIHByZXZCaWRpTWFwKSB7XG4gICAgaWYgKCFiaWRpU2VydmljZSkge1xuICAgICAgYmlkaVNlcnZpY2UgPSBuZXcgVW5pY29kZUJpZGlTZXJ2aWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJpZGlTZXJ2aWNlLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgdmFyIGJsb2NrTWFwID0gY29udGVudC5nZXRCbG9ja01hcCgpO1xuICAgIHZhciBuZXh0QmlkaSA9IGJsb2NrTWFwLnZhbHVlU2VxKCkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIG51bGx0aHJvd3MoYmlkaVNlcnZpY2UpLmdldERpcmVjdGlvbihibG9jay5nZXRUZXh0KCkpO1xuICAgIH0pO1xuICAgIHZhciBiaWRpTWFwID0gT3JkZXJlZE1hcChibG9ja01hcC5rZXlTZXEoKS56aXAobmV4dEJpZGkpKTtcblxuICAgIGlmIChwcmV2QmlkaU1hcCAhPSBudWxsICYmIEltbXV0YWJsZS5pcyhwcmV2QmlkaU1hcCwgYmlkaU1hcCkpIHtcbiAgICAgIHJldHVybiBwcmV2QmlkaU1hcDtcbiAgICB9XG5cbiAgICByZXR1cm4gYmlkaU1hcDtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gRWRpdG9yQmlkaVNlcnZpY2U7Il0sIm5hbWVzIjpbIlVuaWNvZGVCaWRpU2VydmljZSIsInJlcXVpcmUiLCJJbW11dGFibGUiLCJudWxsdGhyb3dzIiwiT3JkZXJlZE1hcCIsImJpZGlTZXJ2aWNlIiwiRWRpdG9yQmlkaVNlcnZpY2UiLCJnZXREaXJlY3Rpb25NYXAiLCJjb250ZW50IiwicHJldkJpZGlNYXAiLCJyZXNldCIsImJsb2NrTWFwIiwiZ2V0QmxvY2tNYXAiLCJuZXh0QmlkaSIsInZhbHVlU2VxIiwibWFwIiwiYmxvY2siLCJnZXREaXJlY3Rpb24iLCJnZXRUZXh0IiwiYmlkaU1hcCIsImtleVNlcSIsInppcCIsImlzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/EditorBidiService.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/EditorState.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/EditorState.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar BlockTree = __webpack_require__(/*! ./BlockTree */ \"(ssr)/./node_modules/draft-js/lib/BlockTree.js\");\nvar ContentState = __webpack_require__(/*! ./ContentState */ \"(ssr)/./node_modules/draft-js/lib/ContentState.js\");\nvar EditorBidiService = __webpack_require__(/*! ./EditorBidiService */ \"(ssr)/./node_modules/draft-js/lib/EditorBidiService.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar OrderedSet = Immutable.OrderedSet, Record = Immutable.Record, Stack = Immutable.Stack, OrderedMap = Immutable.OrderedMap, List = Immutable.List; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\nvar defaultRecord = {\n    allowUndo: true,\n    currentContent: null,\n    decorator: null,\n    directionMap: null,\n    forceSelection: false,\n    inCompositionMode: false,\n    inlineStyleOverride: null,\n    lastChangeType: null,\n    nativelyRenderedContent: null,\n    redoStack: Stack(),\n    selection: null,\n    treeMap: null,\n    undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\nvar EditorState = /*#__PURE__*/ function() {\n    EditorState.createEmpty = function createEmpty(decorator) {\n        return this.createWithText(\"\", decorator);\n    };\n    EditorState.createWithText = function createWithText(text, decorator) {\n        return EditorState.createWithContent(ContentState.createFromText(text), decorator);\n    };\n    EditorState.createWithContent = function createWithContent(contentState, decorator) {\n        if (contentState.getBlockMap().count() === 0) {\n            return EditorState.createEmpty(decorator);\n        }\n        var firstKey = contentState.getBlockMap().first().getKey();\n        return EditorState.create({\n            currentContent: contentState,\n            undoStack: Stack(),\n            redoStack: Stack(),\n            decorator: decorator || null,\n            selection: SelectionState.createEmpty(firstKey)\n        });\n    };\n    EditorState.create = function create(config) {\n        var currentContent = config.currentContent, decorator = config.decorator;\n        var recordConfig = _objectSpread({}, config, {\n            treeMap: generateNewTreeMap(currentContent, decorator),\n            directionMap: EditorBidiService.getDirectionMap(currentContent)\n        });\n        return new EditorState(new EditorStateRecord(recordConfig));\n    };\n    EditorState.fromJS = function fromJS(config) {\n        return new EditorState(new EditorStateRecord(_objectSpread({}, config, {\n            directionMap: config.directionMap != null ? OrderedMap(config.directionMap) : config.directionMap,\n            inlineStyleOverride: config.inlineStyleOverride != null ? OrderedSet(config.inlineStyleOverride) : config.inlineStyleOverride,\n            nativelyRenderedContent: config.nativelyRenderedContent != null ? ContentState.fromJS(config.nativelyRenderedContent) : config.nativelyRenderedContent,\n            redoStack: config.redoStack != null ? Stack(config.redoStack.map(function(v) {\n                return ContentState.fromJS(v);\n            })) : config.redoStack,\n            selection: config.selection != null ? new SelectionState(config.selection) : config.selection,\n            treeMap: config.treeMap != null ? OrderedMap(config.treeMap).map(function(v) {\n                return List(v).map(function(v) {\n                    return BlockTree.fromJS(v);\n                });\n            }) : config.treeMap,\n            undoStack: config.undoStack != null ? Stack(config.undoStack.map(function(v) {\n                return ContentState.fromJS(v);\n            })) : config.undoStack,\n            currentContent: ContentState.fromJS(config.currentContent)\n        })));\n    };\n    EditorState.set = function set(editorState, put) {\n        var map = editorState.getImmutable().withMutations(function(state) {\n            var existingDecorator = state.get(\"decorator\");\n            var decorator = existingDecorator;\n            if (put.decorator === null) {\n                decorator = null;\n            } else if (put.decorator) {\n                decorator = put.decorator;\n            }\n            var newContent = put.currentContent || editorState.getCurrentContent();\n            if (decorator !== existingDecorator) {\n                var treeMap = state.get(\"treeMap\");\n                var newTreeMap;\n                if (decorator && existingDecorator) {\n                    newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n                } else {\n                    newTreeMap = generateNewTreeMap(newContent, decorator);\n                }\n                state.merge({\n                    decorator: decorator,\n                    treeMap: newTreeMap,\n                    nativelyRenderedContent: null\n                });\n                return;\n            }\n            var existingContent = editorState.getCurrentContent();\n            if (newContent !== existingContent) {\n                state.set(\"treeMap\", regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n            }\n            state.merge(put);\n        });\n        return new EditorState(map);\n    };\n    var _proto = EditorState.prototype;\n    _proto.toJS = function toJS() {\n        return this.getImmutable().toJS();\n    };\n    _proto.getAllowUndo = function getAllowUndo() {\n        return this.getImmutable().get(\"allowUndo\");\n    };\n    _proto.getCurrentContent = function getCurrentContent() {\n        return this.getImmutable().get(\"currentContent\");\n    };\n    _proto.getUndoStack = function getUndoStack() {\n        return this.getImmutable().get(\"undoStack\");\n    };\n    _proto.getRedoStack = function getRedoStack() {\n        return this.getImmutable().get(\"redoStack\");\n    };\n    _proto.getSelection = function getSelection() {\n        return this.getImmutable().get(\"selection\");\n    };\n    _proto.getDecorator = function getDecorator() {\n        return this.getImmutable().get(\"decorator\");\n    };\n    _proto.isInCompositionMode = function isInCompositionMode() {\n        return this.getImmutable().get(\"inCompositionMode\");\n    };\n    _proto.mustForceSelection = function mustForceSelection() {\n        return this.getImmutable().get(\"forceSelection\");\n    };\n    _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n        return this.getImmutable().get(\"nativelyRenderedContent\");\n    };\n    _proto.getLastChangeType = function getLastChangeType() {\n        return this.getImmutable().get(\"lastChangeType\");\n    } /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */ ;\n    _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n        return this.getImmutable().get(\"inlineStyleOverride\");\n    };\n    EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n        return EditorState.set(editorState, {\n            inlineStyleOverride: inlineStyleOverride\n        });\n    } /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */ ;\n    _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n        var override = this.getInlineStyleOverride();\n        if (override != null) {\n            return override;\n        }\n        var content = this.getCurrentContent();\n        var selection = this.getSelection();\n        if (selection.isCollapsed()) {\n            return getInlineStyleForCollapsedSelection(content, selection);\n        }\n        return getInlineStyleForNonCollapsedSelection(content, selection);\n    };\n    _proto.getBlockTree = function getBlockTree(blockKey) {\n        return this.getImmutable().getIn([\n            \"treeMap\",\n            blockKey\n        ]);\n    };\n    _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n        var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n        return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n    };\n    _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n        var content = this.getCurrentContent();\n        var blockMap = content.getBlockMap();\n        var last = blockMap.last();\n        var end = last.getLength();\n        return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n    };\n    _proto.getDirectionMap = function getDirectionMap() {\n        return this.getImmutable().get(\"directionMap\");\n    } /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */ ;\n    EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n        return updateSelection(editorState, selection, false);\n    } /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */ ;\n    EditorState.forceSelection = function forceSelection(editorState, selection) {\n        if (!selection.getHasFocus()) {\n            selection = selection.set(\"hasFocus\", true);\n        }\n        return updateSelection(editorState, selection, true);\n    } /**\n   * Move selection to the end of the editor without forcing focus.\n   */ ;\n    EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n        var content = editorState.getCurrentContent();\n        var lastBlock = content.getLastBlock();\n        var lastKey = lastBlock.getKey();\n        var length = lastBlock.getLength();\n        return EditorState.acceptSelection(editorState, new SelectionState({\n            anchorKey: lastKey,\n            anchorOffset: length,\n            focusKey: lastKey,\n            focusOffset: length,\n            isBackward: false\n        }));\n    } /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */ ;\n    EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n        var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n        return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n    } /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */ ;\n    EditorState.push = function push(editorState, contentState, changeType) {\n        var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        if (editorState.getCurrentContent() === contentState) {\n            return editorState;\n        }\n        var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n        if (!editorState.getAllowUndo()) {\n            return EditorState.set(editorState, {\n                currentContent: contentState,\n                directionMap: directionMap,\n                lastChangeType: changeType,\n                selection: contentState.getSelectionAfter(),\n                forceSelection: forceSelection,\n                inlineStyleOverride: null\n            });\n        }\n        var selection = editorState.getSelection();\n        var currentContent = editorState.getCurrentContent();\n        var undoStack = editorState.getUndoStack();\n        var newContent = contentState;\n        if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n            undoStack = undoStack.push(currentContent);\n            newContent = newContent.set(\"selectionBefore\", selection);\n        } else if (changeType === \"insert-characters\" || changeType === \"backspace-character\" || changeType === \"delete-character\") {\n            // Preserve the previous selection.\n            newContent = newContent.set(\"selectionBefore\", currentContent.getSelectionBefore());\n        }\n        var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n        var overrideChangeTypes = [\n            \"adjust-depth\",\n            \"change-block-type\",\n            \"split-block\"\n        ];\n        if (overrideChangeTypes.indexOf(changeType) === -1) {\n            inlineStyleOverride = null;\n        }\n        var editorStateChanges = {\n            currentContent: newContent,\n            directionMap: directionMap,\n            undoStack: undoStack,\n            redoStack: Stack(),\n            lastChangeType: changeType,\n            selection: contentState.getSelectionAfter(),\n            forceSelection: forceSelection,\n            inlineStyleOverride: inlineStyleOverride\n        };\n        return EditorState.set(editorState, editorStateChanges);\n    } /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */ ;\n    EditorState.undo = function undo(editorState) {\n        if (!editorState.getAllowUndo()) {\n            return editorState;\n        }\n        var undoStack = editorState.getUndoStack();\n        var newCurrentContent = undoStack.peek();\n        if (!newCurrentContent) {\n            return editorState;\n        }\n        var currentContent = editorState.getCurrentContent();\n        var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n        return EditorState.set(editorState, {\n            currentContent: newCurrentContent,\n            directionMap: directionMap,\n            undoStack: undoStack.shift(),\n            redoStack: editorState.getRedoStack().push(currentContent),\n            forceSelection: true,\n            inlineStyleOverride: null,\n            lastChangeType: \"undo\",\n            nativelyRenderedContent: null,\n            selection: currentContent.getSelectionBefore()\n        });\n    } /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */ ;\n    EditorState.redo = function redo(editorState) {\n        if (!editorState.getAllowUndo()) {\n            return editorState;\n        }\n        var redoStack = editorState.getRedoStack();\n        var newCurrentContent = redoStack.peek();\n        if (!newCurrentContent) {\n            return editorState;\n        }\n        var currentContent = editorState.getCurrentContent();\n        var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n        return EditorState.set(editorState, {\n            currentContent: newCurrentContent,\n            directionMap: directionMap,\n            undoStack: editorState.getUndoStack().push(currentContent),\n            redoStack: redoStack.shift(),\n            forceSelection: true,\n            inlineStyleOverride: null,\n            lastChangeType: \"redo\",\n            nativelyRenderedContent: null,\n            selection: newCurrentContent.getSelectionAfter()\n        });\n    } /**\n   * Not for public consumption.\n   */ ;\n    function EditorState(immutable) {\n        _defineProperty(this, \"_immutable\", void 0);\n        this._immutable = immutable;\n    }\n    /**\n   * Not for public consumption.\n   */ _proto.getImmutable = function getImmutable() {\n        return this._immutable;\n    };\n    return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */ function updateSelection(editorState, selection, forceSelection) {\n    return EditorState.set(editorState, {\n        selection: selection,\n        forceSelection: forceSelection,\n        nativelyRenderedContent: null,\n        inlineStyleOverride: null\n    });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */ function generateNewTreeMap(contentState, decorator) {\n    return contentState.getBlockMap().map(function(block) {\n        return BlockTree.generate(contentState, block, decorator);\n    }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */ function regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n    var contentState = editorState.getCurrentContent().set(\"entityMap\", newEntityMap);\n    var prevBlockMap = contentState.getBlockMap();\n    var prevTreeMap = editorState.getImmutable().get(\"treeMap\");\n    return prevTreeMap.merge(newBlockMap.toSeq().filter(function(block, key) {\n        return block !== prevBlockMap.get(key);\n    }).map(function(block) {\n        return BlockTree.generate(contentState, block, decorator);\n    }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */ function regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n    return previousTreeMap.merge(blockMap.toSeq().filter(function(block) {\n        return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n    }).map(function(block) {\n        return BlockTree.generate(content, block, decorator);\n    }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */ function mustBecomeBoundary(editorState, changeType) {\n    var lastChangeType = editorState.getLastChangeType();\n    return changeType !== lastChangeType || changeType !== \"insert-characters\" && changeType !== \"backspace-character\" && changeType !== \"delete-character\";\n}\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n    var startKey = selection.getStartKey();\n    var startOffset = selection.getStartOffset();\n    var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n    // preserve the style of the preceding character.\n    if (startOffset > 0) {\n        return startBlock.getInlineStyleAt(startOffset - 1);\n    } // The caret is at position zero in this block. If the block has any\n    // text at all, use the style of the first character.\n    if (startBlock.getLength()) {\n        return startBlock.getInlineStyleAt(0);\n    } // Otherwise, look upward in the document to find the closest character.\n    return lookUpwardForInlineStyle(content, startKey);\n}\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n    var startKey = selection.getStartKey();\n    var startOffset = selection.getStartOffset();\n    var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n    if (startOffset < startBlock.getLength()) {\n        return startBlock.getInlineStyleAt(startOffset);\n    } // Check if the selection at the end of a non-empty block. Use the last\n    // style in the block.\n    if (startOffset > 0) {\n        return startBlock.getInlineStyleAt(startOffset - 1);\n    } // Otherwise, look upward in the document to find the closest character.\n    return lookUpwardForInlineStyle(content, startKey);\n}\nfunction lookUpwardForInlineStyle(content, fromKey) {\n    var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function(_, k) {\n        return k === fromKey;\n    }).skip(1).skipUntil(function(block, _) {\n        return block.getLength();\n    }).first();\n    if (lastNonEmpty) {\n        return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n    }\n    return OrderedSet();\n}\nmodule.exports = EditorState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/EditorState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/KeyBindingUtil.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar isSoftNewlineEvent = __webpack_require__(/*! ./isSoftNewlineEvent */ \"(ssr)/./node_modules/draft-js/lib/isSoftNewlineEvent.js\");\nvar isOSX = UserAgent.isPlatform(\"Mac OS X\");\nvar KeyBindingUtil = {\n    /**\n   * Check whether the ctrlKey modifier is *not* being used in conjunction with\n   * the altKey modifier. If they are combined, the result is an `altGraph`\n   * key modifier, which should not be handled by this set of key bindings.\n   */ isCtrlKeyCommand: function isCtrlKeyCommand(e) {\n        return !!e.ctrlKey && !e.altKey;\n    },\n    isOptionKeyCommand: function isOptionKeyCommand(e) {\n        return isOSX && e.altKey;\n    },\n    usesMacOSHeuristics: function usesMacOSHeuristics() {\n        return isOSX;\n    },\n    hasCommandModifier: function hasCommandModifier(e) {\n        return isOSX ? !!e.metaKey && !e.altKey : KeyBindingUtil.isCtrlKeyCommand(e);\n    },\n    isSoftNewlineEvent: isSoftNewlineEvent\n};\nmodule.exports = KeyBindingUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0tleUJpbmRpbmdVdGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlDLHFCQUFxQkQsbUJBQU9BLENBQUMscUZBQXNCO0FBRXZELElBQUlFLFFBQVFILFVBQVVJLFVBQVUsQ0FBQztBQUNqQyxJQUFJQyxpQkFBaUI7SUFDbkI7Ozs7R0FJQyxHQUNEQyxrQkFBa0IsU0FBU0EsaUJBQWlCQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxDQUFDQSxFQUFFQyxPQUFPLElBQUksQ0FBQ0QsRUFBRUUsTUFBTTtJQUNqQztJQUNBQyxvQkFBb0IsU0FBU0EsbUJBQW1CSCxDQUFDO1FBQy9DLE9BQU9KLFNBQVNJLEVBQUVFLE1BQU07SUFDMUI7SUFDQUUscUJBQXFCLFNBQVNBO1FBQzVCLE9BQU9SO0lBQ1Q7SUFDQVMsb0JBQW9CLFNBQVNBLG1CQUFtQkwsQ0FBQztRQUMvQyxPQUFPSixRQUFRLENBQUMsQ0FBQ0ksRUFBRU0sT0FBTyxJQUFJLENBQUNOLEVBQUVFLE1BQU0sR0FBR0osZUFBZUMsZ0JBQWdCLENBQUNDO0lBQzVFO0lBQ0FMLG9CQUFvQkE7QUFDdEI7QUFDQVksT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvS2V5QmluZGluZ1V0aWwuanM/YmZkOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVXNlckFnZW50ID0gcmVxdWlyZShcImZianMvbGliL1VzZXJBZ2VudFwiKTtcblxudmFyIGlzU29mdE5ld2xpbmVFdmVudCA9IHJlcXVpcmUoXCIuL2lzU29mdE5ld2xpbmVFdmVudFwiKTtcblxudmFyIGlzT1NYID0gVXNlckFnZW50LmlzUGxhdGZvcm0oJ01hYyBPUyBYJyk7XG52YXIgS2V5QmluZGluZ1V0aWwgPSB7XG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIHRoZSBjdHJsS2V5IG1vZGlmaWVyIGlzICpub3QqIGJlaW5nIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aFxuICAgKiB0aGUgYWx0S2V5IG1vZGlmaWVyLiBJZiB0aGV5IGFyZSBjb21iaW5lZCwgdGhlIHJlc3VsdCBpcyBhbiBgYWx0R3JhcGhgXG4gICAqIGtleSBtb2RpZmllciwgd2hpY2ggc2hvdWxkIG5vdCBiZSBoYW5kbGVkIGJ5IHRoaXMgc2V0IG9mIGtleSBiaW5kaW5ncy5cbiAgICovXG4gIGlzQ3RybEtleUNvbW1hbmQ6IGZ1bmN0aW9uIGlzQ3RybEtleUNvbW1hbmQoZSkge1xuICAgIHJldHVybiAhIWUuY3RybEtleSAmJiAhZS5hbHRLZXk7XG4gIH0sXG4gIGlzT3B0aW9uS2V5Q29tbWFuZDogZnVuY3Rpb24gaXNPcHRpb25LZXlDb21tYW5kKGUpIHtcbiAgICByZXR1cm4gaXNPU1ggJiYgZS5hbHRLZXk7XG4gIH0sXG4gIHVzZXNNYWNPU0hldXJpc3RpY3M6IGZ1bmN0aW9uIHVzZXNNYWNPU0hldXJpc3RpY3MoKSB7XG4gICAgcmV0dXJuIGlzT1NYO1xuICB9LFxuICBoYXNDb21tYW5kTW9kaWZpZXI6IGZ1bmN0aW9uIGhhc0NvbW1hbmRNb2RpZmllcihlKSB7XG4gICAgcmV0dXJuIGlzT1NYID8gISFlLm1ldGFLZXkgJiYgIWUuYWx0S2V5IDogS2V5QmluZGluZ1V0aWwuaXNDdHJsS2V5Q29tbWFuZChlKTtcbiAgfSxcbiAgaXNTb2Z0TmV3bGluZUV2ZW50OiBpc1NvZnROZXdsaW5lRXZlbnRcbn07XG5tb2R1bGUuZXhwb3J0cyA9IEtleUJpbmRpbmdVdGlsOyJdLCJuYW1lcyI6WyJVc2VyQWdlbnQiLCJyZXF1aXJlIiwiaXNTb2Z0TmV3bGluZUV2ZW50IiwiaXNPU1giLCJpc1BsYXRmb3JtIiwiS2V5QmluZGluZ1V0aWwiLCJpc0N0cmxLZXlDb21tYW5kIiwiZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJpc09wdGlvbktleUNvbW1hbmQiLCJ1c2VzTWFjT1NIZXVyaXN0aWNzIiwiaGFzQ29tbWFuZE1vZGlmaWVyIiwibWV0YUtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/RawDraftContentState.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/RawDraftContentState.js ***!
  \***********************************************************/
/***/ (() => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1Jhd0RyYWZ0Q29udGVudFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9SYXdEcmFmdENvbnRlbnRTdGF0ZS5qcz8wMmJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/RawDraftContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/RichTextEditorUtil.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar adjustBlockDepthForContentState = __webpack_require__(/*! ./adjustBlockDepthForContentState */ \"(ssr)/./node_modules/draft-js/lib/adjustBlockDepthForContentState.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar RichTextEditorUtil = {\n    currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n        var selection = editorState.getSelection();\n        var contentState = editorState.getCurrentContent();\n        var entityMap = contentState.getEntityMap();\n        return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function(v) {\n            var entity = v.getEntity();\n            return !!entity && entityMap.__get(entity).getType() === \"LINK\";\n        });\n    },\n    getCurrentBlockType: function getCurrentBlockType(editorState) {\n        var selection = editorState.getSelection();\n        return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n    },\n    getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n        return {\n            url: uri.toString()\n        };\n    },\n    handleKeyCommand: function handleKeyCommand(editorState, command, eventTimeStamp) {\n        switch(command){\n            case \"bold\":\n                return RichTextEditorUtil.toggleInlineStyle(editorState, \"BOLD\");\n            case \"italic\":\n                return RichTextEditorUtil.toggleInlineStyle(editorState, \"ITALIC\");\n            case \"underline\":\n                return RichTextEditorUtil.toggleInlineStyle(editorState, \"UNDERLINE\");\n            case \"code\":\n                return RichTextEditorUtil.toggleCode(editorState);\n            case \"backspace\":\n            case \"backspace-word\":\n            case \"backspace-to-start-of-line\":\n                return RichTextEditorUtil.onBackspace(editorState);\n            case \"delete\":\n            case \"delete-word\":\n            case \"delete-to-end-of-block\":\n                return RichTextEditorUtil.onDelete(editorState);\n            default:\n                // they may have custom editor commands; ignore those\n                return null;\n        }\n    },\n    insertSoftNewline: function insertSoftNewline(editorState) {\n        var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), \"\\n\", editorState.getCurrentInlineStyle(), null);\n        var newEditorState = EditorState.push(editorState, contentState, \"insert-characters\");\n        return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n    },\n    /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */ onBackspace: function onBackspace(editorState) {\n        var selection = editorState.getSelection();\n        if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n            return null;\n        } // First, try to remove a preceding atomic block.\n        var content = editorState.getCurrentContent();\n        var startKey = selection.getStartKey();\n        var blockBefore = content.getBlockBefore(startKey);\n        if (blockBefore && blockBefore.getType() === \"atomic\") {\n            var blockMap = content.getBlockMap()[\"delete\"](blockBefore.getKey());\n            var withoutAtomicBlock = content.merge({\n                blockMap: blockMap,\n                selectionAfter: selection\n            });\n            if (withoutAtomicBlock !== content) {\n                return EditorState.push(editorState, withoutAtomicBlock, \"remove-range\");\n            }\n        } // If that doesn't succeed, try to remove the current block style.\n        var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n        if (withoutBlockStyle) {\n            return EditorState.push(editorState, withoutBlockStyle, \"change-block-type\");\n        }\n        return null;\n    },\n    onDelete: function onDelete(editorState) {\n        var selection = editorState.getSelection();\n        if (!selection.isCollapsed()) {\n            return null;\n        }\n        var content = editorState.getCurrentContent();\n        var startKey = selection.getStartKey();\n        var block = content.getBlockForKey(startKey);\n        var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.\n        if (selection.getStartOffset() < length) {\n            return null;\n        }\n        var blockAfter = content.getBlockAfter(startKey);\n        if (!blockAfter || blockAfter.getType() !== \"atomic\") {\n            return null;\n        }\n        var atomicBlockTarget = selection.merge({\n            focusKey: blockAfter.getKey(),\n            focusOffset: blockAfter.getLength()\n        });\n        var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, \"forward\");\n        if (withoutAtomicBlock !== content) {\n            return EditorState.push(editorState, withoutAtomicBlock, \"remove-range\");\n        }\n        return null;\n    },\n    onTab: function onTab(event, editorState, maxDepth) {\n        var selection = editorState.getSelection();\n        var key = selection.getAnchorKey();\n        if (key !== selection.getFocusKey()) {\n            return editorState;\n        }\n        var content = editorState.getCurrentContent();\n        var block = content.getBlockForKey(key);\n        var type = block.getType();\n        if (type !== \"unordered-list-item\" && type !== \"ordered-list-item\") {\n            return editorState;\n        }\n        event.preventDefault();\n        var depth = block.getDepth();\n        if (!event.shiftKey && depth === maxDepth) {\n            return editorState;\n        }\n        var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\n        return EditorState.push(editorState, withAdjustment, \"adjust-depth\");\n    },\n    toggleBlockType: function toggleBlockType(editorState, blockType) {\n        var selection = editorState.getSelection();\n        var startKey = selection.getStartKey();\n        var endKey = selection.getEndKey();\n        var content = editorState.getCurrentContent();\n        var target = selection; // Triple-click can lead to a selection that includes offset 0 of the\n        // following block. The `SelectionState` for this case is accurate, but\n        // we should avoid toggling block type for the trailing block because it\n        // is a confusing interaction.\n        if (startKey !== endKey && selection.getEndOffset() === 0) {\n            var blockBefore = nullthrows(content.getBlockBefore(endKey));\n            endKey = blockBefore.getKey();\n            target = target.merge({\n                anchorKey: startKey,\n                anchorOffset: selection.getStartOffset(),\n                focusKey: endKey,\n                focusOffset: blockBefore.getLength(),\n                isBackward: false\n            });\n        }\n        var hasAtomicBlock = content.getBlockMap().skipWhile(function(_, k) {\n            return k !== startKey;\n        }).reverse().skipWhile(function(_, k) {\n            return k !== endKey;\n        }).some(function(v) {\n            return v.getType() === \"atomic\";\n        });\n        if (hasAtomicBlock) {\n            return editorState;\n        }\n        var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? \"unstyled\" : blockType;\n        return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), \"change-block-type\");\n    },\n    toggleCode: function toggleCode(editorState) {\n        var selection = editorState.getSelection();\n        var anchorKey = selection.getAnchorKey();\n        var focusKey = selection.getFocusKey();\n        if (selection.isCollapsed() || anchorKey !== focusKey) {\n            return RichTextEditorUtil.toggleBlockType(editorState, \"code-block\");\n        }\n        return RichTextEditorUtil.toggleInlineStyle(editorState, \"CODE\");\n    },\n    /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */ toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n        var selection = editorState.getSelection();\n        var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and\n        // set the result as the new inline style override. This will then be\n        // used as the inline style for the next character to be inserted.\n        if (selection.isCollapsed()) {\n            return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n        } // If characters are selected, immediately apply or remove the\n        // inline style on the document state itself.\n        var content = editorState.getCurrentContent();\n        var newContent; // If the style is already present for the selection range, remove it.\n        // Otherwise, apply it.\n        if (currentStyle.has(inlineStyle)) {\n            newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n        } else {\n            newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n        }\n        return EditorState.push(editorState, newContent, \"change-inline-style\");\n    },\n    toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n        var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n        return EditorState.push(editorState, withoutLink, \"apply-entity\");\n    },\n    /**\n   * When a collapsed cursor is at the start of a styled block, changes block\n   * type to 'unstyled'. Returns null if selection does not meet that criteria.\n   */ tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n        var selection = editorState.getSelection();\n        var offset = selection.getAnchorOffset();\n        if (selection.isCollapsed() && offset === 0) {\n            var key = selection.getAnchorKey();\n            var content = editorState.getCurrentContent();\n            var block = content.getBlockForKey(key);\n            var type = block.getType();\n            var blockBefore = content.getBlockBefore(key);\n            if (type === \"code-block\" && blockBefore && blockBefore.getType() === \"code-block\" && blockBefore.getLength() !== 0) {\n                return null;\n            }\n            if (type !== \"unstyled\") {\n                return DraftModifier.setBlockType(content, selection, \"unstyled\");\n            }\n        }\n        return null;\n    }\n};\nmodule.exports = RichTextEditorUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/SecondaryClipboard.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/SecondaryClipboard.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar clipboard = null;\n/**\n * Some systems offer a \"secondary\" clipboard to allow quick internal cut\n * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).\n */ var SecondaryClipboard = {\n    cut: function cut(editorState) {\n        var content = editorState.getCurrentContent();\n        var selection = editorState.getSelection();\n        var targetRange = null;\n        if (selection.isCollapsed()) {\n            var anchorKey = selection.getAnchorKey();\n            var blockEnd = content.getBlockForKey(anchorKey).getLength();\n            if (blockEnd === selection.getAnchorOffset()) {\n                var keyAfter = content.getKeyAfter(anchorKey);\n                if (keyAfter == null) {\n                    return editorState;\n                }\n                targetRange = selection.set(\"focusKey\", keyAfter).set(\"focusOffset\", 0);\n            } else {\n                targetRange = selection.set(\"focusOffset\", blockEnd);\n            }\n        } else {\n            targetRange = selection;\n        }\n        targetRange = nullthrows(targetRange); // TODO: This should actually append to the current state when doing\n        // successive ^K commands without any other cursor movement\n        clipboard = getContentStateFragment(content, targetRange);\n        var afterRemoval = DraftModifier.removeRange(content, targetRange, \"forward\");\n        if (afterRemoval === content) {\n            return editorState;\n        }\n        return EditorState.push(editorState, afterRemoval, \"remove-range\");\n    },\n    paste: function paste(editorState) {\n        if (!clipboard) {\n            return editorState;\n        }\n        var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), clipboard);\n        return EditorState.push(editorState, newContent, \"insert-fragment\");\n    }\n};\nmodule.exports = SecondaryClipboard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1NlY29uZGFyeUNsaXBib2FyZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGdCQUFnQkMsbUJBQU9BLENBQUMsMkVBQWlCO0FBRTdDLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlFLDBCQUEwQkYsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUlHLGFBQWFILG1CQUFPQSxDQUFDLHdFQUFxQjtBQUU5QyxJQUFJSSxZQUFZO0FBQ2hCOzs7Q0FHQyxHQUVELElBQUlDLHFCQUFxQjtJQUN2QkMsS0FBSyxTQUFTQSxJQUFJQyxXQUFXO1FBQzNCLElBQUlDLFVBQVVELFlBQVlFLGlCQUFpQjtRQUMzQyxJQUFJQyxZQUFZSCxZQUFZSSxZQUFZO1FBQ3hDLElBQUlDLGNBQWM7UUFFbEIsSUFBSUYsVUFBVUcsV0FBVyxJQUFJO1lBQzNCLElBQUlDLFlBQVlKLFVBQVVLLFlBQVk7WUFDdEMsSUFBSUMsV0FBV1IsUUFBUVMsY0FBYyxDQUFDSCxXQUFXSSxTQUFTO1lBRTFELElBQUlGLGFBQWFOLFVBQVVTLGVBQWUsSUFBSTtnQkFDNUMsSUFBSUMsV0FBV1osUUFBUWEsV0FBVyxDQUFDUDtnQkFFbkMsSUFBSU0sWUFBWSxNQUFNO29CQUNwQixPQUFPYjtnQkFDVDtnQkFFQUssY0FBY0YsVUFBVVksR0FBRyxDQUFDLFlBQVlGLFVBQVVFLEdBQUcsQ0FBQyxlQUFlO1lBQ3ZFLE9BQU87Z0JBQ0xWLGNBQWNGLFVBQVVZLEdBQUcsQ0FBQyxlQUFlTjtZQUM3QztRQUNGLE9BQU87WUFDTEosY0FBY0Y7UUFDaEI7UUFFQUUsY0FBY1QsV0FBV1MsY0FBYyxvRUFBb0U7UUFDM0csMkRBQTJEO1FBRTNEUixZQUFZRix3QkFBd0JNLFNBQVNJO1FBQzdDLElBQUlXLGVBQWV4QixjQUFjeUIsV0FBVyxDQUFDaEIsU0FBU0ksYUFBYTtRQUVuRSxJQUFJVyxpQkFBaUJmLFNBQVM7WUFDNUIsT0FBT0Q7UUFDVDtRQUVBLE9BQU9OLFlBQVl3QixJQUFJLENBQUNsQixhQUFhZ0IsY0FBYztJQUNyRDtJQUNBRyxPQUFPLFNBQVNBLE1BQU1uQixXQUFXO1FBQy9CLElBQUksQ0FBQ0gsV0FBVztZQUNkLE9BQU9HO1FBQ1Q7UUFFQSxJQUFJb0IsYUFBYTVCLGNBQWM2QixtQkFBbUIsQ0FBQ3JCLFlBQVlFLGlCQUFpQixJQUFJRixZQUFZSSxZQUFZLElBQUlQO1FBQ2hILE9BQU9ILFlBQVl3QixJQUFJLENBQUNsQixhQUFhb0IsWUFBWTtJQUNuRDtBQUNGO0FBQ0FFLE9BQU9DLE9BQU8sR0FBR3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9TZWNvbmRhcnlDbGlwYm9hcmQuanM/OTM0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoXCIuL0RyYWZ0TW9kaWZpZXJcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQgPSByZXF1aXJlKFwiLi9nZXRDb250ZW50U3RhdGVGcmFnbWVudFwiKTtcblxudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKFwiZmJqcy9saWIvbnVsbHRocm93c1wiKTtcblxudmFyIGNsaXBib2FyZCA9IG51bGw7XG4vKipcbiAqIFNvbWUgc3lzdGVtcyBvZmZlciBhIFwic2Vjb25kYXJ5XCIgY2xpcGJvYXJkIHRvIGFsbG93IHF1aWNrIGludGVybmFsIGN1dFxuICogYW5kIHBhc3RlIGJlaGF2aW9yLiBGb3IgaW5zdGFuY2UsIEN0cmwrSyAoY3V0KSBhbmQgQ3RybCtZIChwYXN0ZSkuXG4gKi9cblxudmFyIFNlY29uZGFyeUNsaXBib2FyZCA9IHtcbiAgY3V0OiBmdW5jdGlvbiBjdXQoZWRpdG9yU3RhdGUpIHtcbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciB0YXJnZXRSYW5nZSA9IG51bGw7XG5cbiAgICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgIHZhciBhbmNob3JLZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gICAgICB2YXIgYmxvY2tFbmQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGFuY2hvcktleSkuZ2V0TGVuZ3RoKCk7XG5cbiAgICAgIGlmIChibG9ja0VuZCA9PT0gc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpKSB7XG4gICAgICAgIHZhciBrZXlBZnRlciA9IGNvbnRlbnQuZ2V0S2V5QWZ0ZXIoYW5jaG9yS2V5KTtcblxuICAgICAgICBpZiAoa2V5QWZ0ZXIgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFJhbmdlID0gc2VsZWN0aW9uLnNldCgnZm9jdXNLZXknLCBrZXlBZnRlcikuc2V0KCdmb2N1c09mZnNldCcsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb24uc2V0KCdmb2N1c09mZnNldCcsIGJsb2NrRW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb247XG4gICAgfVxuXG4gICAgdGFyZ2V0UmFuZ2UgPSBudWxsdGhyb3dzKHRhcmdldFJhbmdlKTsgLy8gVE9ETzogVGhpcyBzaG91bGQgYWN0dWFsbHkgYXBwZW5kIHRvIHRoZSBjdXJyZW50IHN0YXRlIHdoZW4gZG9pbmdcbiAgICAvLyBzdWNjZXNzaXZlIF5LIGNvbW1hbmRzIHdpdGhvdXQgYW55IG90aGVyIGN1cnNvciBtb3ZlbWVudFxuXG4gICAgY2xpcGJvYXJkID0gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQoY29udGVudCwgdGFyZ2V0UmFuZ2UpO1xuICAgIHZhciBhZnRlclJlbW92YWwgPSBEcmFmdE1vZGlmaWVyLnJlbW92ZVJhbmdlKGNvbnRlbnQsIHRhcmdldFJhbmdlLCAnZm9yd2FyZCcpO1xuXG4gICAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gY29udGVudCkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwsICdyZW1vdmUtcmFuZ2UnKTtcbiAgfSxcbiAgcGFzdGU6IGZ1bmN0aW9uIHBhc3RlKGVkaXRvclN0YXRlKSB7XG4gICAgaWYgKCFjbGlwYm9hcmQpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Q29udGVudCA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVdpdGhGcmFnbWVudChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgY2xpcGJvYXJkKTtcbiAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgbmV3Q29udGVudCwgJ2luc2VydC1mcmFnbWVudCcpO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBTZWNvbmRhcnlDbGlwYm9hcmQ7Il0sIm5hbWVzIjpbIkRyYWZ0TW9kaWZpZXIiLCJyZXF1aXJlIiwiRWRpdG9yU3RhdGUiLCJnZXRDb250ZW50U3RhdGVGcmFnbWVudCIsIm51bGx0aHJvd3MiLCJjbGlwYm9hcmQiLCJTZWNvbmRhcnlDbGlwYm9hcmQiLCJjdXQiLCJlZGl0b3JTdGF0ZSIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInRhcmdldFJhbmdlIiwiaXNDb2xsYXBzZWQiLCJhbmNob3JLZXkiLCJnZXRBbmNob3JLZXkiLCJibG9ja0VuZCIsImdldEJsb2NrRm9yS2V5IiwiZ2V0TGVuZ3RoIiwiZ2V0QW5jaG9yT2Zmc2V0Iiwia2V5QWZ0ZXIiLCJnZXRLZXlBZnRlciIsInNldCIsImFmdGVyUmVtb3ZhbCIsInJlbW92ZVJhbmdlIiwicHVzaCIsInBhc3RlIiwibmV3Q29udGVudCIsInJlcGxhY2VXaXRoRnJhZ21lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/SecondaryClipboard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/SelectionState.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/SelectionState.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar Record = Immutable.Record;\nvar defaultRecord = {\n    anchorKey: \"\",\n    anchorOffset: 0,\n    focusKey: \"\",\n    focusOffset: 0,\n    isBackward: false,\n    hasFocus: false\n};\n/* $FlowFixMe[unclear-type] This comment suppresses an error found when\n * automatically adding a type annotation with the codemod Komodo/Annotate_\n * exports. To see the error delete this comment and run Flow. */ var SelectionStateRecord = Record(defaultRecord);\nvar SelectionState = /*#__PURE__*/ function(_SelectionStateRecord) {\n    _inheritsLoose(SelectionState, _SelectionStateRecord);\n    function SelectionState() {\n        return _SelectionStateRecord.apply(this, arguments) || this;\n    }\n    var _proto = SelectionState.prototype;\n    _proto.serialize = function serialize() {\n        return \"Anchor: \" + this.getAnchorKey() + \":\" + this.getAnchorOffset() + \", \" + \"Focus: \" + this.getFocusKey() + \":\" + this.getFocusOffset() + \", \" + \"Is Backward: \" + String(this.getIsBackward()) + \", \" + \"Has Focus: \" + String(this.getHasFocus());\n    };\n    _proto.getAnchorKey = function getAnchorKey() {\n        return this.get(\"anchorKey\");\n    };\n    _proto.getAnchorOffset = function getAnchorOffset() {\n        return this.get(\"anchorOffset\");\n    };\n    _proto.getFocusKey = function getFocusKey() {\n        return this.get(\"focusKey\");\n    };\n    _proto.getFocusOffset = function getFocusOffset() {\n        return this.get(\"focusOffset\");\n    };\n    _proto.getIsBackward = function getIsBackward() {\n        return this.get(\"isBackward\");\n    };\n    _proto.getHasFocus = function getHasFocus() {\n        return this.get(\"hasFocus\");\n    } /**\n   * Return whether the specified range overlaps with an edge of the\n   * SelectionState.\n   */ ;\n    _proto.hasEdgeWithin = function hasEdgeWithin(blockKey, start, end) {\n        var anchorKey = this.getAnchorKey();\n        var focusKey = this.getFocusKey();\n        if (anchorKey === focusKey && anchorKey === blockKey) {\n            var selectionStart = this.getStartOffset();\n            var selectionEnd = this.getEndOffset();\n            return start <= selectionStart && selectionStart <= end || // selectionStart is between start and end, or\n            start <= selectionEnd && selectionEnd <= end // selectionEnd is between start and end\n            ;\n        }\n        if (blockKey !== anchorKey && blockKey !== focusKey) {\n            return false;\n        }\n        var offsetToCheck = blockKey === anchorKey ? this.getAnchorOffset() : this.getFocusOffset();\n        return start <= offsetToCheck && end >= offsetToCheck;\n    };\n    _proto.isCollapsed = function isCollapsed() {\n        return this.getAnchorKey() === this.getFocusKey() && this.getAnchorOffset() === this.getFocusOffset();\n    };\n    _proto.getStartKey = function getStartKey() {\n        return this.getIsBackward() ? this.getFocusKey() : this.getAnchorKey();\n    };\n    _proto.getStartOffset = function getStartOffset() {\n        return this.getIsBackward() ? this.getFocusOffset() : this.getAnchorOffset();\n    };\n    _proto.getEndKey = function getEndKey() {\n        return this.getIsBackward() ? this.getAnchorKey() : this.getFocusKey();\n    };\n    _proto.getEndOffset = function getEndOffset() {\n        return this.getIsBackward() ? this.getAnchorOffset() : this.getFocusOffset();\n    };\n    SelectionState.createEmpty = function createEmpty(key) {\n        return new SelectionState({\n            anchorKey: key,\n            anchorOffset: 0,\n            focusKey: key,\n            focusOffset: 0,\n            isBackward: false,\n            hasFocus: false\n        });\n    };\n    return SelectionState;\n}(SelectionStateRecord);\nmodule.exports = SelectionState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/SelectionState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/adjustBlockDepthForContentState.js":
/*!**********************************************************************!*\
  !*** ./node_modules/draft-js/lib/adjustBlockDepthForContentState.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction adjustBlockDepthForContentState(contentState, selectionState, adjustment, maxDepth) {\n    var startKey = selectionState.getStartKey();\n    var endKey = selectionState.getEndKey();\n    var blockMap = contentState.getBlockMap();\n    var blocks = blockMap.toSeq().skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).concat([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ]).map(function(block) {\n        var depth = block.getDepth() + adjustment;\n        depth = Math.max(0, Math.min(depth, maxDepth));\n        return block.set(\"depth\", depth);\n    });\n    blockMap = blockMap.merge(blocks);\n    return contentState.merge({\n        blockMap: blockMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = adjustBlockDepthForContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSxnQ0FBZ0NDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxVQUFVLEVBQUVDLFFBQVE7SUFDekYsSUFBSUMsV0FBV0gsZUFBZUksV0FBVztJQUN6QyxJQUFJQyxTQUFTTCxlQUFlTSxTQUFTO0lBQ3JDLElBQUlDLFdBQVdSLGFBQWFTLFdBQVc7SUFDdkMsSUFBSUMsU0FBU0YsU0FBU0csS0FBSyxHQUFHQyxTQUFTLENBQUMsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO1FBQ3BELE9BQU9BLE1BQU1WO0lBQ2YsR0FBR1csU0FBUyxDQUFDLFNBQVVGLENBQUMsRUFBRUMsQ0FBQztRQUN6QixPQUFPQSxNQUFNUjtJQUNmLEdBQUdVLE1BQU0sQ0FBQztRQUFDO1lBQUNWO1lBQVFFLFNBQVNTLEdBQUcsQ0FBQ1g7U0FBUTtLQUFDLEVBQUVZLEdBQUcsQ0FBQyxTQUFVQyxLQUFLO1FBQzdELElBQUlDLFFBQVFELE1BQU1FLFFBQVEsS0FBS25CO1FBQy9Ca0IsUUFBUUUsS0FBS0MsR0FBRyxDQUFDLEdBQUdELEtBQUtFLEdBQUcsQ0FBQ0osT0FBT2pCO1FBQ3BDLE9BQU9nQixNQUFNTSxHQUFHLENBQUMsU0FBU0w7SUFDNUI7SUFDQVosV0FBV0EsU0FBU2tCLEtBQUssQ0FBQ2hCO0lBQzFCLE9BQU9WLGFBQWEwQixLQUFLLENBQUM7UUFDeEJsQixVQUFVQTtRQUNWbUIsaUJBQWlCMUI7UUFDakIyQixnQkFBZ0IzQjtJQUNsQjtBQUNGO0FBRUE0QixPQUFPQyxPQUFPLEdBQUcvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZS5qcz80ZDRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgYWRqdXN0bWVudCwgbWF4RGVwdGgpIHtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGJsb2NrcyA9IGJsb2NrTWFwLnRvU2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IHN0YXJ0S2V5O1xuICB9KS50YWtlVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gZW5kS2V5O1xuICB9KS5jb25jYXQoW1tlbmRLZXksIGJsb2NrTWFwLmdldChlbmRLZXkpXV0pLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICB2YXIgZGVwdGggPSBibG9jay5nZXREZXB0aCgpICsgYWRqdXN0bWVudDtcbiAgICBkZXB0aCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGRlcHRoLCBtYXhEZXB0aCkpO1xuICAgIHJldHVybiBibG9jay5zZXQoJ2RlcHRoJywgZGVwdGgpO1xuICB9KTtcbiAgYmxvY2tNYXAgPSBibG9ja01hcC5tZXJnZShibG9ja3MpO1xuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAsXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZTsiXSwibmFtZXMiOlsiYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZSIsImNvbnRlbnRTdGF0ZSIsInNlbGVjdGlvblN0YXRlIiwiYWRqdXN0bWVudCIsIm1heERlcHRoIiwic3RhcnRLZXkiLCJnZXRTdGFydEtleSIsImVuZEtleSIsImdldEVuZEtleSIsImJsb2NrTWFwIiwiZ2V0QmxvY2tNYXAiLCJibG9ja3MiLCJ0b1NlcSIsInNraXBVbnRpbCIsIl8iLCJrIiwidGFrZVVudGlsIiwiY29uY2F0IiwiZ2V0IiwibWFwIiwiYmxvY2siLCJkZXB0aCIsImdldERlcHRoIiwiTWF0aCIsIm1heCIsIm1pbiIsInNldCIsIm1lcmdlIiwic2VsZWN0aW9uQmVmb3JlIiwic2VsZWN0aW9uQWZ0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/adjustBlockDepthForContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/applyEntityToContentBlock.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/applyEntityToContentBlock.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nfunction applyEntityToContentBlock(contentBlock, startArg, end, entityKey) {\n    var start = startArg;\n    var characterList = contentBlock.getCharacterList();\n    while(start < end){\n        characterList = characterList.set(start, CharacterMetadata.applyEntity(characterList.get(start), entityKey));\n        start++;\n    }\n    return contentBlock.set(\"characterList\", characterList);\n}\nmodule.exports = applyEntityToContentBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50QmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxvQkFBb0JDLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUVyRCxTQUFTQywwQkFBMEJDLFlBQVksRUFBRUMsUUFBUSxFQUFFQyxHQUFHLEVBQUVDLFNBQVM7SUFDdkUsSUFBSUMsUUFBUUg7SUFDWixJQUFJSSxnQkFBZ0JMLGFBQWFNLGdCQUFnQjtJQUVqRCxNQUFPRixRQUFRRixJQUFLO1FBQ2xCRyxnQkFBZ0JBLGNBQWNFLEdBQUcsQ0FBQ0gsT0FBT1Asa0JBQWtCVyxXQUFXLENBQUNILGNBQWNJLEdBQUcsQ0FBQ0wsUUFBUUQ7UUFDakdDO0lBQ0Y7SUFFQSxPQUFPSixhQUFhTyxHQUFHLENBQUMsaUJBQWlCRjtBQUMzQztBQUVBSyxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9hcHBseUVudGl0eVRvQ29udGVudEJsb2NrLmpzPzFlZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIENoYXJhY3Rlck1ldGFkYXRhID0gcmVxdWlyZShcIi4vQ2hhcmFjdGVyTWV0YWRhdGFcIik7XG5cbmZ1bmN0aW9uIGFwcGx5RW50aXR5VG9Db250ZW50QmxvY2soY29udGVudEJsb2NrLCBzdGFydEFyZywgZW5kLCBlbnRpdHlLZXkpIHtcbiAgdmFyIHN0YXJ0ID0gc3RhcnRBcmc7XG4gIHZhciBjaGFyYWN0ZXJMaXN0ID0gY29udGVudEJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcblxuICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICBjaGFyYWN0ZXJMaXN0ID0gY2hhcmFjdGVyTGlzdC5zZXQoc3RhcnQsIENoYXJhY3Rlck1ldGFkYXRhLmFwcGx5RW50aXR5KGNoYXJhY3Rlckxpc3QuZ2V0KHN0YXJ0KSwgZW50aXR5S2V5KSk7XG4gICAgc3RhcnQrKztcbiAgfVxuXG4gIHJldHVybiBjb250ZW50QmxvY2suc2V0KCdjaGFyYWN0ZXJMaXN0JywgY2hhcmFjdGVyTGlzdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jazsiXSwibmFtZXMiOlsiQ2hhcmFjdGVyTWV0YWRhdGEiLCJyZXF1aXJlIiwiYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayIsImNvbnRlbnRCbG9jayIsInN0YXJ0QXJnIiwiZW5kIiwiZW50aXR5S2V5Iiwic3RhcnQiLCJjaGFyYWN0ZXJMaXN0IiwiZ2V0Q2hhcmFjdGVyTGlzdCIsInNldCIsImFwcGx5RW50aXR5IiwiZ2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/applyEntityToContentBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/applyEntityToContentState.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/applyEntityToContentState.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar applyEntityToContentBlock = __webpack_require__(/*! ./applyEntityToContentBlock */ \"(ssr)/./node_modules/draft-js/lib/applyEntityToContentBlock.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nfunction applyEntityToContentState(contentState, selectionState, entityKey) {\n    var blockMap = contentState.getBlockMap();\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var newBlocks = blockMap.skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).toOrderedMap().merge(Immutable.OrderedMap([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ])).map(function(block, blockKey) {\n        var sliceStart = blockKey === startKey ? startOffset : 0;\n        var sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n        return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);\n    });\n    return contentState.merge({\n        blockMap: blockMap.merge(newBlocks),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = applyEntityToContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50U3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSw0QkFBNEJDLG1CQUFPQSxDQUFDLG1HQUE2QjtBQUVyRSxJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RkFBVztBQUVuQyxTQUFTRSwwQkFBMEJDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxTQUFTO0lBQ3hFLElBQUlDLFdBQVdILGFBQWFJLFdBQVc7SUFDdkMsSUFBSUMsV0FBV0osZUFBZUssV0FBVztJQUN6QyxJQUFJQyxjQUFjTixlQUFlTyxjQUFjO0lBQy9DLElBQUlDLFNBQVNSLGVBQWVTLFNBQVM7SUFDckMsSUFBSUMsWUFBWVYsZUFBZVcsWUFBWTtJQUMzQyxJQUFJQyxZQUFZVixTQUFTVyxTQUFTLENBQUMsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO1FBQy9DLE9BQU9BLE1BQU1YO0lBQ2YsR0FBR1ksU0FBUyxDQUFDLFNBQVVGLENBQUMsRUFBRUMsQ0FBQztRQUN6QixPQUFPQSxNQUFNUDtJQUNmLEdBQUdTLFlBQVksR0FBR0MsS0FBSyxDQUFDckIsVUFBVXNCLFVBQVUsQ0FBQztRQUFDO1lBQUNYO1lBQVFOLFNBQVNrQixHQUFHLENBQUNaO1NBQVE7S0FBQyxHQUFHYSxHQUFHLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxRQUFRO1FBQzNHLElBQUlDLGFBQWFELGFBQWFuQixXQUFXRSxjQUFjO1FBQ3ZELElBQUltQixXQUFXRixhQUFhZixTQUFTRSxZQUFZWSxNQUFNSSxTQUFTO1FBQ2hFLE9BQU8vQiwwQkFBMEIyQixPQUFPRSxZQUFZQyxVQUFVeEI7SUFDaEU7SUFDQSxPQUFPRixhQUFhbUIsS0FBSyxDQUFDO1FBQ3hCaEIsVUFBVUEsU0FBU2dCLEtBQUssQ0FBQ047UUFDekJlLGlCQUFpQjNCO1FBQ2pCNEIsZ0JBQWdCNUI7SUFDbEI7QUFDRjtBQUVBNkIsT0FBT0MsT0FBTyxHQUFHaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50U3RhdGUuanM/YjY4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayA9IHJlcXVpcmUoXCIuL2FwcGx5RW50aXR5VG9Db250ZW50QmxvY2tcIik7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG5mdW5jdGlvbiBhcHBseUVudGl0eVRvQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGVudGl0eUtleSkge1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG4gIHZhciBuZXdCbG9ja3MgPSBibG9ja01hcC5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXk7XG4gIH0pLnRha2VVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBlbmRLZXk7XG4gIH0pLnRvT3JkZXJlZE1hcCgpLm1lcmdlKEltbXV0YWJsZS5PcmRlcmVkTWFwKFtbZW5kS2V5LCBibG9ja01hcC5nZXQoZW5kS2V5KV1dKSkubWFwKGZ1bmN0aW9uIChibG9jaywgYmxvY2tLZXkpIHtcbiAgICB2YXIgc2xpY2VTdGFydCA9IGJsb2NrS2V5ID09PSBzdGFydEtleSA/IHN0YXJ0T2Zmc2V0IDogMDtcbiAgICB2YXIgc2xpY2VFbmQgPSBibG9ja0tleSA9PT0gZW5kS2V5ID8gZW5kT2Zmc2V0IDogYmxvY2suZ2V0TGVuZ3RoKCk7XG4gICAgcmV0dXJuIGFwcGx5RW50aXR5VG9Db250ZW50QmxvY2soYmxvY2ssIHNsaWNlU3RhcnQsIHNsaWNlRW5kLCBlbnRpdHlLZXkpO1xuICB9KTtcbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLm1lcmdlKG5ld0Jsb2NrcyksXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHlFbnRpdHlUb0NvbnRlbnRTdGF0ZTsiXSwibmFtZXMiOlsiYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayIsInJlcXVpcmUiLCJJbW11dGFibGUiLCJhcHBseUVudGl0eVRvQ29udGVudFN0YXRlIiwiY29udGVudFN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJlbnRpdHlLZXkiLCJibG9ja01hcCIsImdldEJsb2NrTWFwIiwic3RhcnRLZXkiLCJnZXRTdGFydEtleSIsInN0YXJ0T2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJlbmRLZXkiLCJnZXRFbmRLZXkiLCJlbmRPZmZzZXQiLCJnZXRFbmRPZmZzZXQiLCJuZXdCbG9ja3MiLCJza2lwVW50aWwiLCJfIiwiayIsInRha2VVbnRpbCIsInRvT3JkZXJlZE1hcCIsIm1lcmdlIiwiT3JkZXJlZE1hcCIsImdldCIsIm1hcCIsImJsb2NrIiwiYmxvY2tLZXkiLCJzbGljZVN0YXJ0Iiwic2xpY2VFbmQiLCJnZXRMZW5ndGgiLCJzZWxlY3Rpb25CZWZvcmUiLCJzZWxlY3Rpb25BZnRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/applyEntityToContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/convertFromDraftStateToRaw.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/convertFromDraftStateToRaw.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DraftStringKey = __webpack_require__(/*! ./DraftStringKey */ \"(ssr)/./node_modules/draft-js/lib/DraftStringKey.js\");\nvar encodeEntityRanges = __webpack_require__(/*! ./encodeEntityRanges */ \"(ssr)/./node_modules/draft-js/lib/encodeEntityRanges.js\");\nvar encodeInlineStyleRanges = __webpack_require__(/*! ./encodeInlineStyleRanges */ \"(ssr)/./node_modules/draft-js/lib/encodeInlineStyleRanges.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n    return {\n        key: block.getKey(),\n        text: block.getText(),\n        type: block.getType(),\n        depth: block.getDepth(),\n        inlineStyleRanges: encodeInlineStyleRanges(block),\n        entityRanges: encodeEntityRanges(block, entityStorageMap),\n        data: block.getData().toObject()\n    };\n};\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n    if (block instanceof ContentBlock) {\n        rawBlocks.push(createRawBlock(block, entityMap));\n        return;\n    }\n    !(block instanceof ContentBlockNode) ?  true ? invariant(false, \"block is not a BlockNode\") : 0 : void 0;\n    var parentKey = block.getParentKey();\n    var rawBlock = blockCacheRef[block.getKey()] = _objectSpread({}, createRawBlock(block, entityMap), {\n        children: []\n    });\n    if (parentKey) {\n        blockCacheRef[parentKey].children.push(rawBlock);\n        return;\n    }\n    rawBlocks.push(rawBlock);\n};\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n    var entityMap = rawState.entityMap;\n    var rawBlocks = [];\n    var blockCacheRef = {};\n    var entityCacheRef = {};\n    var entityStorageKey = 0;\n    contentState.getBlockMap().forEach(function(block) {\n        block.findEntityRanges(function(character) {\n            return character.getEntity() !== null;\n        }, function(start) {\n            var entityKey = block.getEntityAt(start); // Stringify to maintain order of otherwise numeric keys.\n            var stringifiedEntityKey = DraftStringKey.stringify(entityKey); // This makes this function resilient to two entities\n            // erroneously having the same key\n            if (entityCacheRef[stringifiedEntityKey]) {\n                return;\n            }\n            entityCacheRef[stringifiedEntityKey] = entityKey; // we need the `any` casting here since this is a temporary state\n            // where we will later on flip the entity map and populate it with\n            // real entity, at this stage we just need to map back the entity\n            // key used by the BlockNode\n            entityMap[stringifiedEntityKey] = \"\".concat(entityStorageKey);\n            entityStorageKey++;\n        });\n        insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n    });\n    return {\n        blocks: rawBlocks,\n        entityMap: entityMap\n    };\n}; // Flip storage map so that our storage keys map to global\n// DraftEntity keys.\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n    var blocks = rawState.blocks, entityMap = rawState.entityMap;\n    var rawEntityMap = {};\n    Object.keys(entityMap).forEach(function(key, index) {\n        var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n        rawEntityMap[index] = {\n            type: entity.getType(),\n            mutability: entity.getMutability(),\n            data: entity.getData()\n        };\n    });\n    return {\n        blocks: blocks,\n        entityMap: rawEntityMap\n    };\n};\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n    var rawDraftContentState = {\n        entityMap: {},\n        blocks: []\n    }; // add blocks\n    rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState); // add entities\n    rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n    return rawDraftContentState;\n};\nmodule.exports = convertFromDraftStateToRaw;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/convertFromDraftStateToRaw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js":
/*!*********************************************************************!*\
  !*** ./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _knownListItemDepthCl;\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DefaultDraftBlockRenderMap = __webpack_require__(/*! ./DefaultDraftBlockRenderMap */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar URI = __webpack_require__(/*! fbjs/lib/URI */ \"(ssr)/./node_modules/fbjs/lib/URI.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getSafeBodyFromHTML = __webpack_require__(/*! ./getSafeBodyFromHTML */ \"(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), List = _require.List, Map = _require.Map, OrderedSet = _require.OrderedSet;\nvar isHTMLAnchorElement = __webpack_require__(/*! ./isHTMLAnchorElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLAnchorElement.js\");\nvar isHTMLBRElement = __webpack_require__(/*! ./isHTMLBRElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar isHTMLImageElement = __webpack_require__(/*! ./isHTMLImageElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLImageElement.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar NBSP = \"&nbsp;\";\nvar SPACE = \" \"; // used for replacing characters in HTML\nvar REGEX_CR = new RegExp(\"\\r\", \"g\");\nvar REGEX_LF = new RegExp(\"\\n\", \"g\");\nvar REGEX_LEADING_LF = new RegExp(\"^\\n\", \"g\");\nvar REGEX_NBSP = new RegExp(NBSP, \"g\");\nvar REGEX_CARRIAGE = new RegExp(\"&#13;?\", \"g\");\nvar REGEX_ZWS = new RegExp(\"&#8203;?\", \"g\"); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\nvar boldValues = [\n    \"bold\",\n    \"bolder\",\n    \"500\",\n    \"600\",\n    \"700\",\n    \"800\",\n    \"900\"\n];\nvar notBoldValues = [\n    \"light\",\n    \"lighter\",\n    \"normal\",\n    \"100\",\n    \"200\",\n    \"300\",\n    \"400\"\n];\nvar anchorAttr = [\n    \"className\",\n    \"href\",\n    \"rel\",\n    \"target\",\n    \"title\"\n];\nvar imgAttr = [\n    \"alt\",\n    \"className\",\n    \"height\",\n    \"src\",\n    \"width\"\n];\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth0\"), 0), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth1\"), 1), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth2\"), 2), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth3\"), 3), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth4\"), 4), _knownListItemDepthCl);\nvar HTMLTagToRawInlineStyleMap = Map({\n    b: \"BOLD\",\n    code: \"CODE\",\n    del: \"STRIKETHROUGH\",\n    em: \"ITALIC\",\n    i: \"ITALIC\",\n    s: \"STRIKETHROUGH\",\n    strike: \"STRIKETHROUGH\",\n    strong: \"BOLD\",\n    u: \"UNDERLINE\",\n    mark: \"HIGHLIGHT\"\n});\n/**\n * Build a mapping from HTML tags to draftjs block types\n * out of a BlockRenderMap.\n *\n * The BlockTypeMap for the default BlockRenderMap looks like this:\n *   Map({\n *     h1: 'header-one',\n *     h2: 'header-two',\n *     h3: 'header-three',\n *     h4: 'header-four',\n *     h5: 'header-five',\n *     h6: 'header-six',\n *     blockquote: 'blockquote',\n *     figure: 'atomic',\n *     pre: ['code-block'],\n *     div: 'unstyled',\n *     p: 'unstyled',\n *     li: ['ordered-list-item', 'unordered-list-item'],\n *   })\n */ var buildBlockTypeMap = function buildBlockTypeMap(blockRenderMap) {\n    var blockTypeMap = {};\n    blockRenderMap.mapKeys(function(blockType, desc) {\n        var elements = [\n            desc.element\n        ];\n        if (desc.aliasedElements !== undefined) {\n            elements.push.apply(elements, desc.aliasedElements);\n        }\n        elements.forEach(function(element) {\n            if (blockTypeMap[element] === undefined) {\n                blockTypeMap[element] = blockType;\n            } else if (typeof blockTypeMap[element] === \"string\") {\n                blockTypeMap[element] = [\n                    blockTypeMap[element],\n                    blockType\n                ];\n            } else {\n                blockTypeMap[element].push(blockType);\n            }\n        });\n    });\n    return Map(blockTypeMap);\n};\nvar detectInlineStyle = function detectInlineStyle(node) {\n    if (isHTMLElement(node)) {\n        var element = node; // Currently only used to detect preformatted inline code\n        if (element.style.fontFamily.includes(\"monospace\")) {\n            return \"CODE\";\n        }\n    }\n    return null;\n};\n/**\n * If we're pasting from one DraftEditor to another we can check to see if\n * existing list item depth classes are being used and preserve this style\n */ var getListItemDepth = function getListItemDepth(node) {\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    Object.keys(knownListItemDepthClasses).some(function(depthClass) {\n        if (node.classList.contains(depthClass)) {\n            depth = knownListItemDepthClasses[depthClass];\n        }\n    });\n    return depth;\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible link.\n */ var isValidAnchor = function isValidAnchor(node) {\n    if (!isHTMLAnchorElement(node)) {\n        return false;\n    }\n    var anchorNode = node;\n    if (!anchorNode.href || anchorNode.protocol !== \"http:\" && anchorNode.protocol !== \"https:\" && anchorNode.protocol !== \"mailto:\" && anchorNode.protocol !== \"tel:\") {\n        return false;\n    }\n    try {\n        // Just checking whether we can actually create a URI\n        var _ = new URI(anchorNode.href);\n        return true; // We need our catch statements to have arguments, else\n    // UglifyJS (which we use for our OSS builds) will crash.\n    // eslint-disable-next-line fb-www/no-unused-catch-bindings\n    } catch (_) {\n        return false;\n    }\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible image.\n */ var isValidImage = function isValidImage(node) {\n    if (!isHTMLImageElement(node)) {\n        return false;\n    }\n    var imageNode = node;\n    return !!(imageNode.attributes.getNamedItem(\"src\") && imageNode.attributes.getNamedItem(\"src\").value);\n};\n/**\n * Try to guess the inline style of an HTML element based on its css\n * styles (font-weight, font-style and text-decoration).\n */ var styleFromNodeAttributes = function styleFromNodeAttributes(node, style) {\n    if (!isHTMLElement(node)) {\n        return style;\n    }\n    var htmlElement = node;\n    var fontWeight = htmlElement.style.fontWeight;\n    var fontStyle = htmlElement.style.fontStyle;\n    var textDecoration = htmlElement.style.textDecoration;\n    return style.withMutations(function(style) {\n        if (boldValues.indexOf(fontWeight) >= 0) {\n            style.add(\"BOLD\");\n        } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n            style.remove(\"BOLD\");\n        }\n        if (fontStyle === \"italic\") {\n            style.add(\"ITALIC\");\n        } else if (fontStyle === \"normal\") {\n            style.remove(\"ITALIC\");\n        }\n        if (textDecoration === \"underline\") {\n            style.add(\"UNDERLINE\");\n        }\n        if (textDecoration === \"line-through\") {\n            style.add(\"STRIKETHROUGH\");\n        }\n        if (textDecoration === \"none\") {\n            style.remove(\"UNDERLINE\");\n            style.remove(\"STRIKETHROUGH\");\n        }\n    });\n};\n/**\n * Determine if a nodeName is a list type, 'ul' or 'ol'\n */ var isListNode = function isListNode(nodeName) {\n    return nodeName === \"ul\" || nodeName === \"ol\";\n};\n/**\n *  ContentBlockConfig is a mutable data structure that holds all\n *  the information required to build a ContentBlock and an array of\n *  all the child nodes (childConfigs).\n *  It is being used a temporary data structure by the\n *  ContentBlocksBuilder class.\n */ /**\n * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map\n * out of one (or several) HTMLElement(s).\n *\n * The algorithm has two passes: first it builds a tree of ContentBlockConfigs\n * by walking through the HTML nodes and their children, then it walks the\n * ContentBlockConfigs tree to compute parents/siblings and create\n * the actual ContentBlocks.\n *\n * Typical usage is:\n *     new ContentBlocksBuilder()\n *        .addDOMNode(someHTMLNode)\n *        .addDOMNode(someOtherHTMLNode)\n *       .getContentBlocks();\n *\n */ var ContentBlocksBuilder = /*#__PURE__*/ function() {\n    // Most of the method in the class depend on the state of the content builder\n    // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may\n    // be confusing at first, it made the code simpler than the alternative which\n    // is to pass those values around in every call.\n    // The following attributes are used to accumulate text and styles\n    // as we are walking the HTML node tree.\n    // Describes the future ContentState as a tree of content blocks\n    // The content blocks generated from the blockConfigs\n    // Entity map use to store links and images found in the HTML nodes\n    // Map HTML tags to draftjs block types and disambiguation function\n    function ContentBlocksBuilder(blockTypeMap, disambiguate) {\n        _defineProperty(this, \"characterList\", List());\n        _defineProperty(this, \"currentBlockType\", \"unstyled\");\n        _defineProperty(this, \"currentDepth\", 0);\n        _defineProperty(this, \"currentEntity\", null);\n        _defineProperty(this, \"currentText\", \"\");\n        _defineProperty(this, \"wrapper\", null);\n        _defineProperty(this, \"blockConfigs\", []);\n        _defineProperty(this, \"contentBlocks\", []);\n        _defineProperty(this, \"entityMap\", DraftEntity);\n        _defineProperty(this, \"blockTypeMap\", void 0);\n        _defineProperty(this, \"disambiguate\", void 0);\n        this.clear();\n        this.blockTypeMap = blockTypeMap;\n        this.disambiguate = disambiguate;\n    }\n    /**\n   * Clear the internal state of the ContentBlocksBuilder\n   */ var _proto = ContentBlocksBuilder.prototype;\n    _proto.clear = function clear() {\n        this.characterList = List();\n        this.blockConfigs = [];\n        this.currentBlockType = \"unstyled\";\n        this.currentDepth = 0;\n        this.currentEntity = null;\n        this.currentText = \"\";\n        this.entityMap = DraftEntity;\n        this.wrapper = null;\n        this.contentBlocks = [];\n    } /**\n   * Add an HTMLElement to the ContentBlocksBuilder\n   */ ;\n    _proto.addDOMNode = function addDOMNode(node) {\n        var _this$blockConfigs;\n        this.contentBlocks = [];\n        this.currentDepth = 0; // Converts the HTML node to block config\n        (_this$blockConfigs = this.blockConfigs).push.apply(_this$blockConfigs, this._toBlockConfigs([\n            node\n        ], OrderedSet())); // There might be some left over text in the builder's\n        // internal state, if so make a ContentBlock out of it.\n        this._trimCurrentText();\n        if (this.currentText !== \"\") {\n            this.blockConfigs.push(this._makeBlockConfig());\n        } // for chaining\n        return this;\n    } /**\n   * Return the ContentBlocks and the EntityMap that corresponds\n   * to the previously added HTML nodes.\n   */ ;\n    _proto.getContentBlocks = function getContentBlocks() {\n        if (this.contentBlocks.length === 0) {\n            if (experimentalTreeDataSupport) {\n                this._toContentBlocks(this.blockConfigs);\n            } else {\n                this._toFlatContentBlocks(this.blockConfigs);\n            }\n        }\n        return {\n            contentBlocks: this.contentBlocks,\n            entityMap: this.entityMap\n        };\n    } // ***********************************WARNING******************************\n     /**\n   * Generate a new ContentBlockConfig out of the current internal state\n   * of the builder, then clears the internal state.\n   */ ;\n    _proto._makeBlockConfig = function _makeBlockConfig() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var key = config.key || generateRandomKey();\n        var block = _objectSpread({\n            key: key,\n            type: this.currentBlockType,\n            text: this.currentText,\n            characterList: this.characterList,\n            depth: this.currentDepth,\n            parent: null,\n            children: List(),\n            prevSibling: null,\n            nextSibling: null,\n            childConfigs: []\n        }, config);\n        this.characterList = List();\n        this.currentBlockType = \"unstyled\";\n        this.currentText = \"\";\n        return block;\n    } /**\n   * Converts an array of HTML elements to a multi-root tree of content\n   * block configs. Some text content may be left in the builders internal\n   * state to enable chaining sucessive calls.\n   */ ;\n    _proto._toBlockConfigs = function _toBlockConfigs(nodes, style) {\n        var blockConfigs = [];\n        for(var i = 0; i < nodes.length; i++){\n            var node = nodes[i];\n            var nodeName = node.nodeName.toLowerCase();\n            if (nodeName === \"body\" || isListNode(nodeName)) {\n                // body, ol and ul are 'block' type nodes so create a block config\n                // with the text accumulated so far (if any)\n                this._trimCurrentText();\n                if (this.currentText !== \"\") {\n                    blockConfigs.push(this._makeBlockConfig());\n                } // body, ol and ul nodes are ignored, but their children are inlined in\n                // the parent block config.\n                var wasCurrentDepth = this.currentDepth;\n                var wasWrapper = this.wrapper;\n                if (isListNode(nodeName)) {\n                    this.wrapper = nodeName;\n                    if (isListNode(wasWrapper)) {\n                        this.currentDepth++;\n                    }\n                }\n                blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n                this.currentDepth = wasCurrentDepth;\n                this.wrapper = wasWrapper;\n                continue;\n            }\n            var blockType = this.blockTypeMap.get(nodeName);\n            if (blockType !== undefined) {\n                // 'block' type node means we need to create a block config\n                // with the text accumulated so far (if any)\n                this._trimCurrentText();\n                if (this.currentText !== \"\") {\n                    blockConfigs.push(this._makeBlockConfig());\n                }\n                var _wasCurrentDepth = this.currentDepth;\n                var _wasWrapper = this.wrapper;\n                this.wrapper = nodeName === \"pre\" ? \"pre\" : this.wrapper;\n                if (typeof blockType !== \"string\") {\n                    blockType = this.disambiguate(nodeName, this.wrapper) || blockType[0] || \"unstyled\";\n                }\n                if (!experimentalTreeDataSupport && isHTMLElement(node) && (blockType === \"unordered-list-item\" || blockType === \"ordered-list-item\")) {\n                    var htmlElement = node;\n                    this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);\n                }\n                var key = generateRandomKey();\n                var childConfigs = this._toBlockConfigs(Array.from(node.childNodes), style);\n                this._trimCurrentText();\n                blockConfigs.push(this._makeBlockConfig({\n                    key: key,\n                    childConfigs: childConfigs,\n                    type: blockType\n                }));\n                this.currentDepth = _wasCurrentDepth;\n                this.wrapper = _wasWrapper;\n                continue;\n            }\n            if (nodeName === \"#text\") {\n                this._addTextNode(node, style);\n                continue;\n            }\n            if (nodeName === \"br\") {\n                this._addBreakNode(node, style);\n                continue;\n            }\n            if (isValidImage(node)) {\n                this._addImgNode(node, style);\n                continue;\n            }\n            if (isValidAnchor(node)) {\n                this._addAnchorNode(node, blockConfigs, style);\n                continue;\n            }\n            var newStyle = style;\n            if (HTMLTagToRawInlineStyleMap.has(nodeName)) {\n                newStyle = newStyle.add(HTMLTagToRawInlineStyleMap.get(nodeName));\n            }\n            newStyle = styleFromNodeAttributes(node, newStyle);\n            var inlineStyle = detectInlineStyle(node);\n            if (inlineStyle != null) {\n                newStyle = newStyle.add(inlineStyle);\n            }\n            blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), newStyle));\n        }\n        return blockConfigs;\n    } /**\n   * Append a string of text to the internal buffer.\n   */ ;\n    _proto._appendText = function _appendText(text, style) {\n        var _this$characterList;\n        this.currentText += text;\n        var characterMetadata = CharacterMetadata.create({\n            style: style,\n            entity: this.currentEntity\n        });\n        this.characterList = (_this$characterList = this.characterList).push.apply(_this$characterList, Array(text.length).fill(characterMetadata));\n    } /**\n   * Trim the text in the internal buffer.\n   */ ;\n    _proto._trimCurrentText = function _trimCurrentText() {\n        var l = this.currentText.length;\n        var begin = l - this.currentText.trimLeft().length;\n        var end = this.currentText.trimRight().length; // We should not trim whitespaces for which an entity is defined.\n        var entity = this.characterList.findEntry(function(characterMetadata) {\n            return characterMetadata.getEntity() !== null;\n        });\n        begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;\n        entity = this.characterList.reverse().findEntry(function(characterMetadata) {\n            return characterMetadata.getEntity() !== null;\n        });\n        end = entity !== undefined ? Math.max(end, l - entity[0]) : end;\n        if (begin > end) {\n            this.currentText = \"\";\n            this.characterList = List();\n        } else {\n            this.currentText = this.currentText.slice(begin, end);\n            this.characterList = this.characterList.slice(begin, end);\n        }\n    } /**\n   * Add the content of an HTML text node to the internal state\n   */ ;\n    _proto._addTextNode = function _addTextNode(node, style) {\n        var text = node.textContent;\n        var trimmedText = text.trim(); // If we are not in a pre block and the trimmed content is empty,\n        // normalize to a single space.\n        if (trimmedText === \"\" && this.wrapper !== \"pre\") {\n            text = \" \";\n        }\n        if (this.wrapper !== \"pre\") {\n            // Trim leading line feed, which is invisible in HTML\n            text = text.replace(REGEX_LEADING_LF, \"\"); // Can't use empty string because MSWord\n            text = text.replace(REGEX_LF, SPACE);\n        }\n        this._appendText(text, style);\n    };\n    _proto._addBreakNode = function _addBreakNode(node, style) {\n        if (!isHTMLBRElement(node)) {\n            return;\n        }\n        this._appendText(\"\\n\", style);\n    } /**\n   * Add the content of an HTML img node to the internal state\n   */ ;\n    _proto._addImgNode = function _addImgNode(node, style) {\n        if (!isHTMLImageElement(node)) {\n            return;\n        }\n        var image = node;\n        var entityConfig = {};\n        imgAttr.forEach(function(attr) {\n            var imageAttribute = image.getAttribute(attr);\n            if (imageAttribute) {\n                entityConfig[attr] = imageAttribute;\n            }\n        }); // TODO: T15530363 update this when we remove DraftEntity entirely\n        this.currentEntity = this.entityMap.__create(\"IMAGE\", \"IMMUTABLE\", entityConfig); // The child text node cannot just have a space or return as content (since\n        // we strip those out), unless the image is for presentation only.\n        // See https://github.com/facebook/draft-js/issues/231 for some context.\n        if (gkx(\"draftjs_fix_paste_for_img\")) {\n            if (image.getAttribute(\"role\") !== \"presentation\") {\n                this._appendText(\"\\uD83D\\uDCF7\", style);\n            }\n        } else {\n            this._appendText(\"\\uD83D\\uDCF7\", style);\n        }\n        this.currentEntity = null;\n    } /**\n   * Add the content of an HTML 'a' node to the internal state. Child nodes\n   * (if any) are converted to Block Configs and appended to the provided\n   * blockConfig array.\n   */ ;\n    _proto._addAnchorNode = function _addAnchorNode(node, blockConfigs, style) {\n        // The check has already been made by isValidAnchor but\n        // we have to do it again to keep flow happy.\n        if (!isHTMLAnchorElement(node)) {\n            return;\n        }\n        var anchor = node;\n        var entityConfig = {};\n        anchorAttr.forEach(function(attr) {\n            var anchorAttribute = anchor.getAttribute(attr);\n            if (anchorAttribute) {\n                entityConfig[attr] = anchorAttribute;\n            }\n        });\n        entityConfig.url = new URI(anchor.href).toString(); // TODO: T15530363 update this when we remove DraftEntity completely\n        this.currentEntity = this.entityMap.__create(\"LINK\", \"MUTABLE\", entityConfig || {});\n        blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n        this.currentEntity = null;\n    } /**\n   * Walk the BlockConfig tree, compute parent/children/siblings,\n   * and generate the corresponding ContentBlockNode\n   */ ;\n    _proto._toContentBlocks = function _toContentBlocks(blockConfigs) {\n        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var l = blockConfigs.length - 1;\n        for(var i = 0; i <= l; i++){\n            var config = blockConfigs[i];\n            config.parent = parent;\n            config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;\n            config.nextSibling = i < l ? blockConfigs[i + 1].key : null;\n            config.children = List(config.childConfigs.map(function(child) {\n                return child.key;\n            }));\n            this.contentBlocks.push(new ContentBlockNode(_objectSpread({}, config)));\n            this._toContentBlocks(config.childConfigs, config.key);\n        }\n    } /**\n   * Remove 'useless' container nodes from the block config hierarchy, by\n   * replacing them with their children.\n   */ ;\n    _proto._hoistContainersInBlockConfigs = function _hoistContainersInBlockConfigs(blockConfigs) {\n        var _this = this;\n        var hoisted = List(blockConfigs).flatMap(function(blockConfig) {\n            // Don't mess with useful blocks\n            if (blockConfig.type !== \"unstyled\" || blockConfig.text !== \"\") {\n                return [\n                    blockConfig\n                ];\n            }\n            return _this._hoistContainersInBlockConfigs(blockConfig.childConfigs);\n        });\n        return hoisted;\n    } // ***********************************************************************\n     /**\n   * Same as _toContentBlocks but replaces nested blocks by their\n   * text content.\n   */ ;\n    _proto._toFlatContentBlocks = function _toFlatContentBlocks(blockConfigs) {\n        var _this2 = this;\n        var cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);\n        cleanConfigs.forEach(function(config) {\n            var _this2$_extractTextFr = _this2._extractTextFromBlockConfigs(config.childConfigs), text = _this2$_extractTextFr.text, characterList = _this2$_extractTextFr.characterList;\n            _this2.contentBlocks.push(new ContentBlock(_objectSpread({}, config, {\n                text: config.text + text,\n                characterList: config.characterList.concat(characterList)\n            })));\n        });\n    } /**\n   * Extract the text and the associated inline styles form an\n   * array of content block configs.\n   */ ;\n    _proto._extractTextFromBlockConfigs = function _extractTextFromBlockConfigs(blockConfigs) {\n        var l = blockConfigs.length - 1;\n        var text = \"\";\n        var characterList = List();\n        for(var i = 0; i <= l; i++){\n            var config = blockConfigs[i];\n            text += config.text;\n            characterList = characterList.concat(config.characterList);\n            if (text !== \"\" && config.type !== \"unstyled\") {\n                text += \"\\n\";\n                characterList = characterList.push(characterList.last());\n            }\n            var children = this._extractTextFromBlockConfigs(config.childConfigs);\n            text += children.text;\n            characterList = characterList.concat(children.characterList);\n        }\n        return {\n            text: text,\n            characterList: characterList\n        };\n    };\n    return ContentBlocksBuilder;\n}();\n/**\n * Converts an HTML string to an array of ContentBlocks and an EntityMap\n * suitable to initialize the internal state of a Draftjs component.\n */ var convertFromHTMLToContentBlocks = function convertFromHTMLToContentBlocks(html) {\n    var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n    var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\n    // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n    // arbitrary code in whatever environment you're running this in. For an\n    // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n    // Remove funky characters from the HTML string\n    html = html.trim().replace(REGEX_CR, \"\").replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, \"\").replace(REGEX_ZWS, \"\"); // Build a DOM tree out of the HTML string\n    var safeBody = DOMBuilder(html);\n    if (!safeBody) {\n        return null;\n    } // Build a BlockTypeMap out of the BlockRenderMap\n    var blockTypeMap = buildBlockTypeMap(blockRenderMap); // Select the proper block type for the cases where the blockRenderMap\n    // uses multiple block types for the same html tag.\n    var disambiguate = function disambiguate(tag, wrapper) {\n        if (tag === \"li\") {\n            return wrapper === \"ol\" ? \"ordered-list-item\" : \"unordered-list-item\";\n        }\n        return null;\n    };\n    return new ContentBlocksBuilder(blockTypeMap, disambiguate).addDOMNode(safeBody).getContentBlocks();\n};\nmodule.exports = convertFromHTMLToContentBlocks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/convertFromRawToDraftState.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/convertFromRawToDraftState.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar ContentState = __webpack_require__(/*! ./ContentState */ \"(ssr)/./node_modules/draft-js/lib/ContentState.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar DraftTreeAdapter = __webpack_require__(/*! ./DraftTreeAdapter */ \"(ssr)/./node_modules/draft-js/lib/DraftTreeAdapter.js\");\nvar DraftTreeInvariants = __webpack_require__(/*! ./DraftTreeInvariants */ \"(ssr)/./node_modules/draft-js/lib/DraftTreeInvariants.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar createCharacterList = __webpack_require__(/*! ./createCharacterList */ \"(ssr)/./node_modules/draft-js/lib/createCharacterList.js\");\nvar decodeEntityRanges = __webpack_require__(/*! ./decodeEntityRanges */ \"(ssr)/./node_modules/draft-js/lib/decodeEntityRanges.js\");\nvar decodeInlineStyleRanges = __webpack_require__(/*! ./decodeInlineStyleRanges */ \"(ssr)/./node_modules/draft-js/lib/decodeInlineStyleRanges.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar List = Immutable.List, Map = Immutable.Map, OrderedMap = Immutable.OrderedMap;\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {\n    var key = block.key, type = block.type, data = block.data, text = block.text, depth = block.depth;\n    var blockNodeConfig = {\n        text: text,\n        depth: depth || 0,\n        type: type || \"unstyled\",\n        key: key || generateRandomKey(),\n        data: Map(data),\n        characterList: decodeCharacterList(block, entityMap)\n    };\n    return blockNodeConfig;\n};\nvar decodeCharacterList = function decodeCharacterList(block, entityMap) {\n    var text = block.text, rawEntityRanges = block.entityRanges, rawInlineStyleRanges = block.inlineStyleRanges;\n    var entityRanges = rawEntityRanges || [];\n    var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n    return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function(range) {\n        return entityMap.hasOwnProperty(range.key);\n    }).map(function(range) {\n        return _objectSpread({}, range, {\n            key: entityMap[range.key]\n        });\n    })));\n};\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n    return _objectSpread({}, block, {\n        key: block.key || generateRandomKey()\n    });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */ var updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n    var nodesWithParentRef = nodes.map(function(block) {\n        return _objectSpread({}, block, {\n            parentRef: parentRef\n        });\n    }); // since we pop nodes from the stack we need to insert them in reverse\n    return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */ var decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n    return blocks // ensure children have valid keys to enable sibling links\n    .map(addKeyIfMissing).reduce(function(blockMap, block, index) {\n        !Array.isArray(block.children) ?  true ? invariant(false, \"invalid RawDraftContentBlock can not be converted to ContentBlockNode\") : 0 : void 0; // ensure children have valid keys to enable sibling links\n        var children = block.children.map(addKeyIfMissing); // root level nodes\n        var contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(block, entityMap), {\n            prevSibling: index === 0 ? null : blocks[index - 1].key,\n            nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n            children: List(children.map(function(child) {\n                return child.key;\n            }))\n        })); // push root node to blockMap\n        blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n        var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n        while(stack.length > 0){\n            // we pop from the stack and start processing this node\n            var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n            var parentRef = node.parentRef;\n            var siblings = parentRef.getChildKeys();\n            var _index = siblings.indexOf(node.key);\n            var isValidBlock = Array.isArray(node.children);\n            if (!isValidBlock) {\n                !isValidBlock ?  true ? invariant(false, \"invalid RawDraftContentBlock can not be converted to ContentBlockNode\") : 0 : void 0;\n                break;\n            } // ensure children have valid keys to enable sibling links\n            var _children = node.children.map(addKeyIfMissing);\n            var _contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(node, entityMap), {\n                parent: parentRef.getKey(),\n                children: List(_children.map(function(child) {\n                    return child.key;\n                })),\n                prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n                nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n            })); // push node to blockMap\n            blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n            stack = updateNodeStack(stack, _children, _contentBlockNode);\n        }\n        return blockMap;\n    }, OrderedMap());\n};\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {\n    return OrderedMap(blocks.map(function(block) {\n        var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));\n        return [\n            contentBlock.getKey(),\n            contentBlock\n        ];\n    }));\n};\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {\n    var isTreeRawBlock = rawState.blocks.find(function(block) {\n        return Array.isArray(block.children) && block.children.length > 0;\n    });\n    var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n    if (!experimentalTreeDataSupport) {\n        return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityMap);\n    }\n    var blockMap = decodeContentBlockNodes(rawBlocks, entityMap); // in dev mode, check that the tree invariants are met\n    if (true) {\n        !DraftTreeInvariants.isValidTree(blockMap) ?  true ? invariant(false, \"Should be a valid tree\") : 0 : void 0;\n    }\n    return blockMap;\n};\nvar decodeRawEntityMap = function decodeRawEntityMap(rawState) {\n    var rawEntityMap = rawState.entityMap;\n    var entityMap = {}; // TODO: Update this once we completely remove DraftEntity\n    Object.keys(rawEntityMap).forEach(function(rawEntityKey) {\n        var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey], type = _rawEntityMap$rawEnti.type, mutability = _rawEntityMap$rawEnti.mutability, data = _rawEntityMap$rawEnti.data; // get the key reference to created entity\n        entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});\n    });\n    return entityMap;\n};\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n    !Array.isArray(rawState.blocks) ?  true ? invariant(false, \"invalid RawDraftContentState\") : 0 : void 0; // decode entities\n    var entityMap = decodeRawEntityMap(rawState); // decode blockMap\n    var blockMap = decodeRawBlocks(rawState, entityMap); // create initial selection\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n    return new ContentState({\n        blockMap: blockMap,\n        entityMap: entityMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n};\nmodule.exports = convertFromRawToDraftState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/convertFromRawToDraftState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/createCharacterList.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/createCharacterList.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List;\nfunction createCharacterList(inlineStyles, entities) {\n    var characterArray = inlineStyles.map(function(style, ii) {\n        var entity = entities[ii];\n        return CharacterMetadata.create({\n            style: style,\n            entity: entity\n        });\n    });\n    return List(characterArray);\n}\nmodule.exports = createCharacterList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2NyZWF0ZUNoYXJhY3Rlckxpc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxvQkFBb0JDLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUVyRCxJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RkFBVztBQUVuQyxJQUFJRSxPQUFPRCxVQUFVQyxJQUFJO0FBRXpCLFNBQVNDLG9CQUFvQkMsWUFBWSxFQUFFQyxRQUFRO0lBQ2pELElBQUlDLGlCQUFpQkYsYUFBYUcsR0FBRyxDQUFDLFNBQVVDLEtBQUssRUFBRUMsRUFBRTtRQUN2RCxJQUFJQyxTQUFTTCxRQUFRLENBQUNJLEdBQUc7UUFDekIsT0FBT1Ysa0JBQWtCWSxNQUFNLENBQUM7WUFDOUJILE9BQU9BO1lBQ1BFLFFBQVFBO1FBQ1Y7SUFDRjtJQUNBLE9BQU9SLEtBQUtJO0FBQ2Q7QUFFQU0sT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvY3JlYXRlQ2hhcmFjdGVyTGlzdC5qcz9kNzNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoXCIuL0NoYXJhY3Rlck1ldGFkYXRhXCIpO1xuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZShcImltbXV0YWJsZVwiKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdDtcblxuZnVuY3Rpb24gY3JlYXRlQ2hhcmFjdGVyTGlzdChpbmxpbmVTdHlsZXMsIGVudGl0aWVzKSB7XG4gIHZhciBjaGFyYWN0ZXJBcnJheSA9IGlubGluZVN0eWxlcy5tYXAoZnVuY3Rpb24gKHN0eWxlLCBpaSkge1xuICAgIHZhciBlbnRpdHkgPSBlbnRpdGllc1tpaV07XG4gICAgcmV0dXJuIENoYXJhY3Rlck1ldGFkYXRhLmNyZWF0ZSh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICBlbnRpdHk6IGVudGl0eVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIExpc3QoY2hhcmFjdGVyQXJyYXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUNoYXJhY3Rlckxpc3Q7Il0sIm5hbWVzIjpbIkNoYXJhY3Rlck1ldGFkYXRhIiwicmVxdWlyZSIsIkltbXV0YWJsZSIsIkxpc3QiLCJjcmVhdGVDaGFyYWN0ZXJMaXN0IiwiaW5saW5lU3R5bGVzIiwiZW50aXRpZXMiLCJjaGFyYWN0ZXJBcnJheSIsIm1hcCIsInN0eWxlIiwiaWkiLCJlbnRpdHkiLCJjcmVhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/createCharacterList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/decodeEntityRanges.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/decodeEntityRanges.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar substr = UnicodeUtils.substr;\n/**\n * Convert to native JavaScript string lengths to determine ranges.\n */ function decodeEntityRanges(text, ranges) {\n    var entities = Array(text.length).fill(null);\n    if (ranges) {\n        ranges.forEach(function(range) {\n            // Using Unicode-enabled substrings converted to JavaScript lengths,\n            // fill the output array with entity keys.\n            var start = substr(text, 0, range.offset).length;\n            var end = start + substr(text, range.offset, range.length).length;\n            for(var ii = start; ii < end; ii++){\n                entities[ii] = range.key;\n            }\n        });\n    }\n    return entities;\n}\nmodule.exports = decodeEntityRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RlY29kZUVudGl0eVJhbmdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJQyxTQUFTRixhQUFhRSxNQUFNO0FBQ2hDOztDQUVDLEdBRUQsU0FBU0MsbUJBQW1CQyxJQUFJLEVBQUVDLE1BQU07SUFDdEMsSUFBSUMsV0FBV0MsTUFBTUgsS0FBS0ksTUFBTSxFQUFFQyxJQUFJLENBQUM7SUFFdkMsSUFBSUosUUFBUTtRQUNWQSxPQUFPSyxPQUFPLENBQUMsU0FBVUMsS0FBSztZQUM1QixvRUFBb0U7WUFDcEUsMENBQTBDO1lBQzFDLElBQUlDLFFBQVFWLE9BQU9FLE1BQU0sR0FBR08sTUFBTUUsTUFBTSxFQUFFTCxNQUFNO1lBQ2hELElBQUlNLE1BQU1GLFFBQVFWLE9BQU9FLE1BQU1PLE1BQU1FLE1BQU0sRUFBRUYsTUFBTUgsTUFBTSxFQUFFQSxNQUFNO1lBRWpFLElBQUssSUFBSU8sS0FBS0gsT0FBT0csS0FBS0QsS0FBS0MsS0FBTTtnQkFDbkNULFFBQVEsQ0FBQ1MsR0FBRyxHQUFHSixNQUFNSyxHQUFHO1lBQzFCO1FBQ0Y7SUFDRjtJQUVBLE9BQU9WO0FBQ1Q7QUFFQVcsT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZGVjb2RlRW50aXR5UmFuZ2VzLmpzP2VkYjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoXCJmYmpzL2xpYi9Vbmljb2RlVXRpbHNcIik7XG5cbnZhciBzdWJzdHIgPSBVbmljb2RlVXRpbHMuc3Vic3RyO1xuLyoqXG4gKiBDb252ZXJ0IHRvIG5hdGl2ZSBKYXZhU2NyaXB0IHN0cmluZyBsZW5ndGhzIHRvIGRldGVybWluZSByYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlRW50aXR5UmFuZ2VzKHRleHQsIHJhbmdlcykge1xuICB2YXIgZW50aXRpZXMgPSBBcnJheSh0ZXh0Lmxlbmd0aCkuZmlsbChudWxsKTtcblxuICBpZiAocmFuZ2VzKSB7XG4gICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAvLyBVc2luZyBVbmljb2RlLWVuYWJsZWQgc3Vic3RyaW5ncyBjb252ZXJ0ZWQgdG8gSmF2YVNjcmlwdCBsZW5ndGhzLFxuICAgICAgLy8gZmlsbCB0aGUgb3V0cHV0IGFycmF5IHdpdGggZW50aXR5IGtleXMuXG4gICAgICB2YXIgc3RhcnQgPSBzdWJzdHIodGV4dCwgMCwgcmFuZ2Uub2Zmc2V0KS5sZW5ndGg7XG4gICAgICB2YXIgZW5kID0gc3RhcnQgKyBzdWJzdHIodGV4dCwgcmFuZ2Uub2Zmc2V0LCByYW5nZS5sZW5ndGgpLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaWkgPSBzdGFydDsgaWkgPCBlbmQ7IGlpKyspIHtcbiAgICAgICAgZW50aXRpZXNbaWldID0gcmFuZ2Uua2V5O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGVudGl0aWVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZUVudGl0eVJhbmdlczsiXSwibmFtZXMiOlsiVW5pY29kZVV0aWxzIiwicmVxdWlyZSIsInN1YnN0ciIsImRlY29kZUVudGl0eVJhbmdlcyIsInRleHQiLCJyYW5nZXMiLCJlbnRpdGllcyIsIkFycmF5IiwibGVuZ3RoIiwiZmlsbCIsImZvckVhY2giLCJyYW5nZSIsInN0YXJ0Iiwib2Zmc2V0IiwiZW5kIiwiaWkiLCJrZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/decodeEntityRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/decodeInlineStyleRanges.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/decodeInlineStyleRanges.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), OrderedSet = _require.OrderedSet;\nvar substr = UnicodeUtils.substr;\nvar EMPTY_SET = OrderedSet();\n/**\n * Convert to native JavaScript string lengths to determine ranges.\n */ function decodeInlineStyleRanges(text, ranges) {\n    var styles = Array(text.length).fill(EMPTY_SET);\n    if (ranges) {\n        ranges.forEach(function(range) {\n            var cursor = substr(text, 0, range.offset).length;\n            var end = cursor + substr(text, range.offset, range.length).length;\n            while(cursor < end){\n                styles[cursor] = styles[cursor].add(range.style);\n                cursor++;\n            }\n        });\n    }\n    return styles;\n}\nmodule.exports = decodeInlineStyleRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RlY29kZUlubGluZVN0eWxlUmFuZ2VzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUMsNEVBQXVCO0FBRWxELElBQUlDLFdBQVdELG1CQUFPQSxDQUFDLHlGQUFXLEdBQzlCRSxhQUFhRCxTQUFTQyxVQUFVO0FBRXBDLElBQUlDLFNBQVNKLGFBQWFJLE1BQU07QUFDaEMsSUFBSUMsWUFBWUY7QUFDaEI7O0NBRUMsR0FFRCxTQUFTRyx3QkFBd0JDLElBQUksRUFBRUMsTUFBTTtJQUMzQyxJQUFJQyxTQUFTQyxNQUFNSCxLQUFLSSxNQUFNLEVBQUVDLElBQUksQ0FBQ1A7SUFFckMsSUFBSUcsUUFBUTtRQUNWQSxPQUFPSyxPQUFPLENBQUMsU0FBVUMsS0FBSztZQUM1QixJQUFJQyxTQUFTWCxPQUFPRyxNQUFNLEdBQUdPLE1BQU1FLE1BQU0sRUFBRUwsTUFBTTtZQUNqRCxJQUFJTSxNQUFNRixTQUFTWCxPQUFPRyxNQUFNTyxNQUFNRSxNQUFNLEVBQUVGLE1BQU1ILE1BQU0sRUFBRUEsTUFBTTtZQUVsRSxNQUFPSSxTQUFTRSxJQUFLO2dCQUNuQlIsTUFBTSxDQUFDTSxPQUFPLEdBQUdOLE1BQU0sQ0FBQ00sT0FBTyxDQUFDRyxHQUFHLENBQUNKLE1BQU1LLEtBQUs7Z0JBQy9DSjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQVcsT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZGVjb2RlSW5saW5lU3R5bGVSYW5nZXMuanM/ZWIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVW5pY29kZVV0aWxzID0gcmVxdWlyZShcImZianMvbGliL1VuaWNvZGVVdGlsc1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcImltbXV0YWJsZVwiKSxcbiAgICBPcmRlcmVkU2V0ID0gX3JlcXVpcmUuT3JkZXJlZFNldDtcblxudmFyIHN1YnN0ciA9IFVuaWNvZGVVdGlscy5zdWJzdHI7XG52YXIgRU1QVFlfU0VUID0gT3JkZXJlZFNldCgpO1xuLyoqXG4gKiBDb252ZXJ0IHRvIG5hdGl2ZSBKYXZhU2NyaXB0IHN0cmluZyBsZW5ndGhzIHRvIGRldGVybWluZSByYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlSW5saW5lU3R5bGVSYW5nZXModGV4dCwgcmFuZ2VzKSB7XG4gIHZhciBzdHlsZXMgPSBBcnJheSh0ZXh0Lmxlbmd0aCkuZmlsbChFTVBUWV9TRVQpO1xuXG4gIGlmIChyYW5nZXMpIHtcbiAgICByYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgIHZhciBjdXJzb3IgPSBzdWJzdHIodGV4dCwgMCwgcmFuZ2Uub2Zmc2V0KS5sZW5ndGg7XG4gICAgICB2YXIgZW5kID0gY3Vyc29yICsgc3Vic3RyKHRleHQsIHJhbmdlLm9mZnNldCwgcmFuZ2UubGVuZ3RoKS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChjdXJzb3IgPCBlbmQpIHtcbiAgICAgICAgc3R5bGVzW2N1cnNvcl0gPSBzdHlsZXNbY3Vyc29yXS5hZGQocmFuZ2Uuc3R5bGUpO1xuICAgICAgICBjdXJzb3IrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlSW5saW5lU3R5bGVSYW5nZXM7Il0sIm5hbWVzIjpbIlVuaWNvZGVVdGlscyIsInJlcXVpcmUiLCJfcmVxdWlyZSIsIk9yZGVyZWRTZXQiLCJzdWJzdHIiLCJFTVBUWV9TRVQiLCJkZWNvZGVJbmxpbmVTdHlsZVJhbmdlcyIsInRleHQiLCJyYW5nZXMiLCJzdHlsZXMiLCJBcnJheSIsImxlbmd0aCIsImZpbGwiLCJmb3JFYWNoIiwicmFuZ2UiLCJjdXJzb3IiLCJvZmZzZXQiLCJlbmQiLCJhZGQiLCJzdHlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/decodeInlineStyleRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/draftKeyUtils.js ***!
  \****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Provides utilities for handling draftjs keys.\n *\n * @emails oncall+draft_js\n * \n * @format\n */ \nfunction notEmptyKey(key) {\n    return key != null && key != \"\";\n}\nmodule.exports = {\n    notEmptyKey: notEmptyKey\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RyYWZ0S2V5VXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0NBV0MsR0FDRDtBQUVBLFNBQVNBLFlBQVlDLEdBQUc7SUFDdEIsT0FBT0EsT0FBTyxRQUFRQSxPQUFPO0FBQy9CO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNmSCxhQUFhQTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9kcmFmdEtleVV0aWxzLmpzP2Q5MTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBQcm92aWRlcyB1dGlsaXRpZXMgZm9yIGhhbmRsaW5nIGRyYWZ0anMga2V5cy5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICogXG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbm90RW1wdHlLZXkoa2V5KSB7XG4gIHJldHVybiBrZXkgIT0gbnVsbCAmJiBrZXkgIT0gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBub3RFbXB0eUtleTogbm90RW1wdHlLZXlcbn07Il0sIm5hbWVzIjpbIm5vdEVtcHR5S2V5Iiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnBeforeInput.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnBeforeInput.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar getEntityKeyForSelection = __webpack_require__(/*! ./getEntityKeyForSelection */ \"(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar isSelectionAtLeafStart = __webpack_require__(/*! ./isSelectionAtLeafStart */ \"(ssr)/./node_modules/draft-js/lib/isSelectionAtLeafStart.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar setImmediate = __webpack_require__(/*! fbjs/lib/setImmediate */ \"(ssr)/./node_modules/fbjs/lib/setImmediate.js\"); // When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = \"/\";\nvar isFirefox = UserAgent.isBrowser(\"Firefox\");\nfunction mustPreventDefaultForCharacter(character) {\n    return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */ function replaceText(editorState, text, inlineStyle, entityKey, forceSelection) {\n    var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n    return EditorState.push(editorState, contentState, \"insert-characters\", forceSelection);\n}\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */ function editOnBeforeInput(editor, e) {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n        editor.update(editor._pendingStateFromBeforeInput);\n        editor._pendingStateFromBeforeInput = undefined;\n    }\n    var editorState = editor._latestEditorState;\n    var chars = e.data; // In some cases (ex: IE ideographic space insertion) no character data\n    // is provided. There's nothing to do when this happens.\n    if (!chars) {\n        return;\n    } // Allow the top-level component to handle the insertion manually. This is\n    // useful when triggering interesting behaviors for a character insertion,\n    // Simple examples: replacing a raw text ':)' with a smile emoji or image\n    // decorator, or setting a block to be a list item after typing '- ' at the\n    // start of the block.\n    if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState, e.timeStamp))) {\n        e.preventDefault();\n        return;\n    } // If selection is collapsed, conditionally allow native behavior. This\n    // reduces re-renders and preserves spellcheck highlighting. If the selection\n    // is not collapsed, we will re-render.\n    var selection = editorState.getSelection();\n    var selectionStart = selection.getStartOffset();\n    var anchorKey = selection.getAnchorKey();\n    if (!selection.isCollapsed()) {\n        e.preventDefault();\n        editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()), true));\n        return;\n    }\n    var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()), false); // Bunch of different cases follow where we need to prevent native insertion.\n    var mustPreventNative = false;\n    if (!mustPreventNative) {\n        // Browsers tend to insert text in weird places in the DOM when typing at\n        // the start of a leaf, so we'll handle it ourselves.\n        mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n    }\n    if (!mustPreventNative) {\n        // Let's say we have a decorator that highlights hashtags. In many cases\n        // we need to prevent native behavior and rerender ourselves --\n        // particularly, any case *except* where the inserted characters end up\n        // anywhere except exactly where you put them.\n        //\n        // Using [] to denote a decorated leaf, some examples:\n        //\n        // 1. 'hi #' and append 'f'\n        // desired rendering: 'hi [#f]'\n        // native rendering would be: 'hi #f' (incorrect)\n        //\n        // 2. 'x [#foo]' and insert '#' before 'f'\n        // desired rendering: 'x #[#foo]'\n        // native rendering would be: 'x [##foo]' (incorrect)\n        //\n        // 3. '[#foobar]' and insert ' ' between 'foo' and 'bar'\n        // desired rendering: '[#foo] bar'\n        // native rendering would be: '[#foo bar]' (incorrect)\n        //\n        // 4. '[#foo]' and delete '#' [won't use this beforeinput codepath though]\n        // desired rendering: 'foo'\n        // native rendering would be: '[foo]' (incorrect)\n        //\n        // 5. '[#foo]' and append 'b'\n        // desired rendering: '[#foob]'\n        // native rendering would be: '[#foob]'\n        // (native insertion here would be ok for decorators like simple spans,\n        // but not more complex decorators. To be safe, we need to prevent it.)\n        //\n        // It is safe to allow native insertion if and only if the full list of\n        // decorator ranges matches what we expect native insertion to give, and\n        // the range lengths have not changed. We don't need to compare the content\n        // because the only possible mutation to consider here is inserting plain\n        // text and decorators can't affect text content.\n        var oldBlockTree = editorState.getBlockTree(anchorKey);\n        var newBlockTree = newEditorState.getBlockTree(anchorKey);\n        mustPreventNative = oldBlockTree.size !== newBlockTree.size || oldBlockTree.zip(newBlockTree).some(function(_ref) {\n            var oldLeafSet = _ref[0], newLeafSet = _ref[1];\n            // selectionStart is guaranteed to be selectionEnd here\n            var oldStart = oldLeafSet.get(\"start\");\n            var adjustedStart = oldStart + (oldStart >= selectionStart ? chars.length : 0);\n            var oldEnd = oldLeafSet.get(\"end\");\n            var adjustedEnd = oldEnd + (oldEnd >= selectionStart ? chars.length : 0);\n            var newStart = newLeafSet.get(\"start\");\n            var newEnd = newLeafSet.get(\"end\");\n            var newDecoratorKey = newLeafSet.get(\"decoratorKey\");\n            return oldLeafSet.get(\"decoratorKey\") !== newDecoratorKey || // Different number of inline styles\n            oldLeafSet.get(\"leaves\").size !== newLeafSet.get(\"leaves\").size || // Different effective decorator position\n            adjustedStart !== newStart || adjustedEnd !== newEnd || // Decorator already existed and its length changed\n            newDecoratorKey != null && newEnd - newStart !== oldEnd - oldStart;\n        });\n    }\n    if (!mustPreventNative) {\n        mustPreventNative = mustPreventDefaultForCharacter(chars);\n    }\n    if (!mustPreventNative) {\n        mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n    }\n    if (mustPreventNative) {\n        e.preventDefault();\n        newEditorState = EditorState.set(newEditorState, {\n            forceSelection: true\n        });\n        editor.update(newEditorState);\n        return;\n    } // We made it all the way! Let the browser do its thing and insert the char.\n    newEditorState = EditorState.set(newEditorState, {\n        nativelyRenderedContent: newEditorState.getCurrentContent()\n    }); // The native event is allowed to occur. To allow user onChange handlers to\n    // change the inserted text, we wait until the text is actually inserted\n    // before we actually update our state. That way when we rerender, the text\n    // we see in the DOM will already have been inserted properly.\n    editor._pendingStateFromBeforeInput = newEditorState;\n    setImmediate(function() {\n        if (editor._pendingStateFromBeforeInput !== undefined) {\n            editor.update(editor._pendingStateFromBeforeInput);\n            editor._pendingStateFromBeforeInput = undefined;\n        }\n    });\n}\nmodule.exports = editOnBeforeInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnBeforeInput.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnBlur.js":
/*!*************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnBlur.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar containsNode = __webpack_require__(/*! fbjs/lib/containsNode */ \"(ssr)/./node_modules/fbjs/lib/containsNode.js\");\nvar getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ \"(ssr)/./node_modules/fbjs/lib/getActiveElement.js\");\nfunction editOnBlur(editor, e) {\n    // In a contentEditable element, when you select a range and then click\n    // another active element, this does trigger a `blur` event but will not\n    // remove the DOM selection from the contenteditable.\n    // This is consistent across all browsers, but we prefer that the editor\n    // behave like a textarea, where a `blur` event clears the DOM selection.\n    // We therefore force the issue to be certain, checking whether the active\n    // element is `body` to force it when blurring occurs within the window (as\n    // opposed to clicking to another tab or window).\n    var ownerDocument = e.currentTarget.ownerDocument;\n    if (// eslint-disable-next-line no-extra-boolean-cast\n    !Boolean(editor.props.preserveSelectionOnBlur) && getActiveElement(ownerDocument) === ownerDocument.body) {\n        var _selection = ownerDocument.defaultView.getSelection();\n        var editorNode = editor.editor;\n        if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\n            _selection.removeAllRanges();\n        }\n    }\n    var editorState = editor._latestEditorState;\n    var currentSelection = editorState.getSelection();\n    if (!currentSelection.getHasFocus()) {\n        return;\n    }\n    var selection = currentSelection.set(\"hasFocus\", false);\n    editor.props.onBlur && editor.props.onBlur(e);\n    editor.update(EditorState.acceptSelection(editorState, selection));\n}\nmodule.exports = editOnBlur;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkJsdXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyx1RUFBZTtBQUV6QyxJQUFJQyxlQUFlRCxtQkFBT0EsQ0FBQyw0RUFBdUI7QUFFbEQsSUFBSUUsbUJBQW1CRixtQkFBT0EsQ0FBQyxvRkFBMkI7QUFFMUQsU0FBU0csV0FBV0MsTUFBTSxFQUFFQyxDQUFDO0lBQzNCLHVFQUF1RTtJQUN2RSx3RUFBd0U7SUFDeEUscURBQXFEO0lBQ3JELHdFQUF3RTtJQUN4RSx5RUFBeUU7SUFDekUsMEVBQTBFO0lBQzFFLDJFQUEyRTtJQUMzRSxpREFBaUQ7SUFDakQsSUFBSUMsZ0JBQWdCRCxFQUFFRSxhQUFhLENBQUNELGFBQWE7SUFFakQsSUFDQSxpREFBaUQ7SUFDakQsQ0FBQ0UsUUFBUUosT0FBT0ssS0FBSyxDQUFDQyx1QkFBdUIsS0FBS1IsaUJBQWlCSSxtQkFBbUJBLGNBQWNLLElBQUksRUFBRTtRQUN4RyxJQUFJQyxhQUFhTixjQUFjTyxXQUFXLENBQUNDLFlBQVk7UUFFdkQsSUFBSUMsYUFBYVgsT0FBT0EsTUFBTTtRQUU5QixJQUFJUSxXQUFXSSxVQUFVLEtBQUssS0FBS2YsYUFBYWMsWUFBWUgsV0FBV0ssVUFBVSxLQUFLaEIsYUFBYWMsWUFBWUgsV0FBV00sU0FBUyxHQUFHO1lBQ3BJTixXQUFXTyxlQUFlO1FBQzVCO0lBQ0Y7SUFFQSxJQUFJQyxjQUFjaEIsT0FBT2lCLGtCQUFrQjtJQUMzQyxJQUFJQyxtQkFBbUJGLFlBQVlOLFlBQVk7SUFFL0MsSUFBSSxDQUFDUSxpQkFBaUJDLFdBQVcsSUFBSTtRQUNuQztJQUNGO0lBRUEsSUFBSUMsWUFBWUYsaUJBQWlCRyxHQUFHLENBQUMsWUFBWTtJQUNqRHJCLE9BQU9LLEtBQUssQ0FBQ2lCLE1BQU0sSUFBSXRCLE9BQU9LLEtBQUssQ0FBQ2lCLE1BQU0sQ0FBQ3JCO0lBQzNDRCxPQUFPdUIsTUFBTSxDQUFDNUIsWUFBWTZCLGVBQWUsQ0FBQ1IsYUFBYUk7QUFDekQ7QUFFQUssT0FBT0MsT0FBTyxHQUFHM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkJsdXIuanM/NDVkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoXCJmYmpzL2xpYi9jb250YWluc05vZGVcIik7XG5cbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGVkaXRPbkJsdXIoZWRpdG9yLCBlKSB7XG4gIC8vIEluIGEgY29udGVudEVkaXRhYmxlIGVsZW1lbnQsIHdoZW4geW91IHNlbGVjdCBhIHJhbmdlIGFuZCB0aGVuIGNsaWNrXG4gIC8vIGFub3RoZXIgYWN0aXZlIGVsZW1lbnQsIHRoaXMgZG9lcyB0cmlnZ2VyIGEgYGJsdXJgIGV2ZW50IGJ1dCB3aWxsIG5vdFxuICAvLyByZW1vdmUgdGhlIERPTSBzZWxlY3Rpb24gZnJvbSB0aGUgY29udGVudGVkaXRhYmxlLlxuICAvLyBUaGlzIGlzIGNvbnNpc3RlbnQgYWNyb3NzIGFsbCBicm93c2VycywgYnV0IHdlIHByZWZlciB0aGF0IHRoZSBlZGl0b3JcbiAgLy8gYmVoYXZlIGxpa2UgYSB0ZXh0YXJlYSwgd2hlcmUgYSBgYmx1cmAgZXZlbnQgY2xlYXJzIHRoZSBET00gc2VsZWN0aW9uLlxuICAvLyBXZSB0aGVyZWZvcmUgZm9yY2UgdGhlIGlzc3VlIHRvIGJlIGNlcnRhaW4sIGNoZWNraW5nIHdoZXRoZXIgdGhlIGFjdGl2ZVxuICAvLyBlbGVtZW50IGlzIGBib2R5YCB0byBmb3JjZSBpdCB3aGVuIGJsdXJyaW5nIG9jY3VycyB3aXRoaW4gdGhlIHdpbmRvdyAoYXNcbiAgLy8gb3Bwb3NlZCB0byBjbGlja2luZyB0byBhbm90aGVyIHRhYiBvciB3aW5kb3cpLlxuICB2YXIgb3duZXJEb2N1bWVudCA9IGUuY3VycmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuXG4gIGlmICggLy8gVGhpcyBFU0xpbnQgcnVsZSBjb25mbGljdHMgd2l0aCBgc2tldGNoeS1udWxsLWJvb2xgIGZsb3cgY2hlY2tcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAhQm9vbGVhbihlZGl0b3IucHJvcHMucHJlc2VydmVTZWxlY3Rpb25PbkJsdXIpICYmIGdldEFjdGl2ZUVsZW1lbnQob3duZXJEb2N1bWVudCkgPT09IG93bmVyRG9jdW1lbnQuYm9keSkge1xuICAgIHZhciBfc2VsZWN0aW9uID0gb3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRTZWxlY3Rpb24oKTtcblxuICAgIHZhciBlZGl0b3JOb2RlID0gZWRpdG9yLmVkaXRvcjtcblxuICAgIGlmIChfc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDEgJiYgY29udGFpbnNOb2RlKGVkaXRvck5vZGUsIF9zZWxlY3Rpb24uYW5jaG9yTm9kZSkgJiYgY29udGFpbnNOb2RlKGVkaXRvck5vZGUsIF9zZWxlY3Rpb24uZm9jdXNOb2RlKSkge1xuICAgICAgX3NlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gIGlmICghY3VycmVudFNlbGVjdGlvbi5nZXRIYXNGb2N1cygpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb24uc2V0KCdoYXNGb2N1cycsIGZhbHNlKTtcbiAgZWRpdG9yLnByb3BzLm9uQmx1ciAmJiBlZGl0b3IucHJvcHMub25CbHVyKGUpO1xuICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLmFjY2VwdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uQmx1cjsiXSwibmFtZXMiOlsiRWRpdG9yU3RhdGUiLCJyZXF1aXJlIiwiY29udGFpbnNOb2RlIiwiZ2V0QWN0aXZlRWxlbWVudCIsImVkaXRPbkJsdXIiLCJlZGl0b3IiLCJlIiwib3duZXJEb2N1bWVudCIsImN1cnJlbnRUYXJnZXQiLCJCb29sZWFuIiwicHJvcHMiLCJwcmVzZXJ2ZVNlbGVjdGlvbk9uQmx1ciIsImJvZHkiLCJfc2VsZWN0aW9uIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJlZGl0b3JOb2RlIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJmb2N1c05vZGUiLCJyZW1vdmVBbGxSYW5nZXMiLCJlZGl0b3JTdGF0ZSIsIl9sYXRlc3RFZGl0b3JTdGF0ZSIsImN1cnJlbnRTZWxlY3Rpb24iLCJnZXRIYXNGb2N1cyIsInNlbGVjdGlvbiIsInNldCIsIm9uQmx1ciIsInVwZGF0ZSIsImFjY2VwdFNlbGVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnBlur.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnCompositionStart.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnCompositionStart.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\n/**\n * The user has begun using an IME input system. Switching to `composite` mode\n * allows handling composition input and disables other edit behavior.\n */ function editOnCompositionStart(editor, e) {\n    editor.setMode(\"composite\");\n    editor.update(EditorState.set(editor._latestEditorState, {\n        inCompositionMode: true\n    })); // Allow composition handler to interpret the compositionstart event\n    editor._onCompositionStart(e);\n}\nmodule.exports = editOnCompositionStart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkNvbXBvc2l0aW9uU3RhcnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyx1RUFBZTtBQUN6Qzs7O0NBR0MsR0FHRCxTQUFTQyx1QkFBdUJDLE1BQU0sRUFBRUMsQ0FBQztJQUN2Q0QsT0FBT0UsT0FBTyxDQUFDO0lBQ2ZGLE9BQU9HLE1BQU0sQ0FBQ04sWUFBWU8sR0FBRyxDQUFDSixPQUFPSyxrQkFBa0IsRUFBRTtRQUN2REMsbUJBQW1CO0lBQ3JCLEtBQUssb0VBQW9FO0lBRXpFTixPQUFPTyxtQkFBbUIsQ0FBQ047QUFDN0I7QUFFQU8sT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uQ29tcG9zaXRpb25TdGFydC5qcz84OTI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuLyoqXG4gKiBUaGUgdXNlciBoYXMgYmVndW4gdXNpbmcgYW4gSU1FIGlucHV0IHN5c3RlbS4gU3dpdGNoaW5nIHRvIGBjb21wb3NpdGVgIG1vZGVcbiAqIGFsbG93cyBoYW5kbGluZyBjb21wb3NpdGlvbiBpbnB1dCBhbmQgZGlzYWJsZXMgb3RoZXIgZWRpdCBiZWhhdmlvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGVkaXRPbkNvbXBvc2l0aW9uU3RhcnQoZWRpdG9yLCBlKSB7XG4gIGVkaXRvci5zZXRNb2RlKCdjb21wb3NpdGUnKTtcbiAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSwge1xuICAgIGluQ29tcG9zaXRpb25Nb2RlOiB0cnVlXG4gIH0pKTsgLy8gQWxsb3cgY29tcG9zaXRpb24gaGFuZGxlciB0byBpbnRlcnByZXQgdGhlIGNvbXBvc2l0aW9uc3RhcnQgZXZlbnRcblxuICBlZGl0b3IuX29uQ29tcG9zaXRpb25TdGFydChlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25Db21wb3NpdGlvblN0YXJ0OyJdLCJuYW1lcyI6WyJFZGl0b3JTdGF0ZSIsInJlcXVpcmUiLCJlZGl0T25Db21wb3NpdGlvblN0YXJ0IiwiZWRpdG9yIiwiZSIsInNldE1vZGUiLCJ1cGRhdGUiLCJzZXQiLCJfbGF0ZXN0RWRpdG9yU3RhdGUiLCJpbkNvbXBvc2l0aW9uTW9kZSIsIl9vbkNvbXBvc2l0aW9uU3RhcnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnCompositionStart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnCopy.js":
/*!*************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnCopy.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getFragmentFromSelection = __webpack_require__(/*! ./getFragmentFromSelection */ \"(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js\");\n/**\n * If we have a selection, create a ContentState fragment and store\n * it in our internal clipboard. Subsequent paste events will use this\n * fragment if no external clipboard data is supplied.\n */ function editOnCopy(editor, e) {\n    var editorState = editor._latestEditorState;\n    var selection = editorState.getSelection(); // No selection, so there's nothing to copy.\n    if (selection.isCollapsed()) {\n        e.preventDefault();\n        return;\n    }\n    editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\n}\nmodule.exports = editOnCopy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkNvcHkuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSwyQkFBMkJDLG1CQUFPQSxDQUFDLGlHQUE0QjtBQUNuRTs7OztDQUlDLEdBR0QsU0FBU0MsV0FBV0MsTUFBTSxFQUFFQyxDQUFDO0lBQzNCLElBQUlDLGNBQWNGLE9BQU9HLGtCQUFrQjtJQUMzQyxJQUFJQyxZQUFZRixZQUFZRyxZQUFZLElBQUksNENBQTRDO0lBRXhGLElBQUlELFVBQVVFLFdBQVcsSUFBSTtRQUMzQkwsRUFBRU0sY0FBYztRQUNoQjtJQUNGO0lBRUFQLE9BQU9RLFlBQVksQ0FBQ1gseUJBQXlCRyxPQUFPRyxrQkFBa0I7QUFDeEU7QUFFQU0sT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uQ29weS5qcz9lNzVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9nZXRGcmFnbWVudEZyb21TZWxlY3Rpb25cIik7XG4vKipcbiAqIElmIHdlIGhhdmUgYSBzZWxlY3Rpb24sIGNyZWF0ZSBhIENvbnRlbnRTdGF0ZSBmcmFnbWVudCBhbmQgc3RvcmVcbiAqIGl0IGluIG91ciBpbnRlcm5hbCBjbGlwYm9hcmQuIFN1YnNlcXVlbnQgcGFzdGUgZXZlbnRzIHdpbGwgdXNlIHRoaXNcbiAqIGZyYWdtZW50IGlmIG5vIGV4dGVybmFsIGNsaXBib2FyZCBkYXRhIGlzIHN1cHBsaWVkLlxuICovXG5cblxuZnVuY3Rpb24gZWRpdE9uQ29weShlZGl0b3IsIGUpIHtcbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpOyAvLyBObyBzZWxlY3Rpb24sIHNvIHRoZXJlJ3Mgbm90aGluZyB0byBjb3B5LlxuXG4gIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBlZGl0b3Iuc2V0Q2xpcGJvYXJkKGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbihlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uQ29weTsiXSwibmFtZXMiOlsiZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uIiwicmVxdWlyZSIsImVkaXRPbkNvcHkiLCJlZGl0b3IiLCJlIiwiZWRpdG9yU3RhdGUiLCJfbGF0ZXN0RWRpdG9yU3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJpc0NvbGxhcHNlZCIsInByZXZlbnREZWZhdWx0Iiwic2V0Q2xpcGJvYXJkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnCopy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnCut.js":
/*!************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnCut.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar getFragmentFromSelection = __webpack_require__(/*! ./getFragmentFromSelection */ \"(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar isNode = __webpack_require__(/*! ./isInstanceOfNode */ \"(ssr)/./node_modules/draft-js/lib/isInstanceOfNode.js\");\n/**\n * On `cut` events, native behavior is allowed to occur so that the system\n * clipboard is set properly. This means that we need to take steps to recover\n * the editor DOM state after the `cut` has occurred in order to maintain\n * control of the component.\n *\n * In addition, we can keep a copy of the removed fragment, including all\n * styles and entities, for use as an internal paste.\n */ function editOnCut(editor, e) {\n    var editorState = editor._latestEditorState;\n    var selection = editorState.getSelection();\n    var element = e.target;\n    var scrollPosition; // No selection, so there's nothing to cut.\n    if (selection.isCollapsed()) {\n        e.preventDefault();\n        return;\n    } // Track the current scroll position so that it can be forced back in place\n    // after the editor regains control of the DOM.\n    if (isNode(element)) {\n        var node = element;\n        scrollPosition = getScrollPosition(Style.getScrollParent(node));\n    }\n    var fragment = getFragmentFromSelection(editorState);\n    editor.setClipboard(fragment); // Set `cut` mode to disable all event handling temporarily.\n    editor.setMode(\"cut\"); // Let native `cut` behavior occur, then recover control.\n    setTimeout(function() {\n        editor.restoreEditorDOM(scrollPosition);\n        editor.exitCurrentMode();\n        editor.update(removeFragment(editorState));\n    }, 0);\n}\nfunction removeFragment(editorState) {\n    var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), \"forward\");\n    return EditorState.push(editorState, newContent, \"remove-range\");\n}\nmodule.exports = editOnCut;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkN1dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGdCQUFnQkMsbUJBQU9BLENBQUMsMkVBQWlCO0FBRTdDLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDLDhEQUFnQjtBQUVwQyxJQUFJRywyQkFBMkJILG1CQUFPQSxDQUFDLGlHQUE0QjtBQUVuRSxJQUFJSSxvQkFBb0JKLG1CQUFPQSxDQUFDLHNGQUE0QjtBQUU1RCxJQUFJSyxTQUFTTCxtQkFBT0EsQ0FBQyxpRkFBb0I7QUFDekM7Ozs7Ozs7O0NBUUMsR0FHRCxTQUFTTSxVQUFVQyxNQUFNLEVBQUVDLENBQUM7SUFDMUIsSUFBSUMsY0FBY0YsT0FBT0csa0JBQWtCO0lBQzNDLElBQUlDLFlBQVlGLFlBQVlHLFlBQVk7SUFDeEMsSUFBSUMsVUFBVUwsRUFBRU0sTUFBTTtJQUN0QixJQUFJQyxnQkFBZ0IsMkNBQTJDO0lBRS9ELElBQUlKLFVBQVVLLFdBQVcsSUFBSTtRQUMzQlIsRUFBRVMsY0FBYztRQUNoQjtJQUNGLEVBQUUsMkVBQTJFO0lBQzdFLCtDQUErQztJQUcvQyxJQUFJWixPQUFPUSxVQUFVO1FBQ25CLElBQUlLLE9BQU9MO1FBQ1hFLGlCQUFpQlgsa0JBQWtCRixNQUFNaUIsZUFBZSxDQUFDRDtJQUMzRDtJQUVBLElBQUlFLFdBQVdqQix5QkFBeUJNO0lBQ3hDRixPQUFPYyxZQUFZLENBQUNELFdBQVcsNERBQTREO0lBRTNGYixPQUFPZSxPQUFPLENBQUMsUUFBUSx5REFBeUQ7SUFFaEZDLFdBQVc7UUFDVGhCLE9BQU9pQixnQkFBZ0IsQ0FBQ1Q7UUFDeEJSLE9BQU9rQixlQUFlO1FBQ3RCbEIsT0FBT21CLE1BQU0sQ0FBQ0MsZUFBZWxCO0lBQy9CLEdBQUc7QUFDTDtBQUVBLFNBQVNrQixlQUFlbEIsV0FBVztJQUNqQyxJQUFJbUIsYUFBYTdCLGNBQWM4QixXQUFXLENBQUNwQixZQUFZcUIsaUJBQWlCLElBQUlyQixZQUFZRyxZQUFZLElBQUk7SUFDeEcsT0FBT1gsWUFBWThCLElBQUksQ0FBQ3RCLGFBQWFtQixZQUFZO0FBQ25EO0FBRUFJLE9BQU9DLE9BQU8sR0FBRzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25DdXQuanM/ODYyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoXCIuL0RyYWZ0TW9kaWZpZXJcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgU3R5bGUgPSByZXF1aXJlKFwiZmJqcy9saWIvU3R5bGVcIik7XG5cbnZhciBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9nZXRGcmFnbWVudEZyb21TZWxlY3Rpb25cIik7XG5cbnZhciBnZXRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoXCJmYmpzL2xpYi9nZXRTY3JvbGxQb3NpdGlvblwiKTtcblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoXCIuL2lzSW5zdGFuY2VPZk5vZGVcIik7XG4vKipcbiAqIE9uIGBjdXRgIGV2ZW50cywgbmF0aXZlIGJlaGF2aW9yIGlzIGFsbG93ZWQgdG8gb2NjdXIgc28gdGhhdCB0aGUgc3lzdGVtXG4gKiBjbGlwYm9hcmQgaXMgc2V0IHByb3Blcmx5LiBUaGlzIG1lYW5zIHRoYXQgd2UgbmVlZCB0byB0YWtlIHN0ZXBzIHRvIHJlY292ZXJcbiAqIHRoZSBlZGl0b3IgRE9NIHN0YXRlIGFmdGVyIHRoZSBgY3V0YCBoYXMgb2NjdXJyZWQgaW4gb3JkZXIgdG8gbWFpbnRhaW5cbiAqIGNvbnRyb2wgb2YgdGhlIGNvbXBvbmVudC5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgd2UgY2FuIGtlZXAgYSBjb3B5IG9mIHRoZSByZW1vdmVkIGZyYWdtZW50LCBpbmNsdWRpbmcgYWxsXG4gKiBzdHlsZXMgYW5kIGVudGl0aWVzLCBmb3IgdXNlIGFzIGFuIGludGVybmFsIHBhc3RlLlxuICovXG5cblxuZnVuY3Rpb24gZWRpdE9uQ3V0KGVkaXRvciwgZSkge1xuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG4gIHZhciBzY3JvbGxQb3NpdGlvbjsgLy8gTm8gc2VsZWN0aW9uLCBzbyB0aGVyZSdzIG5vdGhpbmcgdG8gY3V0LlxuXG4gIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm47XG4gIH0gLy8gVHJhY2sgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHNvIHRoYXQgaXQgY2FuIGJlIGZvcmNlZCBiYWNrIGluIHBsYWNlXG4gIC8vIGFmdGVyIHRoZSBlZGl0b3IgcmVnYWlucyBjb250cm9sIG9mIHRoZSBET00uXG5cblxuICBpZiAoaXNOb2RlKGVsZW1lbnQpKSB7XG4gICAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICAgIHNjcm9sbFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oU3R5bGUuZ2V0U2Nyb2xsUGFyZW50KG5vZGUpKTtcbiAgfVxuXG4gIHZhciBmcmFnbWVudCA9IGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbihlZGl0b3JTdGF0ZSk7XG4gIGVkaXRvci5zZXRDbGlwYm9hcmQoZnJhZ21lbnQpOyAvLyBTZXQgYGN1dGAgbW9kZSB0byBkaXNhYmxlIGFsbCBldmVudCBoYW5kbGluZyB0ZW1wb3JhcmlseS5cblxuICBlZGl0b3Iuc2V0TW9kZSgnY3V0Jyk7IC8vIExldCBuYXRpdmUgYGN1dGAgYmVoYXZpb3Igb2NjdXIsIHRoZW4gcmVjb3ZlciBjb250cm9sLlxuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGVkaXRvci5yZXN0b3JlRWRpdG9yRE9NKHNjcm9sbFBvc2l0aW9uKTtcbiAgICBlZGl0b3IuZXhpdEN1cnJlbnRNb2RlKCk7XG4gICAgZWRpdG9yLnVwZGF0ZShyZW1vdmVGcmFnbWVudChlZGl0b3JTdGF0ZSkpO1xuICB9LCAwKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRnJhZ21lbnQoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIG5ld0NvbnRlbnQgPSBEcmFmdE1vZGlmaWVyLnJlbW92ZVJhbmdlKGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCAnZm9yd2FyZCcpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgbmV3Q29udGVudCwgJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkN1dDsiXSwibmFtZXMiOlsiRHJhZnRNb2RpZmllciIsInJlcXVpcmUiLCJFZGl0b3JTdGF0ZSIsIlN0eWxlIiwiZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJpc05vZGUiLCJlZGl0T25DdXQiLCJlZGl0b3IiLCJlIiwiZWRpdG9yU3RhdGUiLCJfbGF0ZXN0RWRpdG9yU3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJlbGVtZW50IiwidGFyZ2V0Iiwic2Nyb2xsUG9zaXRpb24iLCJpc0NvbGxhcHNlZCIsInByZXZlbnREZWZhdWx0Iiwibm9kZSIsImdldFNjcm9sbFBhcmVudCIsImZyYWdtZW50Iiwic2V0Q2xpcGJvYXJkIiwic2V0TW9kZSIsInNldFRpbWVvdXQiLCJyZXN0b3JlRWRpdG9yRE9NIiwiZXhpdEN1cnJlbnRNb2RlIiwidXBkYXRlIiwicmVtb3ZlRnJhZ21lbnQiLCJuZXdDb250ZW50IiwicmVtb3ZlUmFuZ2UiLCJnZXRDdXJyZW50Q29udGVudCIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnCut.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnDragOver.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnDragOver.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Drag behavior has begun from outside the editor element.\n */ function editOnDragOver(editor, e) {\n    editor.setMode(\"drag\");\n    e.preventDefault();\n}\nmodule.exports = editOnDragOver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdPdmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUE7O0NBRUMsR0FDRCxTQUFTQSxlQUFlQyxNQUFNLEVBQUVDLENBQUM7SUFDL0JELE9BQU9FLE9BQU8sQ0FBQztJQUNmRCxFQUFFRSxjQUFjO0FBQ2xCO0FBRUFDLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdPdmVyLmpzP2VmNmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEcmFnIGJlaGF2aW9yIGhhcyBiZWd1biBmcm9tIG91dHNpZGUgdGhlIGVkaXRvciBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBlZGl0T25EcmFnT3ZlcihlZGl0b3IsIGUpIHtcbiAgZWRpdG9yLnNldE1vZGUoJ2RyYWcnKTtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkRyYWdPdmVyOyJdLCJuYW1lcyI6WyJlZGl0T25EcmFnT3ZlciIsImVkaXRvciIsImUiLCJzZXRNb2RlIiwicHJldmVudERlZmF1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnDragOver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnDragStart.js":
/*!******************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnDragStart.js ***!
  \******************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * A `dragstart` event has begun within the text editor component.\n */ function editOnDragStart(editor) {\n    editor._internalDrag = true;\n    editor.setMode(\"drag\");\n}\nmodule.exports = editOnDragStart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdTdGFydC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBOztDQUVDLEdBQ0QsU0FBU0EsZ0JBQWdCQyxNQUFNO0lBQzdCQSxPQUFPQyxhQUFhLEdBQUc7SUFDdkJELE9BQU9FLE9BQU8sQ0FBQztBQUNqQjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25EcmFnU3RhcnQuanM/YmZmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYGRyYWdzdGFydGAgZXZlbnQgaGFzIGJlZ3VuIHdpdGhpbiB0aGUgdGV4dCBlZGl0b3IgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBlZGl0T25EcmFnU3RhcnQoZWRpdG9yKSB7XG4gIGVkaXRvci5faW50ZXJuYWxEcmFnID0gdHJ1ZTtcbiAgZWRpdG9yLnNldE1vZGUoJ2RyYWcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25EcmFnU3RhcnQ7Il0sIm5hbWVzIjpbImVkaXRPbkRyYWdTdGFydCIsImVkaXRvciIsIl9pbnRlcm5hbERyYWciLCJzZXRNb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnDragStart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnFocus.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnFocus.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nfunction editOnFocus(editor, e) {\n    var editorState = editor._latestEditorState;\n    var currentSelection = editorState.getSelection();\n    if (currentSelection.getHasFocus()) {\n        return;\n    }\n    var selection = currentSelection.set(\"hasFocus\", true);\n    editor.props.onFocus && editor.props.onFocus(e); // When the tab containing this text editor is hidden and the user does a\n    // find-in-page in a _different_ tab, Chrome on Mac likes to forget what the\n    // selection was right after sending this focus event and (if you let it)\n    // moves the cursor back to the beginning of the editor, so we force the\n    // selection here instead of simply accepting it in order to preserve the\n    // old cursor position. See https://crbug.com/540004.\n    // But it looks like this is fixed in Chrome 60.0.3081.0.\n    // Other browsers also don't have this bug, so we prefer to acceptSelection\n    // when possible, to ensure that unfocusing and refocusing a Draft editor\n    // doesn't preserve the selection, matching how textareas work.\n    if (UserAgent.isBrowser(\"Chrome < 60.0.3081.0\")) {\n        editor.update(EditorState.forceSelection(editorState, selection));\n    } else {\n        editor.update(EditorState.acceptSelection(editorState, selection));\n    }\n}\nmodule.exports = editOnFocus;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkZvY3VzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLFNBQVNFLFlBQVlDLE1BQU0sRUFBRUMsQ0FBQztJQUM1QixJQUFJQyxjQUFjRixPQUFPRyxrQkFBa0I7SUFDM0MsSUFBSUMsbUJBQW1CRixZQUFZRyxZQUFZO0lBRS9DLElBQUlELGlCQUFpQkUsV0FBVyxJQUFJO1FBQ2xDO0lBQ0Y7SUFFQSxJQUFJQyxZQUFZSCxpQkFBaUJJLEdBQUcsQ0FBQyxZQUFZO0lBQ2pEUixPQUFPUyxLQUFLLENBQUNDLE9BQU8sSUFBSVYsT0FBT1MsS0FBSyxDQUFDQyxPQUFPLENBQUNULElBQUkseUVBQXlFO0lBQzFILDRFQUE0RTtJQUM1RSx5RUFBeUU7SUFDekUsd0VBQXdFO0lBQ3hFLHlFQUF5RTtJQUN6RSxxREFBcUQ7SUFDckQseURBQXlEO0lBQ3pELDJFQUEyRTtJQUMzRSx5RUFBeUU7SUFDekUsK0RBQStEO0lBRS9ELElBQUlILFVBQVVhLFNBQVMsQ0FBQyx5QkFBeUI7UUFDL0NYLE9BQU9ZLE1BQU0sQ0FBQ2hCLFlBQVlpQixjQUFjLENBQUNYLGFBQWFLO0lBQ3hELE9BQU87UUFDTFAsT0FBT1ksTUFBTSxDQUFDaEIsWUFBWWtCLGVBQWUsQ0FBQ1osYUFBYUs7SUFDekQ7QUFDRjtBQUVBUSxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uRm9jdXMuanM/YmM1OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9Vc2VyQWdlbnRcIik7XG5cbmZ1bmN0aW9uIGVkaXRPbkZvY3VzKGVkaXRvciwgZSkge1xuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gIGlmIChjdXJyZW50U2VsZWN0aW9uLmdldEhhc0ZvY3VzKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbi5zZXQoJ2hhc0ZvY3VzJywgdHJ1ZSk7XG4gIGVkaXRvci5wcm9wcy5vbkZvY3VzICYmIGVkaXRvci5wcm9wcy5vbkZvY3VzKGUpOyAvLyBXaGVuIHRoZSB0YWIgY29udGFpbmluZyB0aGlzIHRleHQgZWRpdG9yIGlzIGhpZGRlbiBhbmQgdGhlIHVzZXIgZG9lcyBhXG4gIC8vIGZpbmQtaW4tcGFnZSBpbiBhIF9kaWZmZXJlbnRfIHRhYiwgQ2hyb21lIG9uIE1hYyBsaWtlcyB0byBmb3JnZXQgd2hhdCB0aGVcbiAgLy8gc2VsZWN0aW9uIHdhcyByaWdodCBhZnRlciBzZW5kaW5nIHRoaXMgZm9jdXMgZXZlbnQgYW5kIChpZiB5b3UgbGV0IGl0KVxuICAvLyBtb3ZlcyB0aGUgY3Vyc29yIGJhY2sgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgZWRpdG9yLCBzbyB3ZSBmb3JjZSB0aGVcbiAgLy8gc2VsZWN0aW9uIGhlcmUgaW5zdGVhZCBvZiBzaW1wbHkgYWNjZXB0aW5nIGl0IGluIG9yZGVyIHRvIHByZXNlcnZlIHRoZVxuICAvLyBvbGQgY3Vyc29yIHBvc2l0aW9uLiBTZWUgaHR0cHM6Ly9jcmJ1Zy5jb20vNTQwMDA0LlxuICAvLyBCdXQgaXQgbG9va3MgbGlrZSB0aGlzIGlzIGZpeGVkIGluIENocm9tZSA2MC4wLjMwODEuMC5cbiAgLy8gT3RoZXIgYnJvd3NlcnMgYWxzbyBkb24ndCBoYXZlIHRoaXMgYnVnLCBzbyB3ZSBwcmVmZXIgdG8gYWNjZXB0U2VsZWN0aW9uXG4gIC8vIHdoZW4gcG9zc2libGUsIHRvIGVuc3VyZSB0aGF0IHVuZm9jdXNpbmcgYW5kIHJlZm9jdXNpbmcgYSBEcmFmdCBlZGl0b3JcbiAgLy8gZG9lc24ndCBwcmVzZXJ2ZSB0aGUgc2VsZWN0aW9uLCBtYXRjaGluZyBob3cgdGV4dGFyZWFzIHdvcmsuXG5cbiAgaWYgKFVzZXJBZ2VudC5pc0Jyb3dzZXIoJ0Nocm9tZSA8IDYwLjAuMzA4MS4wJykpIHtcbiAgICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLmZvcmNlU2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pKTtcbiAgfSBlbHNlIHtcbiAgICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLmFjY2VwdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25Gb2N1czsiXSwibmFtZXMiOlsiRWRpdG9yU3RhdGUiLCJyZXF1aXJlIiwiVXNlckFnZW50IiwiZWRpdE9uRm9jdXMiLCJlZGl0b3IiLCJlIiwiZWRpdG9yU3RhdGUiLCJfbGF0ZXN0RWRpdG9yU3RhdGUiLCJjdXJyZW50U2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0SGFzRm9jdXMiLCJzZWxlY3Rpb24iLCJzZXQiLCJwcm9wcyIsIm9uRm9jdXMiLCJpc0Jyb3dzZXIiLCJ1cGRhdGUiLCJmb3JjZVNlbGVjdGlvbiIsImFjY2VwdFNlbGVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnFocus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnInput.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnInput.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar _require = __webpack_require__(/*! ./draftKeyUtils */ \"(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js\"), notEmptyKey = _require.notEmptyKey;\nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar keyCommandPlainBackspace = __webpack_require__(/*! ./keyCommandPlainBackspace */ \"(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar isGecko = UserAgent.isEngine(\"Gecko\");\nvar DOUBLE_NEWLINE = \"\\n\\n\";\nfunction onInputType(inputType, editorState) {\n    switch(inputType){\n        case \"deleteContentBackward\":\n            return keyCommandPlainBackspace(editorState);\n    }\n    return editorState;\n}\n/**\n * This function serves two purposes\n *\n * 1. To update the editorState and call onChange method with the new\n * editorState. This editorState is calculated in editOnBeforeInput but the\n * onChange method is not called with the new state until this method does it.\n * It is done to handle a specific case where certain character inputs might\n * be replaced with something else. E.g. snippets ('rc' might be replaced\n * with boilerplate code for react component). More information on the\n * exact problem can be found here -\n * https://github.com/facebook/draft-js/commit/07892ba479bd4dfc6afd1e0ed179aaf51cd138b1\n *\n * 2. intended to handle spellcheck and autocorrect changes,\n * which occur in the DOM natively without any opportunity to observe or\n * interpret the changes before they occur.\n *\n * The `input` event fires in contentEditable elements reliably for non-IE\n * browsers, immediately after changes occur to the editor DOM. Since our other\n * handlers override or otherwise handle cover other varieties of text input,\n * the DOM state should match the model in all controlled input cases. Thus,\n * when an `input` change leads to a DOM/model mismatch, the change should be\n * due to a spellcheck change, and we can incorporate it into our model.\n */ function editOnInput(editor, e) {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n        editor.update(editor._pendingStateFromBeforeInput);\n        editor._pendingStateFromBeforeInput = undefined;\n    } // at this point editor is not null for sure (after input)\n    var castedEditorElement = editor.editor;\n    var domSelection = castedEditorElement.ownerDocument.defaultView.getSelection();\n    var anchorNode = domSelection.anchorNode, isCollapsed = domSelection.isCollapsed;\n    var isNotTextOrElementNode = (anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.nodeType) !== Node.TEXT_NODE && (anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.nodeType) !== Node.ELEMENT_NODE;\n    if (anchorNode == null || isNotTextOrElementNode) {\n        // TODO: (t16149272) figure out context for this change\n        return;\n    }\n    if (anchorNode.nodeType === Node.TEXT_NODE && (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)) {\n        // When typing at the beginning of a visual line, Chrome splits the text\n        // nodes into two. Why? No one knows. This commit is suspicious:\n        // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\n        // To work around, we'll merge the sibling text nodes back into this one.\n        var span = anchorNode.parentNode;\n        if (span == null) {\n            // Handle null-parent case.\n            return;\n        }\n        anchorNode.nodeValue = span.textContent;\n        for(var child = span.firstChild; child != null; child = child.nextSibling){\n            if (child !== anchorNode) {\n                span.removeChild(child);\n            }\n        }\n    }\n    var domText = anchorNode.textContent;\n    var editorState = editor._latestEditorState;\n    var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\n    var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey), blockKey = _DraftOffsetKey$decod.blockKey, decoratorKey = _DraftOffsetKey$decod.decoratorKey, leafKey = _DraftOffsetKey$decod.leafKey;\n    var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([\n        decoratorKey,\n        \"leaves\",\n        leafKey\n    ]), start = _editorState$getBlock.start, end = _editorState$getBlock.end;\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(blockKey);\n    var modelText = block.getText().slice(start, end); // Special-case soft newlines here. If the DOM text ends in a soft newline,\n    // we will have manually inserted an extra soft newline in DraftEditorLeaf.\n    // We want to remove this extra newline for the purpose of our comparison\n    // of DOM and model text.\n    if (domText.endsWith(DOUBLE_NEWLINE)) {\n        domText = domText.slice(0, -1);\n    } // No change -- the DOM is up to date. Nothing to do here.\n    if (domText === modelText) {\n        // This can be buggy for some Android keyboards because they don't fire\n        // standard onkeydown/pressed events and only fired editOnInput\n        // so domText is already changed by the browser and ends up being equal\n        // to modelText unexpectedly.\n        // Newest versions of Android support the dom-inputevent-inputtype\n        // and we can use the `inputType` to properly apply the state changes.\n        /* $FlowFixMe[prop-missing] inputType is only defined on a draft of a\n     * standard. https://w3c.github.io/input-events/#dom-inputevent-inputtype\n     */ var inputType = e.nativeEvent.inputType;\n        if (inputType) {\n            var newEditorState = onInputType(inputType, editorState);\n            if (newEditorState !== editorState) {\n                editor.restoreEditorDOM();\n                editor.update(newEditorState);\n                return;\n            }\n        }\n        return;\n    }\n    var selection = editorState.getSelection(); // We'll replace the entire leaf with the text content of the target.\n    var targetRange = selection.merge({\n        anchorOffset: start,\n        focusOffset: end,\n        isBackward: false\n    });\n    var entityKey = block.getEntityAt(start);\n    var entity = notEmptyKey(entityKey) ? content.getEntity(entityKey) : null;\n    var entityType = entity != null ? entity.getMutability() : null;\n    var preserveEntity = entityType === \"MUTABLE\"; // Immutable or segmented entities cannot properly be handled by the\n    // default browser undo, so we have to use a different change type to\n    // force using our internal undo method instead of falling through to the\n    // native browser undo.\n    var changeType = preserveEntity ? \"spellcheck-change\" : \"apply-entity\";\n    var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);\n    var anchorOffset, focusOffset, startOffset, endOffset;\n    if (isGecko) {\n        // Firefox selection does not change while the context menu is open, so\n        // we preserve the anchor and focus values of the DOM selection.\n        anchorOffset = domSelection.anchorOffset;\n        focusOffset = domSelection.focusOffset;\n        startOffset = start + Math.min(anchorOffset, focusOffset);\n        endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\n        anchorOffset = startOffset;\n        focusOffset = endOffset;\n    } else {\n        // Browsers other than Firefox may adjust DOM selection while the context\n        // menu is open, and Safari autocorrect is prone to providing an inaccurate\n        // DOM selection. Don't trust it. Instead, use our existing SelectionState\n        // and adjust it based on the number of characters changed during the\n        // mutation.\n        var charDelta = domText.length - modelText.length;\n        startOffset = selection.getStartOffset();\n        endOffset = selection.getEndOffset();\n        anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\n        focusOffset = endOffset + charDelta;\n    } // Segmented entities are completely or partially removed when their\n    // text content changes. For this case we do not want any text to be selected\n    // after the change, so we are not merging the selection.\n    var contentWithAdjustedDOMSelection = newContent.merge({\n        selectionBefore: content.getSelectionAfter(),\n        selectionAfter: selection.merge({\n            anchorOffset: anchorOffset,\n            focusOffset: focusOffset\n        })\n    });\n    editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));\n}\nmodule.exports = editOnInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnInput.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnKeyDown.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnKeyDown.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar KeyBindingUtil = __webpack_require__(/*! ./KeyBindingUtil */ \"(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\");\nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nvar SecondaryClipboard = __webpack_require__(/*! ./SecondaryClipboard */ \"(ssr)/./node_modules/draft-js/lib/SecondaryClipboard.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar keyCommandBackspaceToStartOfLine = __webpack_require__(/*! ./keyCommandBackspaceToStartOfLine */ \"(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js\");\nvar keyCommandBackspaceWord = __webpack_require__(/*! ./keyCommandBackspaceWord */ \"(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceWord.js\");\nvar keyCommandDeleteWord = __webpack_require__(/*! ./keyCommandDeleteWord */ \"(ssr)/./node_modules/draft-js/lib/keyCommandDeleteWord.js\");\nvar keyCommandInsertNewline = __webpack_require__(/*! ./keyCommandInsertNewline */ \"(ssr)/./node_modules/draft-js/lib/keyCommandInsertNewline.js\");\nvar keyCommandMoveSelectionToEndOfBlock = __webpack_require__(/*! ./keyCommandMoveSelectionToEndOfBlock */ \"(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js\");\nvar keyCommandMoveSelectionToStartOfBlock = __webpack_require__(/*! ./keyCommandMoveSelectionToStartOfBlock */ \"(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js\");\nvar keyCommandPlainBackspace = __webpack_require__(/*! ./keyCommandPlainBackspace */ \"(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js\");\nvar keyCommandPlainDelete = __webpack_require__(/*! ./keyCommandPlainDelete */ \"(ssr)/./node_modules/draft-js/lib/keyCommandPlainDelete.js\");\nvar keyCommandTransposeCharacters = __webpack_require__(/*! ./keyCommandTransposeCharacters */ \"(ssr)/./node_modules/draft-js/lib/keyCommandTransposeCharacters.js\");\nvar keyCommandUndo = __webpack_require__(/*! ./keyCommandUndo */ \"(ssr)/./node_modules/draft-js/lib/keyCommandUndo.js\");\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\nvar isChrome = UserAgent.isBrowser(\"Chrome\");\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */ function onKeyCommand(command, editorState, e) {\n    switch(command){\n        case \"redo\":\n            return EditorState.redo(editorState);\n        case \"delete\":\n            return keyCommandPlainDelete(editorState);\n        case \"delete-word\":\n            return keyCommandDeleteWord(editorState);\n        case \"backspace\":\n            return keyCommandPlainBackspace(editorState);\n        case \"backspace-word\":\n            return keyCommandBackspaceWord(editorState);\n        case \"backspace-to-start-of-line\":\n            return keyCommandBackspaceToStartOfLine(editorState, e);\n        case \"split-block\":\n            return keyCommandInsertNewline(editorState);\n        case \"transpose-characters\":\n            return keyCommandTransposeCharacters(editorState);\n        case \"move-selection-to-start-of-block\":\n            return keyCommandMoveSelectionToStartOfBlock(editorState);\n        case \"move-selection-to-end-of-block\":\n            return keyCommandMoveSelectionToEndOfBlock(editorState);\n        case \"secondary-cut\":\n            return SecondaryClipboard.cut(editorState);\n        case \"secondary-paste\":\n            return SecondaryClipboard.paste(editorState);\n        default:\n            return editorState;\n    }\n}\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */ function editOnKeyDown(editor, e) {\n    var keyCode = e.which;\n    var editorState = editor._latestEditorState;\n    function callDeprecatedHandler(handlerName) {\n        var deprecatedHandler = editor.props[handlerName];\n        if (deprecatedHandler) {\n            deprecatedHandler(e);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    switch(keyCode){\n        case Keys.RETURN:\n            e.preventDefault(); // The top-level component may manually handle newline insertion. If\n            // no special handling is performed, fall through to command handling.\n            if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n                return;\n            }\n            break;\n        case Keys.ESC:\n            e.preventDefault();\n            if (callDeprecatedHandler(\"onEscape\")) {\n                return;\n            }\n            break;\n        case Keys.TAB:\n            if (callDeprecatedHandler(\"onTab\")) {\n                return;\n            }\n            break;\n        case Keys.UP:\n            if (callDeprecatedHandler(\"onUpArrow\")) {\n                return;\n            }\n            break;\n        case Keys.RIGHT:\n            if (callDeprecatedHandler(\"onRightArrow\")) {\n                return;\n            }\n            break;\n        case Keys.DOWN:\n            if (callDeprecatedHandler(\"onDownArrow\")) {\n                return;\n            }\n            break;\n        case Keys.LEFT:\n            if (callDeprecatedHandler(\"onLeftArrow\")) {\n                return;\n            }\n            break;\n        case Keys.SPACE:\n            // Prevent Chrome on OSX behavior where option + space scrolls.\n            if (isChrome && isOptionKeyCommand(e)) {\n                e.preventDefault();\n            }\n    }\n    var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.\n    if (command == null || command === \"\") {\n        if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {\n            // The default keydown event has already been prevented in order to stop\n            // Chrome from scrolling. Insert a nbsp into the editor as OSX would for\n            // other browsers.\n            var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), \"\\xa0\");\n            editor.update(EditorState.push(editorState, contentState, \"insert-characters\"));\n        }\n        return;\n    }\n    if (command === \"undo\") {\n        // Since undo requires some special updating behavior to keep the editor\n        // in sync, handle it separately.\n        keyCommandUndo(e, editorState, editor.update);\n        return;\n    } // At this point, we know that we're handling a command of some kind, so\n    // we don't want to insert a character following the keydown.\n    e.preventDefault(); // Allow components higher up the tree to handle the command first.\n    if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState, e.timeStamp))) {\n        return;\n    }\n    var newState = onKeyCommand(command, editorState, e);\n    if (newState !== editorState) {\n        editor.update(newState);\n    }\n}\nmodule.exports = editOnKeyDown;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnKeyDown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnPaste.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnPaste.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar DataTransfer = __webpack_require__(/*! fbjs/lib/DataTransfer */ \"(ssr)/./node_modules/fbjs/lib/DataTransfer.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftPasteProcessor = __webpack_require__(/*! ./DraftPasteProcessor */ \"(ssr)/./node_modules/draft-js/lib/DraftPasteProcessor.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar RichTextEditorUtil = __webpack_require__(/*! ./RichTextEditorUtil */ \"(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js\");\nvar getEntityKeyForSelection = __webpack_require__(/*! ./getEntityKeyForSelection */ \"(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\");\nvar getTextContentFromFiles = __webpack_require__(/*! ./getTextContentFromFiles */ \"(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar splitTextIntoTextBlocks = __webpack_require__(/*! ./splitTextIntoTextBlocks */ \"(ssr)/./node_modules/draft-js/lib/splitTextIntoTextBlocks.js\");\n/**\n * Paste content.\n */ function editOnPaste(editor, e) {\n    e.preventDefault();\n    var data = new DataTransfer(e.clipboardData); // Get files, unless this is likely to be a string the user wants inline.\n    if (!data.isRichText()) {\n        var files = data.getFiles();\n        var defaultFileText = data.getText();\n        if (files.length > 0) {\n            // Allow customized paste handling for images, etc. Otherwise, fall\n            // through to insert text contents into the editor.\n            if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {\n                return;\n            }\n            /* $FlowFixMe[incompatible-call] This comment suppresses an error found\n       * DataTransfer was typed. getFiles() returns an array of <Files extends\n       * Blob>, not Blob */ getTextContentFromFiles(files, function(/*string*/ fileText) {\n                fileText = fileText || defaultFileText;\n                if (!fileText) {\n                    return;\n                }\n                var editorState = editor._latestEditorState;\n                var blocks = splitTextIntoTextBlocks(fileText);\n                var character = CharacterMetadata.create({\n                    style: editorState.getCurrentInlineStyle(),\n                    entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n                });\n                var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n                var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);\n                var fragment = BlockMapBuilder.createFromArray(text);\n                var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n                editor.update(EditorState.push(editorState, withInsertedText, \"insert-fragment\"));\n            });\n            return;\n        }\n    }\n    var textBlocks = [];\n    var text = data.getText();\n    var html = data.getHTML();\n    var editorState = editor._latestEditorState;\n    if (editor.props.formatPastedText) {\n        var _editor$props$formatP = editor.props.formatPastedText(text, html), formattedText = _editor$props$formatP.text, formattedHtml = _editor$props$formatP.html;\n        text = formattedText;\n        html = formattedHtml;\n    }\n    if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html, editorState))) {\n        return;\n    }\n    if (text) {\n        textBlocks = splitTextIntoTextBlocks(text);\n    }\n    if (!editor.props.stripPastedStyles) {\n        // If the text from the paste event is rich content that matches what we\n        // already have on the internal clipboard, assume that we should just use\n        // the clipboard fragment for the paste. This will allow us to preserve\n        // styling and entities, if any are present. Note that newlines are\n        // stripped during comparison -- this is because copy/paste within the\n        // editor in Firefox and IE will not include empty lines. The resulting\n        // paste will preserve the newlines correctly.\n        var internalClipboard = editor.getClipboard();\n        if (!editor.props.formatPastedText && data.isRichText() && internalClipboard) {\n            var _html;\n            if (// assume this is an internal paste.\n            ((_html = html) === null || _html === void 0 ? void 0 : _html.indexOf(editor.getEditorKey())) !== -1 || // The copy may have been made within a single block, in which case the\n            // editor key won't be part of the paste. In this case, just check\n            // whether the pasted text matches the internal clipboard.\n            textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\n                editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n                return;\n            }\n        } else if (internalClipboard && data.types.includes(\"com.apple.webarchive\") && !data.types.includes(\"text/html\") && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {\n            // Safari does not properly store text/html in some cases.\n            // Use the internalClipboard if present and equal to what is on\n            // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\n            editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n            return;\n        } // If there is html paste data, try to parse that.\n        if (html) {\n            var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);\n            if (htmlFragment) {\n                var contentBlocks = htmlFragment.contentBlocks, entityMap = htmlFragment.entityMap;\n                if (contentBlocks) {\n                    var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\n                    editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));\n                    return;\n                }\n            }\n        } // Otherwise, create a new fragment from our pasted text. Also\n        // empty the internal clipboard, since it's no longer valid.\n        editor.setClipboard(null);\n    }\n    if (textBlocks.length) {\n        var character = CharacterMetadata.create({\n            style: editorState.getCurrentInlineStyle(),\n            entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n        });\n        var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n        var textFragment = DraftPasteProcessor.processText(textBlocks, character, currentBlockType);\n        var textMap = BlockMapBuilder.createFromArray(textFragment);\n        editor.update(insertFragment(editor._latestEditorState, textMap));\n    }\n}\nfunction insertFragment(editorState, fragment, entityMap) {\n    var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment); // TODO: merge the entity map once we stop using DraftEntity\n    // like this:\n    // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);\n    return EditorState.push(editorState, newContent.set(\"entityMap\", entityMap), \"insert-fragment\");\n}\nfunction areTextBlocksAndClipboardEqual(textBlocks, blockMap) {\n    return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function(block, ii) {\n        return block.getText() === textBlocks[ii];\n    });\n}\nmodule.exports = editOnPaste;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPblBhc3RlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsa0JBQWtCQyxtQkFBT0EsQ0FBQywrRUFBbUI7QUFFakQsSUFBSUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSUUsZUFBZUYsbUJBQU9BLENBQUMsNEVBQXVCO0FBRWxELElBQUlHLGdCQUFnQkgsbUJBQU9BLENBQUMsMkVBQWlCO0FBRTdDLElBQUlJLHNCQUFzQkosbUJBQU9BLENBQUMsdUZBQXVCO0FBRXpELElBQUlLLGNBQWNMLG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlNLHFCQUFxQk4sbUJBQU9BLENBQUMscUZBQXNCO0FBRXZELElBQUlPLDJCQUEyQlAsbUJBQU9BLENBQUMsaUdBQTRCO0FBRW5FLElBQUlRLDBCQUEwQlIsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUlTLGlCQUFpQlQsbUJBQU9BLENBQUMsNkVBQWtCO0FBRS9DLElBQUlVLDBCQUEwQlYsbUJBQU9BLENBQUMsK0ZBQTJCO0FBQ2pFOztDQUVDLEdBR0QsU0FBU1csWUFBWUMsTUFBTSxFQUFFQyxDQUFDO0lBQzVCQSxFQUFFQyxjQUFjO0lBQ2hCLElBQUlDLE9BQU8sSUFBSWIsYUFBYVcsRUFBRUcsYUFBYSxHQUFHLHlFQUF5RTtJQUV2SCxJQUFJLENBQUNELEtBQUtFLFVBQVUsSUFBSTtRQUN0QixJQUFJQyxRQUFRSCxLQUFLSSxRQUFRO1FBQ3pCLElBQUlDLGtCQUFrQkwsS0FBS00sT0FBTztRQUVsQyxJQUFJSCxNQUFNSSxNQUFNLEdBQUcsR0FBRztZQUNwQixtRUFBbUU7WUFDbkUsbURBQW1EO1lBQ25ELElBQUlWLE9BQU9XLEtBQUssQ0FBQ0MsaUJBQWlCLElBQUlmLGVBQWVHLE9BQU9XLEtBQUssQ0FBQ0MsaUJBQWlCLENBQUNOLFNBQVM7Z0JBQzNGO1lBQ0Y7WUFDQTs7eUJBRW1CLEdBR25CVix3QkFBd0JVLE9BQU8sU0FDL0IsUUFBUSxHQUNSTyxRQUFRO2dCQUNOQSxXQUFXQSxZQUFZTDtnQkFFdkIsSUFBSSxDQUFDSyxVQUFVO29CQUNiO2dCQUNGO2dCQUVBLElBQUlDLGNBQWNkLE9BQU9lLGtCQUFrQjtnQkFDM0MsSUFBSUMsU0FBU2xCLHdCQUF3QmU7Z0JBQ3JDLElBQUlJLFlBQVk1QixrQkFBa0I2QixNQUFNLENBQUM7b0JBQ3ZDQyxPQUFPTCxZQUFZTSxxQkFBcUI7b0JBQ3hDQyxRQUFRMUIseUJBQXlCbUIsWUFBWVEsaUJBQWlCLElBQUlSLFlBQVlTLFlBQVk7Z0JBQzVGO2dCQUNBLElBQUlDLG1CQUFtQjlCLG1CQUFtQitCLG1CQUFtQixDQUFDWDtnQkFDOUQsSUFBSVksT0FBT2xDLG9CQUFvQm1DLFdBQVcsQ0FBQ1gsUUFBUUMsV0FBV087Z0JBQzlELElBQUlJLFdBQVd6QyxnQkFBZ0IwQyxlQUFlLENBQUNIO2dCQUMvQyxJQUFJSSxtQkFBbUJ2QyxjQUFjd0MsbUJBQW1CLENBQUNqQixZQUFZUSxpQkFBaUIsSUFBSVIsWUFBWVMsWUFBWSxJQUFJSztnQkFDdEg1QixPQUFPZ0MsTUFBTSxDQUFDdkMsWUFBWXdDLElBQUksQ0FBQ25CLGFBQWFnQixrQkFBa0I7WUFDaEU7WUFDQTtRQUNGO0lBQ0Y7SUFFQSxJQUFJSSxhQUFhLEVBQUU7SUFDbkIsSUFBSVIsT0FBT3ZCLEtBQUtNLE9BQU87SUFDdkIsSUFBSTBCLE9BQU9oQyxLQUFLaUMsT0FBTztJQUN2QixJQUFJdEIsY0FBY2QsT0FBT2Usa0JBQWtCO0lBRTNDLElBQUlmLE9BQU9XLEtBQUssQ0FBQzBCLGdCQUFnQixFQUFFO1FBQ2pDLElBQUlDLHdCQUF3QnRDLE9BQU9XLEtBQUssQ0FBQzBCLGdCQUFnQixDQUFDWCxNQUFNUyxPQUM1REksZ0JBQWdCRCxzQkFBc0JaLElBQUksRUFDMUNjLGdCQUFnQkYsc0JBQXNCSCxJQUFJO1FBRTlDVCxPQUFPYTtRQUNQSixPQUFPSztJQUNUO0lBRUEsSUFBSXhDLE9BQU9XLEtBQUssQ0FBQzhCLGdCQUFnQixJQUFJNUMsZUFBZUcsT0FBT1csS0FBSyxDQUFDOEIsZ0JBQWdCLENBQUNmLE1BQU1TLE1BQU1yQixlQUFlO1FBQzNHO0lBQ0Y7SUFFQSxJQUFJWSxNQUFNO1FBQ1JRLGFBQWFwQyx3QkFBd0I0QjtJQUN2QztJQUVBLElBQUksQ0FBQzFCLE9BQU9XLEtBQUssQ0FBQytCLGlCQUFpQixFQUFFO1FBQ25DLHdFQUF3RTtRQUN4RSx5RUFBeUU7UUFDekUsdUVBQXVFO1FBQ3ZFLG1FQUFtRTtRQUNuRSxzRUFBc0U7UUFDdEUsdUVBQXVFO1FBQ3ZFLDhDQUE4QztRQUM5QyxJQUFJQyxvQkFBb0IzQyxPQUFPNEMsWUFBWTtRQUUzQyxJQUFJLENBQUM1QyxPQUFPVyxLQUFLLENBQUMwQixnQkFBZ0IsSUFBSWxDLEtBQUtFLFVBQVUsTUFBTXNDLG1CQUFtQjtZQUM1RSxJQUFJRTtZQUVKLElBRUEsb0NBRG9DO1lBQ25DLEVBQUNBLFFBQVFWLElBQUcsTUFBTyxRQUFRVSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLE1BQU1DLE9BQU8sQ0FBQzlDLE9BQU8rQyxZQUFZLEdBQUUsTUFBTyxDQUFDLEtBQUssdUVBQXVFO1lBQy9LLGtFQUFrRTtZQUNsRSwwREFBMEQ7WUFDMURiLFdBQVd4QixNQUFNLEtBQUssS0FBS2lDLGtCQUFrQkssSUFBSSxLQUFLLEtBQUtMLGtCQUFrQk0sS0FBSyxHQUFHeEMsT0FBTyxPQUFPaUIsTUFBTTtnQkFDdkcxQixPQUFPZ0MsTUFBTSxDQUFDa0IsZUFBZWxELE9BQU9lLGtCQUFrQixFQUFFNEI7Z0JBQ3hEO1lBQ0Y7UUFDRixPQUFPLElBQUlBLHFCQUFxQnhDLEtBQUtnRCxLQUFLLENBQUNDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQ2pELEtBQUtnRCxLQUFLLENBQUNDLFFBQVEsQ0FBQyxnQkFBZ0JDLCtCQUErQm5CLFlBQVlTLG9CQUFvQjtZQUNqTCwwREFBMEQ7WUFDMUQsK0RBQStEO1lBQy9ELG9FQUFvRTtZQUNwRTNDLE9BQU9nQyxNQUFNLENBQUNrQixlQUFlbEQsT0FBT2Usa0JBQWtCLEVBQUU0QjtZQUN4RDtRQUNGLEVBQUUsa0RBQWtEO1FBR3BELElBQUlSLE1BQU07WUFDUixJQUFJbUIsZUFBZTlELG9CQUFvQitELFdBQVcsQ0FBQ3BCLE1BQU1uQyxPQUFPVyxLQUFLLENBQUM2QyxjQUFjO1lBRXBGLElBQUlGLGNBQWM7Z0JBQ2hCLElBQUlHLGdCQUFnQkgsYUFBYUcsYUFBYSxFQUMxQ0MsWUFBWUosYUFBYUksU0FBUztnQkFFdEMsSUFBSUQsZUFBZTtvQkFDakIsSUFBSUUsVUFBVXhFLGdCQUFnQjBDLGVBQWUsQ0FBQzRCO29CQUM5Q3pELE9BQU9nQyxNQUFNLENBQUNrQixlQUFlbEQsT0FBT2Usa0JBQWtCLEVBQUU0QyxTQUFTRDtvQkFDakU7Z0JBQ0Y7WUFDRjtRQUNGLEVBQUUsOERBQThEO1FBQ2hFLDREQUE0RDtRQUc1RDFELE9BQU80RCxZQUFZLENBQUM7SUFDdEI7SUFFQSxJQUFJMUIsV0FBV3hCLE1BQU0sRUFBRTtRQUNyQixJQUFJTyxZQUFZNUIsa0JBQWtCNkIsTUFBTSxDQUFDO1lBQ3ZDQyxPQUFPTCxZQUFZTSxxQkFBcUI7WUFDeENDLFFBQVExQix5QkFBeUJtQixZQUFZUSxpQkFBaUIsSUFBSVIsWUFBWVMsWUFBWTtRQUM1RjtRQUNBLElBQUlDLG1CQUFtQjlCLG1CQUFtQitCLG1CQUFtQixDQUFDWDtRQUM5RCxJQUFJK0MsZUFBZXJFLG9CQUFvQm1DLFdBQVcsQ0FBQ08sWUFBWWpCLFdBQVdPO1FBQzFFLElBQUlzQyxVQUFVM0UsZ0JBQWdCMEMsZUFBZSxDQUFDZ0M7UUFDOUM3RCxPQUFPZ0MsTUFBTSxDQUFDa0IsZUFBZWxELE9BQU9lLGtCQUFrQixFQUFFK0M7SUFDMUQ7QUFDRjtBQUVBLFNBQVNaLGVBQWVwQyxXQUFXLEVBQUVjLFFBQVEsRUFBRThCLFNBQVM7SUFDdEQsSUFBSUssYUFBYXhFLGNBQWN3QyxtQkFBbUIsQ0FBQ2pCLFlBQVlRLGlCQUFpQixJQUFJUixZQUFZUyxZQUFZLElBQUlLLFdBQVcsNERBQTREO0lBQ3ZMLGFBQWE7SUFDYixzRUFBc0U7SUFFdEUsT0FBT25DLFlBQVl3QyxJQUFJLENBQUNuQixhQUFhaUQsV0FBV0MsR0FBRyxDQUFDLGFBQWFOLFlBQVk7QUFDL0U7QUFFQSxTQUFTTCwrQkFBK0JuQixVQUFVLEVBQUUrQixRQUFRO0lBQzFELE9BQU8vQixXQUFXeEIsTUFBTSxLQUFLdUQsU0FBU2pCLElBQUksSUFBSWlCLFNBQVNDLFFBQVEsR0FBR0MsS0FBSyxDQUFDLFNBQVVDLEtBQUssRUFBRUMsRUFBRTtRQUN6RixPQUFPRCxNQUFNM0QsT0FBTyxPQUFPeUIsVUFBVSxDQUFDbUMsR0FBRztJQUMzQztBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25QYXN0ZS5qcz9mMGFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCbG9ja01hcEJ1aWxkZXIgPSByZXF1aXJlKFwiLi9CbG9ja01hcEJ1aWxkZXJcIik7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoXCIuL0NoYXJhY3Rlck1ldGFkYXRhXCIpO1xuXG52YXIgRGF0YVRyYW5zZmVyID0gcmVxdWlyZShcImZianMvbGliL0RhdGFUcmFuc2ZlclwiKTtcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKFwiLi9EcmFmdE1vZGlmaWVyXCIpO1xuXG52YXIgRHJhZnRQYXN0ZVByb2Nlc3NvciA9IHJlcXVpcmUoXCIuL0RyYWZ0UGFzdGVQcm9jZXNzb3JcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgUmljaFRleHRFZGl0b3JVdGlsID0gcmVxdWlyZShcIi4vUmljaFRleHRFZGl0b3JVdGlsXCIpO1xuXG52YXIgZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uID0gcmVxdWlyZShcIi4vZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uXCIpO1xuXG52YXIgZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMgPSByZXF1aXJlKFwiLi9nZXRUZXh0Q29udGVudEZyb21GaWxlc1wiKTtcblxudmFyIGlzRXZlbnRIYW5kbGVkID0gcmVxdWlyZShcIi4vaXNFdmVudEhhbmRsZWRcIik7XG5cbnZhciBzcGxpdFRleHRJbnRvVGV4dEJsb2NrcyA9IHJlcXVpcmUoXCIuL3NwbGl0VGV4dEludG9UZXh0QmxvY2tzXCIpO1xuLyoqXG4gKiBQYXN0ZSBjb250ZW50LlxuICovXG5cblxuZnVuY3Rpb24gZWRpdE9uUGFzdGUoZWRpdG9yLCBlKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgdmFyIGRhdGEgPSBuZXcgRGF0YVRyYW5zZmVyKGUuY2xpcGJvYXJkRGF0YSk7IC8vIEdldCBmaWxlcywgdW5sZXNzIHRoaXMgaXMgbGlrZWx5IHRvIGJlIGEgc3RyaW5nIHRoZSB1c2VyIHdhbnRzIGlubGluZS5cblxuICBpZiAoIWRhdGEuaXNSaWNoVGV4dCgpKSB7XG4gICAgdmFyIGZpbGVzID0gZGF0YS5nZXRGaWxlcygpO1xuICAgIHZhciBkZWZhdWx0RmlsZVRleHQgPSBkYXRhLmdldFRleHQoKTtcblxuICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBBbGxvdyBjdXN0b21pemVkIHBhc3RlIGhhbmRsaW5nIGZvciBpbWFnZXMsIGV0Yy4gT3RoZXJ3aXNlLCBmYWxsXG4gICAgICAvLyB0aHJvdWdoIHRvIGluc2VydCB0ZXh0IGNvbnRlbnRzIGludG8gdGhlIGVkaXRvci5cbiAgICAgIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlUGFzdGVkRmlsZXMgJiYgaXNFdmVudEhhbmRsZWQoZWRpdG9yLnByb3BzLmhhbmRsZVBhc3RlZEZpbGVzKGZpbGVzKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF0gVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmRcbiAgICAgICAqIERhdGFUcmFuc2ZlciB3YXMgdHlwZWQuIGdldEZpbGVzKCkgcmV0dXJucyBhbiBhcnJheSBvZiA8RmlsZXMgZXh0ZW5kc1xuICAgICAgICogQmxvYj4sIG5vdCBCbG9iICovXG5cblxuICAgICAgZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMoZmlsZXMsIGZ1bmN0aW9uIChcbiAgICAgIC8qc3RyaW5nKi9cbiAgICAgIGZpbGVUZXh0KSB7XG4gICAgICAgIGZpbGVUZXh0ID0gZmlsZVRleHQgfHwgZGVmYXVsdEZpbGVUZXh0O1xuXG4gICAgICAgIGlmICghZmlsZVRleHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICAgICAgICB2YXIgYmxvY2tzID0gc3BsaXRUZXh0SW50b1RleHRCbG9ja3MoZmlsZVRleHQpO1xuICAgICAgICB2YXIgY2hhcmFjdGVyID0gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHtcbiAgICAgICAgICBzdHlsZTogZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCksXG4gICAgICAgICAgZW50aXR5OiBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY3VycmVudEJsb2NrVHlwZSA9IFJpY2hUZXh0RWRpdG9yVXRpbC5nZXRDdXJyZW50QmxvY2tUeXBlKGVkaXRvclN0YXRlKTtcbiAgICAgICAgdmFyIHRleHQgPSBEcmFmdFBhc3RlUHJvY2Vzc29yLnByb2Nlc3NUZXh0KGJsb2NrcywgY2hhcmFjdGVyLCBjdXJyZW50QmxvY2tUeXBlKTtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gQmxvY2tNYXBCdWlsZGVyLmNyZWF0ZUZyb21BcnJheSh0ZXh0KTtcbiAgICAgICAgdmFyIHdpdGhJbnNlcnRlZFRleHQgPSBEcmFmdE1vZGlmaWVyLnJlcGxhY2VXaXRoRnJhZ21lbnQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksIGZyYWdtZW50KTtcbiAgICAgICAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRoSW5zZXJ0ZWRUZXh0LCAnaW5zZXJ0LWZyYWdtZW50JykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdmFyIHRleHRCbG9ja3MgPSBbXTtcbiAgdmFyIHRleHQgPSBkYXRhLmdldFRleHQoKTtcbiAgdmFyIGh0bWwgPSBkYXRhLmdldEhUTUwoKTtcbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcblxuICBpZiAoZWRpdG9yLnByb3BzLmZvcm1hdFBhc3RlZFRleHQpIHtcbiAgICB2YXIgX2VkaXRvciRwcm9wcyRmb3JtYXRQID0gZWRpdG9yLnByb3BzLmZvcm1hdFBhc3RlZFRleHQodGV4dCwgaHRtbCksXG4gICAgICAgIGZvcm1hdHRlZFRleHQgPSBfZWRpdG9yJHByb3BzJGZvcm1hdFAudGV4dCxcbiAgICAgICAgZm9ybWF0dGVkSHRtbCA9IF9lZGl0b3IkcHJvcHMkZm9ybWF0UC5odG1sO1xuXG4gICAgdGV4dCA9IGZvcm1hdHRlZFRleHQ7XG4gICAgaHRtbCA9IGZvcm1hdHRlZEh0bWw7XG4gIH1cblxuICBpZiAoZWRpdG9yLnByb3BzLmhhbmRsZVBhc3RlZFRleHQgJiYgaXNFdmVudEhhbmRsZWQoZWRpdG9yLnByb3BzLmhhbmRsZVBhc3RlZFRleHQodGV4dCwgaHRtbCwgZWRpdG9yU3RhdGUpKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0ZXh0KSB7XG4gICAgdGV4dEJsb2NrcyA9IHNwbGl0VGV4dEludG9UZXh0QmxvY2tzKHRleHQpO1xuICB9XG5cbiAgaWYgKCFlZGl0b3IucHJvcHMuc3RyaXBQYXN0ZWRTdHlsZXMpIHtcbiAgICAvLyBJZiB0aGUgdGV4dCBmcm9tIHRoZSBwYXN0ZSBldmVudCBpcyByaWNoIGNvbnRlbnQgdGhhdCBtYXRjaGVzIHdoYXQgd2VcbiAgICAvLyBhbHJlYWR5IGhhdmUgb24gdGhlIGludGVybmFsIGNsaXBib2FyZCwgYXNzdW1lIHRoYXQgd2Ugc2hvdWxkIGp1c3QgdXNlXG4gICAgLy8gdGhlIGNsaXBib2FyZCBmcmFnbWVudCBmb3IgdGhlIHBhc3RlLiBUaGlzIHdpbGwgYWxsb3cgdXMgdG8gcHJlc2VydmVcbiAgICAvLyBzdHlsaW5nIGFuZCBlbnRpdGllcywgaWYgYW55IGFyZSBwcmVzZW50LiBOb3RlIHRoYXQgbmV3bGluZXMgYXJlXG4gICAgLy8gc3RyaXBwZWQgZHVyaW5nIGNvbXBhcmlzb24gLS0gdGhpcyBpcyBiZWNhdXNlIGNvcHkvcGFzdGUgd2l0aGluIHRoZVxuICAgIC8vIGVkaXRvciBpbiBGaXJlZm94IGFuZCBJRSB3aWxsIG5vdCBpbmNsdWRlIGVtcHR5IGxpbmVzLiBUaGUgcmVzdWx0aW5nXG4gICAgLy8gcGFzdGUgd2lsbCBwcmVzZXJ2ZSB0aGUgbmV3bGluZXMgY29ycmVjdGx5LlxuICAgIHZhciBpbnRlcm5hbENsaXBib2FyZCA9IGVkaXRvci5nZXRDbGlwYm9hcmQoKTtcblxuICAgIGlmICghZWRpdG9yLnByb3BzLmZvcm1hdFBhc3RlZFRleHQgJiYgZGF0YS5pc1JpY2hUZXh0KCkgJiYgaW50ZXJuYWxDbGlwYm9hcmQpIHtcbiAgICAgIHZhciBfaHRtbDtcblxuICAgICAgaWYgKCAvLyBJZiB0aGUgZWRpdG9yS2V5IGlzIHByZXNlbnQgaW4gdGhlIHBhc3RlZCBIVE1MLCBpdCBzaG91bGQgYmUgc2FmZSB0b1xuICAgICAgLy8gYXNzdW1lIHRoaXMgaXMgYW4gaW50ZXJuYWwgcGFzdGUuXG4gICAgICAoKF9odG1sID0gaHRtbCkgPT09IG51bGwgfHwgX2h0bWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9odG1sLmluZGV4T2YoZWRpdG9yLmdldEVkaXRvcktleSgpKSkgIT09IC0xIHx8IC8vIFRoZSBjb3B5IG1heSBoYXZlIGJlZW4gbWFkZSB3aXRoaW4gYSBzaW5nbGUgYmxvY2ssIGluIHdoaWNoIGNhc2UgdGhlXG4gICAgICAvLyBlZGl0b3Iga2V5IHdvbid0IGJlIHBhcnQgb2YgdGhlIHBhc3RlLiBJbiB0aGlzIGNhc2UsIGp1c3QgY2hlY2tcbiAgICAgIC8vIHdoZXRoZXIgdGhlIHBhc3RlZCB0ZXh0IG1hdGNoZXMgdGhlIGludGVybmFsIGNsaXBib2FyZC5cbiAgICAgIHRleHRCbG9ja3MubGVuZ3RoID09PSAxICYmIGludGVybmFsQ2xpcGJvYXJkLnNpemUgPT09IDEgJiYgaW50ZXJuYWxDbGlwYm9hcmQuZmlyc3QoKS5nZXRUZXh0KCkgPT09IHRleHQpIHtcbiAgICAgICAgZWRpdG9yLnVwZGF0ZShpbnNlcnRGcmFnbWVudChlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlLCBpbnRlcm5hbENsaXBib2FyZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbnRlcm5hbENsaXBib2FyZCAmJiBkYXRhLnR5cGVzLmluY2x1ZGVzKCdjb20uYXBwbGUud2ViYXJjaGl2ZScpICYmICFkYXRhLnR5cGVzLmluY2x1ZGVzKCd0ZXh0L2h0bWwnKSAmJiBhcmVUZXh0QmxvY2tzQW5kQ2xpcGJvYXJkRXF1YWwodGV4dEJsb2NrcywgaW50ZXJuYWxDbGlwYm9hcmQpKSB7XG4gICAgICAvLyBTYWZhcmkgZG9lcyBub3QgcHJvcGVybHkgc3RvcmUgdGV4dC9odG1sIGluIHNvbWUgY2FzZXMuXG4gICAgICAvLyBVc2UgdGhlIGludGVybmFsQ2xpcGJvYXJkIGlmIHByZXNlbnQgYW5kIGVxdWFsIHRvIHdoYXQgaXMgb25cbiAgICAgIC8vIHRoZSBjbGlwYm9hcmQuIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTk4OTMuXG4gICAgICBlZGl0b3IudXBkYXRlKGluc2VydEZyYWdtZW50KGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUsIGludGVybmFsQ2xpcGJvYXJkKSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB0aGVyZSBpcyBodG1sIHBhc3RlIGRhdGEsIHRyeSB0byBwYXJzZSB0aGF0LlxuXG5cbiAgICBpZiAoaHRtbCkge1xuICAgICAgdmFyIGh0bWxGcmFnbWVudCA9IERyYWZ0UGFzdGVQcm9jZXNzb3IucHJvY2Vzc0hUTUwoaHRtbCwgZWRpdG9yLnByb3BzLmJsb2NrUmVuZGVyTWFwKTtcblxuICAgICAgaWYgKGh0bWxGcmFnbWVudCkge1xuICAgICAgICB2YXIgY29udGVudEJsb2NrcyA9IGh0bWxGcmFnbWVudC5jb250ZW50QmxvY2tzLFxuICAgICAgICAgICAgZW50aXR5TWFwID0gaHRtbEZyYWdtZW50LmVudGl0eU1hcDtcblxuICAgICAgICBpZiAoY29udGVudEJsb2Nrcykge1xuICAgICAgICAgIHZhciBodG1sTWFwID0gQmxvY2tNYXBCdWlsZGVyLmNyZWF0ZUZyb21BcnJheShjb250ZW50QmxvY2tzKTtcbiAgICAgICAgICBlZGl0b3IudXBkYXRlKGluc2VydEZyYWdtZW50KGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUsIGh0bWxNYXAsIGVudGl0eU1hcCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gT3RoZXJ3aXNlLCBjcmVhdGUgYSBuZXcgZnJhZ21lbnQgZnJvbSBvdXIgcGFzdGVkIHRleHQuIEFsc29cbiAgICAvLyBlbXB0eSB0aGUgaW50ZXJuYWwgY2xpcGJvYXJkLCBzaW5jZSBpdCdzIG5vIGxvbmdlciB2YWxpZC5cblxuXG4gICAgZWRpdG9yLnNldENsaXBib2FyZChudWxsKTtcbiAgfVxuXG4gIGlmICh0ZXh0QmxvY2tzLmxlbmd0aCkge1xuICAgIHZhciBjaGFyYWN0ZXIgPSBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUoe1xuICAgICAgc3R5bGU6IGVkaXRvclN0YXRlLmdldEN1cnJlbnRJbmxpbmVTdHlsZSgpLFxuICAgICAgZW50aXR5OiBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpXG4gICAgfSk7XG4gICAgdmFyIGN1cnJlbnRCbG9ja1R5cGUgPSBSaWNoVGV4dEVkaXRvclV0aWwuZ2V0Q3VycmVudEJsb2NrVHlwZShlZGl0b3JTdGF0ZSk7XG4gICAgdmFyIHRleHRGcmFnbWVudCA9IERyYWZ0UGFzdGVQcm9jZXNzb3IucHJvY2Vzc1RleHQodGV4dEJsb2NrcywgY2hhcmFjdGVyLCBjdXJyZW50QmxvY2tUeXBlKTtcbiAgICB2YXIgdGV4dE1hcCA9IEJsb2NrTWFwQnVpbGRlci5jcmVhdGVGcm9tQXJyYXkodGV4dEZyYWdtZW50KTtcbiAgICBlZGl0b3IudXBkYXRlKGluc2VydEZyYWdtZW50KGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUsIHRleHRNYXApKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRGcmFnbWVudChlZGl0b3JTdGF0ZSwgZnJhZ21lbnQsIGVudGl0eU1hcCkge1xuICB2YXIgbmV3Q29udGVudCA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVdpdGhGcmFnbWVudChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgZnJhZ21lbnQpOyAvLyBUT0RPOiBtZXJnZSB0aGUgZW50aXR5IG1hcCBvbmNlIHdlIHN0b3AgdXNpbmcgRHJhZnRFbnRpdHlcbiAgLy8gbGlrZSB0aGlzOlxuICAvLyBjb25zdCBtZXJnZWRFbnRpdHlNYXAgPSBuZXdDb250ZW50LmdldEVudGl0eU1hcCgpLm1lcmdlKGVudGl0eU1hcCk7XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIG5ld0NvbnRlbnQuc2V0KCdlbnRpdHlNYXAnLCBlbnRpdHlNYXApLCAnaW5zZXJ0LWZyYWdtZW50Jyk7XG59XG5cbmZ1bmN0aW9uIGFyZVRleHRCbG9ja3NBbmRDbGlwYm9hcmRFcXVhbCh0ZXh0QmxvY2tzLCBibG9ja01hcCkge1xuICByZXR1cm4gdGV4dEJsb2Nrcy5sZW5ndGggPT09IGJsb2NrTWFwLnNpemUgJiYgYmxvY2tNYXAudmFsdWVTZXEoKS5ldmVyeShmdW5jdGlvbiAoYmxvY2ssIGlpKSB7XG4gICAgcmV0dXJuIGJsb2NrLmdldFRleHQoKSA9PT0gdGV4dEJsb2Nrc1tpaV07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPblBhc3RlOyJdLCJuYW1lcyI6WyJCbG9ja01hcEJ1aWxkZXIiLCJyZXF1aXJlIiwiQ2hhcmFjdGVyTWV0YWRhdGEiLCJEYXRhVHJhbnNmZXIiLCJEcmFmdE1vZGlmaWVyIiwiRHJhZnRQYXN0ZVByb2Nlc3NvciIsIkVkaXRvclN0YXRlIiwiUmljaFRleHRFZGl0b3JVdGlsIiwiZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uIiwiZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMiLCJpc0V2ZW50SGFuZGxlZCIsInNwbGl0VGV4dEludG9UZXh0QmxvY2tzIiwiZWRpdE9uUGFzdGUiLCJlZGl0b3IiLCJlIiwicHJldmVudERlZmF1bHQiLCJkYXRhIiwiY2xpcGJvYXJkRGF0YSIsImlzUmljaFRleHQiLCJmaWxlcyIsImdldEZpbGVzIiwiZGVmYXVsdEZpbGVUZXh0IiwiZ2V0VGV4dCIsImxlbmd0aCIsInByb3BzIiwiaGFuZGxlUGFzdGVkRmlsZXMiLCJmaWxlVGV4dCIsImVkaXRvclN0YXRlIiwiX2xhdGVzdEVkaXRvclN0YXRlIiwiYmxvY2tzIiwiY2hhcmFjdGVyIiwiY3JlYXRlIiwic3R5bGUiLCJnZXRDdXJyZW50SW5saW5lU3R5bGUiLCJlbnRpdHkiLCJnZXRDdXJyZW50Q29udGVudCIsImdldFNlbGVjdGlvbiIsImN1cnJlbnRCbG9ja1R5cGUiLCJnZXRDdXJyZW50QmxvY2tUeXBlIiwidGV4dCIsInByb2Nlc3NUZXh0IiwiZnJhZ21lbnQiLCJjcmVhdGVGcm9tQXJyYXkiLCJ3aXRoSW5zZXJ0ZWRUZXh0IiwicmVwbGFjZVdpdGhGcmFnbWVudCIsInVwZGF0ZSIsInB1c2giLCJ0ZXh0QmxvY2tzIiwiaHRtbCIsImdldEhUTUwiLCJmb3JtYXRQYXN0ZWRUZXh0IiwiX2VkaXRvciRwcm9wcyRmb3JtYXRQIiwiZm9ybWF0dGVkVGV4dCIsImZvcm1hdHRlZEh0bWwiLCJoYW5kbGVQYXN0ZWRUZXh0Iiwic3RyaXBQYXN0ZWRTdHlsZXMiLCJpbnRlcm5hbENsaXBib2FyZCIsImdldENsaXBib2FyZCIsIl9odG1sIiwiaW5kZXhPZiIsImdldEVkaXRvcktleSIsInNpemUiLCJmaXJzdCIsImluc2VydEZyYWdtZW50IiwidHlwZXMiLCJpbmNsdWRlcyIsImFyZVRleHRCbG9ja3NBbmRDbGlwYm9hcmRFcXVhbCIsImh0bWxGcmFnbWVudCIsInByb2Nlc3NIVE1MIiwiYmxvY2tSZW5kZXJNYXAiLCJjb250ZW50QmxvY2tzIiwiZW50aXR5TWFwIiwiaHRtbE1hcCIsInNldENsaXBib2FyZCIsInRleHRGcmFnbWVudCIsInRleHRNYXAiLCJuZXdDb250ZW50Iiwic2V0IiwiYmxvY2tNYXAiLCJ2YWx1ZVNlcSIsImV2ZXJ5IiwiYmxvY2siLCJpaSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnPaste.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnSelect.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnSelect.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftJsDebugLogging = __webpack_require__(/*! ./DraftJsDebugLogging */ \"(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar getContentEditableContainer = __webpack_require__(/*! ./getContentEditableContainer */ \"(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js\");\nvar getDraftEditorSelection = __webpack_require__(/*! ./getDraftEditorSelection */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js\");\nfunction editOnSelect(editor) {\n    if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {\n        if (editor._blockSelectEvents) {\n            var _editorState = editor.props.editorState;\n            var selectionState = _editorState.getSelection();\n            DraftJsDebugLogging.logBlockedSelectionEvent({\n                // For now I don't think we need any other info\n                anonymizedDom: \"N/A\",\n                extraParams: JSON.stringify({\n                    stacktrace: new Error().stack\n                }),\n                selectionState: JSON.stringify(selectionState.toJS())\n            });\n        }\n        return;\n    }\n    var editorState = editor.props.editorState;\n    var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n    var updatedSelectionState = documentSelection.selectionState;\n    if (updatedSelectionState !== editorState.getSelection()) {\n        if (documentSelection.needsRecovery) {\n            editorState = EditorState.forceSelection(editorState, updatedSelectionState);\n        } else {\n            editorState = EditorState.acceptSelection(editorState, updatedSelectionState);\n        }\n        editor.update(editorState);\n    }\n}\nmodule.exports = editOnSelect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPblNlbGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLHNCQUFzQkMsbUJBQU9BLENBQUMsdUZBQXVCO0FBRXpELElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlFLDhCQUE4QkYsbUJBQU9BLENBQUMsdUdBQStCO0FBRXpFLElBQUlHLDBCQUEwQkgsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLFNBQVNJLGFBQWFDLE1BQU07SUFDMUIsSUFBSUEsT0FBT0Msa0JBQWtCLElBQUlELE9BQU9FLGtCQUFrQixLQUFLRixPQUFPRyxLQUFLLENBQUNDLFdBQVcsRUFBRTtRQUN2RixJQUFJSixPQUFPQyxrQkFBa0IsRUFBRTtZQUM3QixJQUFJSSxlQUFlTCxPQUFPRyxLQUFLLENBQUNDLFdBQVc7WUFFM0MsSUFBSUUsaUJBQWlCRCxhQUFhRSxZQUFZO1lBRTlDYixvQkFBb0JjLHdCQUF3QixDQUFDO2dCQUMzQywrQ0FBK0M7Z0JBQy9DQyxlQUFlO2dCQUNmQyxhQUFhQyxLQUFLQyxTQUFTLENBQUM7b0JBQzFCQyxZQUFZLElBQUlDLFFBQVFDLEtBQUs7Z0JBQy9CO2dCQUNBVCxnQkFBZ0JLLEtBQUtDLFNBQVMsQ0FBQ04sZUFBZVUsSUFBSTtZQUNwRDtRQUNGO1FBRUE7SUFDRjtJQUVBLElBQUlaLGNBQWNKLE9BQU9HLEtBQUssQ0FBQ0MsV0FBVztJQUMxQyxJQUFJYSxvQkFBb0JuQix3QkFBd0JNLGFBQWFQLDRCQUE0Qkc7SUFDekYsSUFBSWtCLHdCQUF3QkQsa0JBQWtCWCxjQUFjO0lBRTVELElBQUlZLDBCQUEwQmQsWUFBWUcsWUFBWSxJQUFJO1FBQ3hELElBQUlVLGtCQUFrQkUsYUFBYSxFQUFFO1lBQ25DZixjQUFjUixZQUFZd0IsY0FBYyxDQUFDaEIsYUFBYWM7UUFDeEQsT0FBTztZQUNMZCxjQUFjUixZQUFZeUIsZUFBZSxDQUFDakIsYUFBYWM7UUFDekQ7UUFFQWxCLE9BQU9zQixNQUFNLENBQUNsQjtJQUNoQjtBQUNGO0FBRUFtQixPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uU2VsZWN0LmpzP2RlYmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0SnNEZWJ1Z0xvZ2dpbmcgPSByZXF1aXJlKFwiLi9EcmFmdEpzRGVidWdMb2dnaW5nXCIpO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxudmFyIGdldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lciA9IHJlcXVpcmUoXCIuL2dldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lclwiKTtcblxudmFyIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uID0gcmVxdWlyZShcIi4vZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25cIik7XG5cbmZ1bmN0aW9uIGVkaXRPblNlbGVjdChlZGl0b3IpIHtcbiAgaWYgKGVkaXRvci5fYmxvY2tTZWxlY3RFdmVudHMgfHwgZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSAhPT0gZWRpdG9yLnByb3BzLmVkaXRvclN0YXRlKSB7XG4gICAgaWYgKGVkaXRvci5fYmxvY2tTZWxlY3RFdmVudHMpIHtcbiAgICAgIHZhciBfZWRpdG9yU3RhdGUgPSBlZGl0b3IucHJvcHMuZWRpdG9yU3RhdGU7XG5cbiAgICAgIHZhciBzZWxlY3Rpb25TdGF0ZSA9IF9lZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICAgICAgRHJhZnRKc0RlYnVnTG9nZ2luZy5sb2dCbG9ja2VkU2VsZWN0aW9uRXZlbnQoe1xuICAgICAgICAvLyBGb3Igbm93IEkgZG9uJ3QgdGhpbmsgd2UgbmVlZCBhbnkgb3RoZXIgaW5mb1xuICAgICAgICBhbm9ueW1pemVkRG9tOiAnTi9BJyxcbiAgICAgICAgZXh0cmFQYXJhbXM6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBzdGFja3RyYWNlOiBuZXcgRXJyb3IoKS5zdGFja1xuICAgICAgICB9KSxcbiAgICAgICAgc2VsZWN0aW9uU3RhdGU6IEpTT04uc3RyaW5naWZ5KHNlbGVjdGlvblN0YXRlLnRvSlMoKSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5wcm9wcy5lZGl0b3JTdGF0ZTtcbiAgdmFyIGRvY3VtZW50U2VsZWN0aW9uID0gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIGdldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lcihlZGl0b3IpKTtcbiAgdmFyIHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSA9IGRvY3VtZW50U2VsZWN0aW9uLnNlbGVjdGlvblN0YXRlO1xuXG4gIGlmICh1cGRhdGVkU2VsZWN0aW9uU3RhdGUgIT09IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKSB7XG4gICAgaWYgKGRvY3VtZW50U2VsZWN0aW9uLm5lZWRzUmVjb3ZlcnkpIHtcbiAgICAgIGVkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKGVkaXRvclN0YXRlLCB1cGRhdGVkU2VsZWN0aW9uU3RhdGUpO1xuICAgIH1cblxuICAgIGVkaXRvci51cGRhdGUoZWRpdG9yU3RhdGUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uU2VsZWN0OyJdLCJuYW1lcyI6WyJEcmFmdEpzRGVidWdMb2dnaW5nIiwicmVxdWlyZSIsIkVkaXRvclN0YXRlIiwiZ2V0Q29udGVudEVkaXRhYmxlQ29udGFpbmVyIiwiZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24iLCJlZGl0T25TZWxlY3QiLCJlZGl0b3IiLCJfYmxvY2tTZWxlY3RFdmVudHMiLCJfbGF0ZXN0RWRpdG9yU3RhdGUiLCJwcm9wcyIsImVkaXRvclN0YXRlIiwiX2VkaXRvclN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJnZXRTZWxlY3Rpb24iLCJsb2dCbG9ja2VkU2VsZWN0aW9uRXZlbnQiLCJhbm9ueW1pemVkRG9tIiwiZXh0cmFQYXJhbXMiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhY2t0cmFjZSIsIkVycm9yIiwic3RhY2siLCJ0b0pTIiwiZG9jdW1lbnRTZWxlY3Rpb24iLCJ1cGRhdGVkU2VsZWN0aW9uU3RhdGUiLCJuZWVkc1JlY292ZXJ5IiwiZm9yY2VTZWxlY3Rpb24iLCJhY2NlcHRTZWxlY3Rpb24iLCJ1cGRhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnSelect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/encodeEntityRanges.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/encodeEntityRanges.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftStringKey = __webpack_require__(/*! ./DraftStringKey */ \"(ssr)/./node_modules/draft-js/lib/DraftStringKey.js\");\nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar strlen = UnicodeUtils.strlen;\n/**\n * Convert to UTF-8 character counts for storage.\n */ function encodeEntityRanges(block, storageMap) {\n    var encoded = [];\n    block.findEntityRanges(function(character) {\n        return !!character.getEntity();\n    }, function(/*number*/ start, /*number*/ end) {\n        var text = block.getText();\n        var key = block.getEntityAt(start);\n        encoded.push({\n            offset: strlen(text.slice(0, start)),\n            length: strlen(text.slice(start, end)),\n            // Encode the key as a number for range storage.\n            key: Number(storageMap[DraftStringKey.stringify(key)])\n        });\n    });\n    return encoded;\n}\nmodule.exports = encodeEntityRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VuY29kZUVudGl0eVJhbmdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGlCQUFpQkMsbUJBQU9BLENBQUMsNkVBQWtCO0FBRS9DLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJRSxTQUFTRCxhQUFhQyxNQUFNO0FBQ2hDOztDQUVDLEdBRUQsU0FBU0MsbUJBQW1CQyxLQUFLLEVBQUVDLFVBQVU7SUFDM0MsSUFBSUMsVUFBVSxFQUFFO0lBQ2hCRixNQUFNRyxnQkFBZ0IsQ0FBQyxTQUFVQyxTQUFTO1FBQ3hDLE9BQU8sQ0FBQyxDQUFDQSxVQUFVQyxTQUFTO0lBQzlCLEdBQUcsU0FDSCxRQUFRLEdBQ1JDLEtBQUssRUFDTCxRQUFRLEdBQ1JDLEdBQUc7UUFDRCxJQUFJQyxPQUFPUixNQUFNUyxPQUFPO1FBQ3hCLElBQUlDLE1BQU1WLE1BQU1XLFdBQVcsQ0FBQ0w7UUFDNUJKLFFBQVFVLElBQUksQ0FBQztZQUNYQyxRQUFRZixPQUFPVSxLQUFLTSxLQUFLLENBQUMsR0FBR1I7WUFDN0JTLFFBQVFqQixPQUFPVSxLQUFLTSxLQUFLLENBQUNSLE9BQU9DO1lBQ2pDLGdEQUFnRDtZQUNoREcsS0FBS00sT0FBT2YsVUFBVSxDQUFDTixlQUFlc0IsU0FBUyxDQUFDUCxLQUFLO1FBQ3ZEO0lBQ0Y7SUFDQSxPQUFPUjtBQUNUO0FBRUFnQixPQUFPQyxPQUFPLEdBQUdwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZW5jb2RlRW50aXR5UmFuZ2VzLmpzP2VmOTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0U3RyaW5nS2V5ID0gcmVxdWlyZShcIi4vRHJhZnRTdHJpbmdLZXlcIik7XG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZVV0aWxzXCIpO1xuXG52YXIgc3RybGVuID0gVW5pY29kZVV0aWxzLnN0cmxlbjtcbi8qKlxuICogQ29udmVydCB0byBVVEYtOCBjaGFyYWN0ZXIgY291bnRzIGZvciBzdG9yYWdlLlxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUVudGl0eVJhbmdlcyhibG9jaywgc3RvcmFnZU1hcCkge1xuICB2YXIgZW5jb2RlZCA9IFtdO1xuICBibG9jay5maW5kRW50aXR5UmFuZ2VzKGZ1bmN0aW9uIChjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gISFjaGFyYWN0ZXIuZ2V0RW50aXR5KCk7XG4gIH0sIGZ1bmN0aW9uIChcbiAgLypudW1iZXIqL1xuICBzdGFydCxcbiAgLypudW1iZXIqL1xuICBlbmQpIHtcbiAgICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgICB2YXIga2V5ID0gYmxvY2suZ2V0RW50aXR5QXQoc3RhcnQpO1xuICAgIGVuY29kZWQucHVzaCh7XG4gICAgICBvZmZzZXQ6IHN0cmxlbih0ZXh0LnNsaWNlKDAsIHN0YXJ0KSksXG4gICAgICBsZW5ndGg6IHN0cmxlbih0ZXh0LnNsaWNlKHN0YXJ0LCBlbmQpKSxcbiAgICAgIC8vIEVuY29kZSB0aGUga2V5IGFzIGEgbnVtYmVyIGZvciByYW5nZSBzdG9yYWdlLlxuICAgICAga2V5OiBOdW1iZXIoc3RvcmFnZU1hcFtEcmFmdFN0cmluZ0tleS5zdHJpbmdpZnkoa2V5KV0pXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gZW5jb2RlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbmNvZGVFbnRpdHlSYW5nZXM7Il0sIm5hbWVzIjpbIkRyYWZ0U3RyaW5nS2V5IiwicmVxdWlyZSIsIlVuaWNvZGVVdGlscyIsInN0cmxlbiIsImVuY29kZUVudGl0eVJhbmdlcyIsImJsb2NrIiwic3RvcmFnZU1hcCIsImVuY29kZWQiLCJmaW5kRW50aXR5UmFuZ2VzIiwiY2hhcmFjdGVyIiwiZ2V0RW50aXR5Iiwic3RhcnQiLCJlbmQiLCJ0ZXh0IiwiZ2V0VGV4dCIsImtleSIsImdldEVudGl0eUF0IiwicHVzaCIsIm9mZnNldCIsInNsaWNlIiwibGVuZ3RoIiwiTnVtYmVyIiwic3RyaW5naWZ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/encodeEntityRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/encodeInlineStyleRanges.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/encodeInlineStyleRanges.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar areEqual = function areEqual(a, b) {\n    return a === b;\n};\nvar isTruthy = function isTruthy(a) {\n    return !!a;\n};\nvar EMPTY_ARRAY = [];\n/**\n * Helper function for getting encoded styles for each inline style. Convert\n * to UTF-8 character counts for storage.\n */ function getEncodedInlinesForType(block, styleList, styleToEncode) {\n    var ranges = []; // Obtain an array with ranges for only the specified style.\n    var filteredInlines = styleList.map(function(style) {\n        return style.has(styleToEncode);\n    }).toList();\n    findRangesImmutable(filteredInlines, areEqual, isTruthy, function(start, end) {\n        var text = block.getText();\n        ranges.push({\n            offset: UnicodeUtils.strlen(text.slice(0, start)),\n            length: UnicodeUtils.strlen(text.slice(start, end)),\n            style: styleToEncode\n        });\n    });\n    return ranges;\n}\n/*\n * Retrieve the encoded arrays of inline styles, with each individual style\n * treated separately.\n */ function encodeInlineStyleRanges(block) {\n    var styleList = block.getCharacterList().map(function(c) {\n        return c.getStyle();\n    }).toList();\n    var ranges = styleList.flatten().toSet().map(function(style) {\n        return getEncodedInlinesForType(block, styleList, style);\n    });\n    return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());\n}\nmodule.exports = encodeInlineStyleRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VuY29kZUlubGluZVN0eWxlUmFuZ2VzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUMsNEVBQXVCO0FBRWxELElBQUlDLHNCQUFzQkQsbUJBQU9BLENBQUMsdUZBQXVCO0FBRXpELElBQUlFLFdBQVcsU0FBU0EsU0FBU0MsQ0FBQyxFQUFFQyxDQUFDO0lBQ25DLE9BQU9ELE1BQU1DO0FBQ2Y7QUFFQSxJQUFJQyxXQUFXLFNBQVNBLFNBQVNGLENBQUM7SUFDaEMsT0FBTyxDQUFDLENBQUNBO0FBQ1g7QUFFQSxJQUFJRyxjQUFjLEVBQUU7QUFDcEI7OztDQUdDLEdBRUQsU0FBU0MseUJBQXlCQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsYUFBYTtJQUMvRCxJQUFJQyxTQUFTLEVBQUUsRUFBRSw0REFBNEQ7SUFFN0UsSUFBSUMsa0JBQWtCSCxVQUFVSSxHQUFHLENBQUMsU0FBVUMsS0FBSztRQUNqRCxPQUFPQSxNQUFNQyxHQUFHLENBQUNMO0lBQ25CLEdBQUdNLE1BQU07SUFDVGYsb0JBQW9CVyxpQkFBaUJWLFVBQ3JDRyxVQUFVLFNBQVVZLEtBQUssRUFBRUMsR0FBRztRQUM1QixJQUFJQyxPQUFPWCxNQUFNWSxPQUFPO1FBQ3hCVCxPQUFPVSxJQUFJLENBQUM7WUFDVkMsUUFBUXZCLGFBQWF3QixNQUFNLENBQUNKLEtBQUtLLEtBQUssQ0FBQyxHQUFHUDtZQUMxQ1EsUUFBUTFCLGFBQWF3QixNQUFNLENBQUNKLEtBQUtLLEtBQUssQ0FBQ1AsT0FBT0M7WUFDOUNKLE9BQU9KO1FBQ1Q7SUFDRjtJQUNBLE9BQU9DO0FBQ1Q7QUFDQTs7O0NBR0MsR0FHRCxTQUFTZSx3QkFBd0JsQixLQUFLO0lBQ3BDLElBQUlDLFlBQVlELE1BQU1tQixnQkFBZ0IsR0FBR2QsR0FBRyxDQUFDLFNBQVVlLENBQUM7UUFDdEQsT0FBT0EsRUFBRUMsUUFBUTtJQUNuQixHQUFHYixNQUFNO0lBQ1QsSUFBSUwsU0FBU0YsVUFBVXFCLE9BQU8sR0FBR0MsS0FBSyxHQUFHbEIsR0FBRyxDQUFDLFNBQVVDLEtBQUs7UUFDMUQsT0FBT1AseUJBQXlCQyxPQUFPQyxXQUFXSztJQUNwRDtJQUNBLE9BQU9rQixNQUFNQyxTQUFTLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDN0IsYUFBYUssT0FBT3lCLElBQUk7QUFDOUQ7QUFFQUMsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZW5jb2RlSW5saW5lU3R5bGVSYW5nZXMuanM/OTFkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVW5pY29kZVV0aWxzID0gcmVxdWlyZShcImZianMvbGliL1VuaWNvZGVVdGlsc1wiKTtcblxudmFyIGZpbmRSYW5nZXNJbW11dGFibGUgPSByZXF1aXJlKFwiLi9maW5kUmFuZ2VzSW1tdXRhYmxlXCIpO1xuXG52YXIgYXJlRXF1YWwgPSBmdW5jdGlvbiBhcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxudmFyIGlzVHJ1dGh5ID0gZnVuY3Rpb24gaXNUcnV0aHkoYSkge1xuICByZXR1cm4gISFhO1xufTtcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyBlbmNvZGVkIHN0eWxlcyBmb3IgZWFjaCBpbmxpbmUgc3R5bGUuIENvbnZlcnRcbiAqIHRvIFVURi04IGNoYXJhY3RlciBjb3VudHMgZm9yIHN0b3JhZ2UuXG4gKi9cblxuZnVuY3Rpb24gZ2V0RW5jb2RlZElubGluZXNGb3JUeXBlKGJsb2NrLCBzdHlsZUxpc3QsIHN0eWxlVG9FbmNvZGUpIHtcbiAgdmFyIHJhbmdlcyA9IFtdOyAvLyBPYnRhaW4gYW4gYXJyYXkgd2l0aCByYW5nZXMgZm9yIG9ubHkgdGhlIHNwZWNpZmllZCBzdHlsZS5cblxuICB2YXIgZmlsdGVyZWRJbmxpbmVzID0gc3R5bGVMaXN0Lm1hcChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICByZXR1cm4gc3R5bGUuaGFzKHN0eWxlVG9FbmNvZGUpO1xuICB9KS50b0xpc3QoKTtcbiAgZmluZFJhbmdlc0ltbXV0YWJsZShmaWx0ZXJlZElubGluZXMsIGFyZUVxdWFsLCAvLyBXZSBvbmx5IHdhbnQgdG8ga2VlcCByYW5nZXMgd2l0aCBub256ZXJvIHN0eWxlIHZhbHVlcy5cbiAgaXNUcnV0aHksIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gICAgcmFuZ2VzLnB1c2goe1xuICAgICAgb2Zmc2V0OiBVbmljb2RlVXRpbHMuc3RybGVuKHRleHQuc2xpY2UoMCwgc3RhcnQpKSxcbiAgICAgIGxlbmd0aDogVW5pY29kZVV0aWxzLnN0cmxlbih0ZXh0LnNsaWNlKHN0YXJ0LCBlbmQpKSxcbiAgICAgIHN0eWxlOiBzdHlsZVRvRW5jb2RlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcmFuZ2VzO1xufVxuLypcbiAqIFJldHJpZXZlIHRoZSBlbmNvZGVkIGFycmF5cyBvZiBpbmxpbmUgc3R5bGVzLCB3aXRoIGVhY2ggaW5kaXZpZHVhbCBzdHlsZVxuICogdHJlYXRlZCBzZXBhcmF0ZWx5LlxuICovXG5cblxuZnVuY3Rpb24gZW5jb2RlSW5saW5lU3R5bGVSYW5nZXMoYmxvY2spIHtcbiAgdmFyIHN0eWxlTGlzdCA9IGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5nZXRTdHlsZSgpO1xuICB9KS50b0xpc3QoKTtcbiAgdmFyIHJhbmdlcyA9IHN0eWxlTGlzdC5mbGF0dGVuKCkudG9TZXQoKS5tYXAoZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgcmV0dXJuIGdldEVuY29kZWRJbmxpbmVzRm9yVHlwZShibG9jaywgc3R5bGVMaXN0LCBzdHlsZSk7XG4gIH0pO1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShFTVBUWV9BUlJBWSwgcmFuZ2VzLnRvSlMoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlSW5saW5lU3R5bGVSYW5nZXM7Il0sIm5hbWVzIjpbIlVuaWNvZGVVdGlscyIsInJlcXVpcmUiLCJmaW5kUmFuZ2VzSW1tdXRhYmxlIiwiYXJlRXF1YWwiLCJhIiwiYiIsImlzVHJ1dGh5IiwiRU1QVFlfQVJSQVkiLCJnZXRFbmNvZGVkSW5saW5lc0ZvclR5cGUiLCJibG9jayIsInN0eWxlTGlzdCIsInN0eWxlVG9FbmNvZGUiLCJyYW5nZXMiLCJmaWx0ZXJlZElubGluZXMiLCJtYXAiLCJzdHlsZSIsImhhcyIsInRvTGlzdCIsInN0YXJ0IiwiZW5kIiwidGV4dCIsImdldFRleHQiLCJwdXNoIiwib2Zmc2V0Iiwic3RybGVuIiwic2xpY2UiLCJsZW5ndGgiLCJlbmNvZGVJbmxpbmVTdHlsZVJhbmdlcyIsImdldENoYXJhY3Rlckxpc3QiLCJjIiwiZ2V0U3R5bGUiLCJmbGF0dGVuIiwidG9TZXQiLCJBcnJheSIsInByb3RvdHlwZSIsImNvbmNhdCIsImFwcGx5IiwidG9KUyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/encodeInlineStyleRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/expandRangeToStartOfLine.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/expandRangeToStartOfLine.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar getRangeClientRects = __webpack_require__(/*! ./getRangeClientRects */ \"(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\n/**\n * Return the computed line height, in pixels, for the provided element.\n */ function getLineHeightPx(element) {\n    var computed = getComputedStyle(element);\n    var correctDocument = getCorrectDocumentFromNode(element);\n    var div = correctDocument.createElement(\"div\");\n    div.style.fontFamily = computed.fontFamily;\n    div.style.fontSize = computed.fontSize;\n    div.style.fontStyle = computed.fontStyle;\n    div.style.fontWeight = computed.fontWeight;\n    div.style.lineHeight = computed.lineHeight;\n    div.style.position = \"absolute\";\n    div.textContent = \"M\";\n    var documentBody = correctDocument.body;\n    !documentBody ?  true ? invariant(false, \"Missing document.body\") : 0 : void 0; // forced layout here\n    documentBody.appendChild(div);\n    var rect = div.getBoundingClientRect();\n    documentBody.removeChild(div);\n    return rect.height;\n}\n/**\n * Return whether every ClientRect in the provided list lies on the same line.\n *\n * We assume that the rects on the same line all contain the baseline, so the\n * lowest top line needs to be above the highest bottom line (i.e., if you were\n * to project the rects onto the y-axis, their intersection would be nonempty).\n *\n * In addition, we require that no two boxes are lineHeight (or more) apart at\n * either top or bottom, which helps protect against false positives for fonts\n * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino\n * produces rects of height 58px!).\n */ function areRectsOnOneLine(rects, lineHeight) {\n    var minTop = Infinity;\n    var minBottom = Infinity;\n    var maxTop = -Infinity;\n    var maxBottom = -Infinity;\n    for(var ii = 0; ii < rects.length; ii++){\n        var rect = rects[ii];\n        if (rect.width === 0 || rect.width === 1) {\n            continue;\n        }\n        minTop = Math.min(minTop, rect.top);\n        minBottom = Math.min(minBottom, rect.bottom);\n        maxTop = Math.max(maxTop, rect.top);\n        maxBottom = Math.max(maxBottom, rect.bottom);\n    }\n    return maxTop <= minBottom && maxTop - minTop < lineHeight && maxBottom - minBottom < lineHeight;\n}\n/**\n * Return the length of a node, as used by Range offsets.\n */ function getNodeLength(node) {\n    // http://www.w3.org/TR/dom/#concept-node-length\n    switch(node.nodeType){\n        case Node.DOCUMENT_TYPE_NODE:\n            return 0;\n        case Node.TEXT_NODE:\n        case Node.PROCESSING_INSTRUCTION_NODE:\n        case Node.COMMENT_NODE:\n            return node.length;\n        default:\n            return node.childNodes.length;\n    }\n}\n/**\n * Given a collapsed range, move the start position backwards as far as\n * possible while the range still spans only a single line.\n */ function expandRangeToStartOfLine(range) {\n    !range.collapsed ?  true ? invariant(false, \"expandRangeToStartOfLine: Provided range is not collapsed.\") : 0 : void 0;\n    range = range.cloneRange();\n    var containingElement = range.startContainer;\n    if (containingElement.nodeType !== 1) {\n        containingElement = containingElement.parentNode;\n    }\n    var lineHeight = getLineHeightPx(containingElement); // Imagine our text looks like:\n    //   <div><span>once upon a time, there was a <em>boy\n    //   who lived</em> </span><q><strong>under^ the\n    //   stairs</strong> in a small closet.</q></div>\n    // where the caret represents the cursor. First, we crawl up the tree until\n    // the range spans multiple lines (setting the start point to before\n    // \"<strong>\", then before \"<div>\"), then at each level we do a search to\n    // find the latest point which is still on a previous line. We'll find that\n    // the break point is inside the span, then inside the <em>, then in its text\n    // node child, the actual break point before \"who\".\n    var bestContainer = range.endContainer;\n    var bestOffset = range.endOffset;\n    range.setStart(range.startContainer, 0);\n    while(areRectsOnOneLine(getRangeClientRects(range), lineHeight)){\n        bestContainer = range.startContainer;\n        bestOffset = range.startOffset;\n        !bestContainer.parentNode ?  true ? invariant(false, \"Found unexpected detached subtree when traversing.\") : 0 : void 0;\n        range.setStartBefore(bestContainer);\n        if (bestContainer.nodeType === 1 && getComputedStyle(bestContainer).display !== \"inline\") {\n            break;\n        }\n    } // In the above example, range now spans from \"<div>\" to \"under\",\n    // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].\n    // Picking out which child to recurse into here is a special case since we\n    // don't want to check past <q> -- once we find that the final range starts\n    // in <span>, we can look at all of its children (and all of their children)\n    // to find the break point.\n    // At all times, (bestContainer, bestOffset) is the latest single-line start\n    // point that we know of.\n    var currentContainer = bestContainer;\n    var maxIndexToConsider = bestOffset - 1;\n    do {\n        var nodeValue = currentContainer.nodeValue;\n        var ii = maxIndexToConsider;\n        for(; ii >= 0; ii--){\n            if (nodeValue != null && ii > 0 && UnicodeUtils.isSurrogatePair(nodeValue, ii - 1)) {\n                continue;\n            }\n            range.setStart(currentContainer, ii);\n            if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\n                bestContainer = currentContainer;\n                bestOffset = ii;\n            } else {\n                break;\n            }\n        }\n        if (ii === -1 || currentContainer.childNodes.length === 0) {\n            break;\n        }\n        currentContainer = currentContainer.childNodes[ii];\n        maxIndexToConsider = getNodeLength(currentContainer);\n    }while (true);\n    range.setStart(bestContainer, bestOffset);\n    return range;\n}\nmodule.exports = expandRangeToStartOfLine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/expandRangeToStartOfLine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/findAncestorOffsetKey.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar getSelectionOffsetKeyForNode = __webpack_require__(/*! ./getSelectionOffsetKeyForNode */ \"(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js\");\n/**\n * Get the key from the node's nearest offset-aware ancestor.\n */ function findAncestorOffsetKey(node) {\n    var searchNode = node;\n    while(searchNode && searchNode !== getCorrectDocumentFromNode(node).documentElement){\n        var key = getSelectionOffsetKeyForNode(searchNode);\n        if (key != null) {\n            return key;\n        }\n        searchNode = searchNode.parentNode;\n    }\n    return null;\n}\nmodule.exports = findAncestorOffsetKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2ZpbmRBbmNlc3Rvck9mZnNldEtleS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLDZCQUE2QkMsbUJBQU9BLENBQUMscUdBQThCO0FBRXZFLElBQUlDLCtCQUErQkQsbUJBQU9BLENBQUMseUdBQWdDO0FBQzNFOztDQUVDLEdBR0QsU0FBU0Usc0JBQXNCQyxJQUFJO0lBQ2pDLElBQUlDLGFBQWFEO0lBRWpCLE1BQU9DLGNBQWNBLGVBQWVMLDJCQUEyQkksTUFBTUUsZUFBZSxDQUFFO1FBQ3BGLElBQUlDLE1BQU1MLDZCQUE2Qkc7UUFFdkMsSUFBSUUsT0FBTyxNQUFNO1lBQ2YsT0FBT0E7UUFDVDtRQUVBRixhQUFhQSxXQUFXRyxVQUFVO0lBQ3BDO0lBRUEsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2ZpbmRBbmNlc3Rvck9mZnNldEtleS5qcz9jYWEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRDb3JyZWN0RG9jdW1lbnRGcm9tTm9kZSA9IHJlcXVpcmUoXCIuL2dldENvcnJlY3REb2N1bWVudEZyb21Ob2RlXCIpO1xuXG52YXIgZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZSA9IHJlcXVpcmUoXCIuL2dldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGVcIik7XG4vKipcbiAqIEdldCB0aGUga2V5IGZyb20gdGhlIG5vZGUncyBuZWFyZXN0IG9mZnNldC1hd2FyZSBhbmNlc3Rvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRBbmNlc3Rvck9mZnNldEtleShub2RlKSB7XG4gIHZhciBzZWFyY2hOb2RlID0gbm9kZTtcblxuICB3aGlsZSAoc2VhcmNoTm9kZSAmJiBzZWFyY2hOb2RlICE9PSBnZXRDb3JyZWN0RG9jdW1lbnRGcm9tTm9kZShub2RlKS5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICB2YXIga2V5ID0gZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShzZWFyY2hOb2RlKTtcblxuICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG5cbiAgICBzZWFyY2hOb2RlID0gc2VhcmNoTm9kZS5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZEFuY2VzdG9yT2Zmc2V0S2V5OyJdLCJuYW1lcyI6WyJnZXRDb3JyZWN0RG9jdW1lbnRGcm9tTm9kZSIsInJlcXVpcmUiLCJnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlIiwiZmluZEFuY2VzdG9yT2Zmc2V0S2V5Iiwibm9kZSIsInNlYXJjaE5vZGUiLCJkb2N1bWVudEVsZW1lbnQiLCJrZXkiLCJwYXJlbnROb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/findRangesImmutable.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Search through an array to find contiguous stretches of elements that\n * match a specified filter function.\n *\n * When ranges are found, execute a specified `found` function to supply\n * the values to the caller.\n */ function findRangesImmutable(haystack, areEqualFn, filterFn, foundFn) {\n    if (!haystack.size) {\n        return;\n    }\n    var cursor = 0;\n    haystack.reduce(function(value, nextValue, nextIndex) {\n        if (!areEqualFn(value, nextValue)) {\n            if (filterFn(value)) {\n                foundFn(cursor, nextIndex);\n            }\n            cursor = nextIndex;\n        }\n        return nextValue;\n    });\n    filterFn(haystack.last()) && foundFn(cursor, haystack.count());\n}\nmodule.exports = findRangesImmutable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2ZpbmRSYW5nZXNJbW11dGFibGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTQSxvQkFBb0JDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLE9BQU87SUFDbEUsSUFBSSxDQUFDSCxTQUFTSSxJQUFJLEVBQUU7UUFDbEI7SUFDRjtJQUVBLElBQUlDLFNBQVM7SUFDYkwsU0FBU00sTUFBTSxDQUFDLFNBQVVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxTQUFTO1FBQ25ELElBQUksQ0FBQ1IsV0FBV00sT0FBT0MsWUFBWTtZQUNqQyxJQUFJTixTQUFTSyxRQUFRO2dCQUNuQkosUUFBUUUsUUFBUUk7WUFDbEI7WUFFQUosU0FBU0k7UUFDWDtRQUVBLE9BQU9EO0lBQ1Q7SUFDQU4sU0FBU0YsU0FBU1UsSUFBSSxPQUFPUCxRQUFRRSxRQUFRTCxTQUFTVyxLQUFLO0FBQzdEO0FBRUFDLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2ZpbmRSYW5nZXNJbW11dGFibGUuanM/MTkyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNlYXJjaCB0aHJvdWdoIGFuIGFycmF5IHRvIGZpbmQgY29udGlndW91cyBzdHJldGNoZXMgb2YgZWxlbWVudHMgdGhhdFxuICogbWF0Y2ggYSBzcGVjaWZpZWQgZmlsdGVyIGZ1bmN0aW9uLlxuICpcbiAqIFdoZW4gcmFuZ2VzIGFyZSBmb3VuZCwgZXhlY3V0ZSBhIHNwZWNpZmllZCBgZm91bmRgIGZ1bmN0aW9uIHRvIHN1cHBseVxuICogdGhlIHZhbHVlcyB0byB0aGUgY2FsbGVyLlxuICovXG5mdW5jdGlvbiBmaW5kUmFuZ2VzSW1tdXRhYmxlKGhheXN0YWNrLCBhcmVFcXVhbEZuLCBmaWx0ZXJGbiwgZm91bmRGbikge1xuICBpZiAoIWhheXN0YWNrLnNpemUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3Vyc29yID0gMDtcbiAgaGF5c3RhY2sucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwgbmV4dFZhbHVlLCBuZXh0SW5kZXgpIHtcbiAgICBpZiAoIWFyZUVxdWFsRm4odmFsdWUsIG5leHRWYWx1ZSkpIHtcbiAgICAgIGlmIChmaWx0ZXJGbih2YWx1ZSkpIHtcbiAgICAgICAgZm91bmRGbihjdXJzb3IsIG5leHRJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGN1cnNvciA9IG5leHRJbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dFZhbHVlO1xuICB9KTtcbiAgZmlsdGVyRm4oaGF5c3RhY2subGFzdCgpKSAmJiBmb3VuZEZuKGN1cnNvciwgaGF5c3RhY2suY291bnQoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZFJhbmdlc0ltbXV0YWJsZTsiXSwibmFtZXMiOlsiZmluZFJhbmdlc0ltbXV0YWJsZSIsImhheXN0YWNrIiwiYXJlRXF1YWxGbiIsImZpbHRlckZuIiwiZm91bmRGbiIsInNpemUiLCJjdXJzb3IiLCJyZWR1Y2UiLCJ2YWx1ZSIsIm5leHRWYWx1ZSIsIm5leHRJbmRleCIsImxhc3QiLCJjb3VudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/generateRandomKey.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/generateRandomKey.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar seenKeys = {};\nvar MULTIPLIER = Math.pow(2, 24);\nfunction generateRandomKey() {\n    var key;\n    while(key === undefined || seenKeys.hasOwnProperty(key) || !isNaN(+key)){\n        key = Math.floor(Math.random() * MULTIPLIER).toString(32);\n    }\n    seenKeys[key] = true;\n    return key;\n}\nmodule.exports = generateRandomKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dlbmVyYXRlUmFuZG9tS2V5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsV0FBVyxDQUFDO0FBQ2hCLElBQUlDLGFBQWFDLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBRTdCLFNBQVNDO0lBQ1AsSUFBSUM7SUFFSixNQUFPQSxRQUFRQyxhQUFhTixTQUFTTyxjQUFjLENBQUNGLFFBQVEsQ0FBQ0csTUFBTSxDQUFDSCxLQUFNO1FBQ3hFQSxNQUFNSCxLQUFLTyxLQUFLLENBQUNQLEtBQUtRLE1BQU0sS0FBS1QsWUFBWVUsUUFBUSxDQUFDO0lBQ3hEO0lBRUFYLFFBQVEsQ0FBQ0ssSUFBSSxHQUFHO0lBQ2hCLE9BQU9BO0FBQ1Q7QUFFQU8sT0FBT0MsT0FBTyxHQUFHVCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2VuZXJhdGVSYW5kb21LZXkuanM/ODUxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2VlbktleXMgPSB7fTtcbnZhciBNVUxUSVBMSUVSID0gTWF0aC5wb3coMiwgMjQpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUtleSgpIHtcbiAgdmFyIGtleTtcblxuICB3aGlsZSAoa2V5ID09PSB1bmRlZmluZWQgfHwgc2VlbktleXMuaGFzT3duUHJvcGVydHkoa2V5KSB8fCAhaXNOYU4oK2tleSkpIHtcbiAgICBrZXkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNVUxUSVBMSUVSKS50b1N0cmluZygzMik7XG4gIH1cblxuICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgcmV0dXJuIGtleTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZVJhbmRvbUtleTsiXSwibmFtZXMiOlsic2VlbktleXMiLCJNVUxUSVBMSUVSIiwiTWF0aCIsInBvdyIsImdlbmVyYXRlUmFuZG9tS2V5Iiwia2V5IiwidW5kZWZpbmVkIiwiaGFzT3duUHJvcGVydHkiLCJpc05hTiIsImZsb29yIiwicmFuZG9tIiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getCharacterRemovalRange.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getCharacterRemovalRange.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftEntitySegments = __webpack_require__(/*! ./DraftEntitySegments */ \"(ssr)/./node_modules/draft-js/lib/DraftEntitySegments.js\");\nvar getRangesForDraftEntity = __webpack_require__(/*! ./getRangesForDraftEntity */ \"(ssr)/./node_modules/draft-js/lib/getRangesForDraftEntity.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\n/**\n * Given a SelectionState and a removal direction, determine the entire range\n * that should be removed from a ContentState. This is based on any entities\n * within the target, with their `mutability` values taken into account.\n *\n * For instance, if we are attempting to remove part of an \"immutable\" entity\n * range, the entire entity must be removed. The returned `SelectionState`\n * will be adjusted accordingly.\n */ function getCharacterRemovalRange(entityMap, startBlock, endBlock, selectionState, direction) {\n    var start = selectionState.getStartOffset();\n    var end = selectionState.getEndOffset();\n    var startEntityKey = startBlock.getEntityAt(start);\n    var endEntityKey = endBlock.getEntityAt(end - 1);\n    if (!startEntityKey && !endEntityKey) {\n        return selectionState;\n    }\n    var newSelectionState = selectionState;\n    if (startEntityKey && startEntityKey === endEntityKey) {\n        newSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, true, true);\n    } else if (startEntityKey && endEntityKey) {\n        var startSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, false, true);\n        var endSelectionState = getEntityRemovalRange(entityMap, endBlock, newSelectionState, direction, endEntityKey, false, false);\n        newSelectionState = newSelectionState.merge({\n            anchorOffset: startSelectionState.getAnchorOffset(),\n            focusOffset: endSelectionState.getFocusOffset(),\n            isBackward: false\n        });\n    } else if (startEntityKey) {\n        var _startSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, false, true);\n        newSelectionState = newSelectionState.merge({\n            anchorOffset: _startSelectionState.getStartOffset(),\n            isBackward: false\n        });\n    } else if (endEntityKey) {\n        var _endSelectionState = getEntityRemovalRange(entityMap, endBlock, newSelectionState, direction, endEntityKey, false, false);\n        newSelectionState = newSelectionState.merge({\n            focusOffset: _endSelectionState.getEndOffset(),\n            isBackward: false\n        });\n    }\n    return newSelectionState;\n}\nfunction getEntityRemovalRange(entityMap, block, selectionState, direction, entityKey, isEntireSelectionWithinEntity, isEntityAtStart) {\n    var start = selectionState.getStartOffset();\n    var end = selectionState.getEndOffset();\n    var entity = entityMap.__get(entityKey);\n    var mutability = entity.getMutability();\n    var sideToConsider = isEntityAtStart ? start : end; // `MUTABLE` entities can just have the specified range of text removed\n    // directly. No adjustments are needed.\n    if (mutability === \"MUTABLE\") {\n        return selectionState;\n    } // Find the entity range that overlaps with our removal range.\n    var entityRanges = getRangesForDraftEntity(block, entityKey).filter(function(range) {\n        return sideToConsider <= range.end && sideToConsider >= range.start;\n    });\n    !(entityRanges.length == 1) ?  true ? invariant(false, \"There should only be one entity range within this removal range.\") : 0 : void 0;\n    var entityRange = entityRanges[0]; // For `IMMUTABLE` entity types, we will remove the entire entity range.\n    if (mutability === \"IMMUTABLE\") {\n        return selectionState.merge({\n            anchorOffset: entityRange.start,\n            focusOffset: entityRange.end,\n            isBackward: false\n        });\n    } // For `SEGMENTED` entity types, determine the appropriate segment to\n    // remove.\n    if (!isEntireSelectionWithinEntity) {\n        if (isEntityAtStart) {\n            end = entityRange.end;\n        } else {\n            start = entityRange.start;\n        }\n    }\n    var removalRange = DraftEntitySegments.getRemovalRange(start, end, block.getText().slice(entityRange.start, entityRange.end), entityRange.start, direction);\n    return selectionState.merge({\n        anchorOffset: removalRange.start,\n        focusOffset: removalRange.end,\n        isBackward: false\n    });\n}\nmodule.exports = getCharacterRemovalRange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getCharacterRemovalRange.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js":
/*!******************************************************************!*\
  !*** ./node_modules/draft-js/lib/getContentEditableContainer.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nfunction getContentEditableContainer(editor) {\n    var editorNode = editor.editorContainer;\n    !editorNode ?  true ? invariant(false, \"Missing editorNode\") : 0 : void 0;\n    !isHTMLElement(editorNode.firstChild) ?  true ? invariant(false, \"editorNode.firstChild is not an HTMLElement\") : 0 : void 0;\n    var htmlElement = editorNode.firstChild;\n    return htmlElement;\n}\nmodule.exports = getContentEditableContainer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLHNFQUFvQjtBQUU1QyxJQUFJQyxnQkFBZ0JELG1CQUFPQSxDQUFDLDJFQUFpQjtBQUU3QyxTQUFTRSw0QkFBNEJDLE1BQU07SUFDekMsSUFBSUMsYUFBYUQsT0FBT0UsZUFBZTtJQUN2QyxDQUFDRCxhQUFhRSxLQUFxQyxHQUFHUCxVQUFVLE9BQU8sd0JBQXdCQSxDQUFnQixHQUFHLEtBQUs7SUFDdkgsQ0FBQ0UsY0FBY0csV0FBV0csVUFBVSxJQUFJRCxLQUFxQyxHQUFHUCxVQUFVLE9BQU8saURBQWlEQSxDQUFnQixHQUFHLEtBQUs7SUFDMUssSUFBSVMsY0FBY0osV0FBV0csVUFBVTtJQUN2QyxPQUFPQztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lci5qcz81MzFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpO1xuXG52YXIgaXNIVE1MRWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzSFRNTEVsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGdldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lcihlZGl0b3IpIHtcbiAgdmFyIGVkaXRvck5vZGUgPSBlZGl0b3IuZWRpdG9yQ29udGFpbmVyO1xuICAhZWRpdG9yTm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgZWRpdG9yTm9kZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIWlzSFRNTEVsZW1lbnQoZWRpdG9yTm9kZS5maXJzdENoaWxkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2VkaXRvck5vZGUuZmlyc3RDaGlsZCBpcyBub3QgYW4gSFRNTEVsZW1lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBodG1sRWxlbWVudCA9IGVkaXRvck5vZGUuZmlyc3RDaGlsZDtcbiAgcmV0dXJuIGh0bWxFbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lcjsiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsImlzSFRNTEVsZW1lbnQiLCJnZXRDb250ZW50RWRpdGFibGVDb250YWluZXIiLCJlZGl0b3IiLCJlZGl0b3JOb2RlIiwiZWRpdG9yQ29udGFpbmVyIiwicHJvY2VzcyIsImZpcnN0Q2hpbGQiLCJodG1sRWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getContentStateFragment.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar randomizeBlockMapKeys = __webpack_require__(/*! ./randomizeBlockMapKeys */ \"(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js\");\nvar removeEntitiesAtEdges = __webpack_require__(/*! ./removeEntitiesAtEdges */ \"(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js\");\nvar getContentStateFragment = function getContentStateFragment(contentState, selectionState) {\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset(); // Edge entities should be stripped to ensure that we don't preserve\n    // invalid partial entities when the fragment is reused. We do, however,\n    // preserve entities that are entirely within the selection range.\n    var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var blockMap = contentWithoutEdgeEntities.getBlockMap();\n    var blockKeys = blockMap.keySeq();\n    var startIndex = blockKeys.indexOf(startKey);\n    var endIndex = blockKeys.indexOf(endKey) + 1;\n    return randomizeBlockMapKeys(blockMap.slice(startIndex, endIndex).map(function(block, blockKey) {\n        var text = block.getText();\n        var chars = block.getCharacterList();\n        if (startKey === endKey) {\n            return block.merge({\n                text: text.slice(startOffset, endOffset),\n                characterList: chars.slice(startOffset, endOffset)\n            });\n        }\n        if (blockKey === startKey) {\n            return block.merge({\n                text: text.slice(startOffset),\n                characterList: chars.slice(startOffset)\n            });\n        }\n        if (blockKey === endKey) {\n            return block.merge({\n                text: text.slice(0, endOffset),\n                characterList: chars.slice(0, endOffset)\n            });\n        }\n        return block;\n    }));\n};\nmodule.exports = getContentStateFragment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsd0JBQXdCQyxtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUMsd0JBQXdCRCxtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUUsMEJBQTBCLFNBQVNBLHdCQUF3QkMsWUFBWSxFQUFFQyxjQUFjO0lBQ3pGLElBQUlDLFdBQVdELGVBQWVFLFdBQVc7SUFDekMsSUFBSUMsY0FBY0gsZUFBZUksY0FBYztJQUMvQyxJQUFJQyxTQUFTTCxlQUFlTSxTQUFTO0lBQ3JDLElBQUlDLFlBQVlQLGVBQWVRLFlBQVksSUFBSSxvRUFBb0U7SUFDbkgsd0VBQXdFO0lBQ3hFLGtFQUFrRTtJQUVsRSxJQUFJQyw2QkFBNkJaLHNCQUFzQkUsY0FBY0M7SUFDckUsSUFBSVUsV0FBV0QsMkJBQTJCRSxXQUFXO0lBQ3JELElBQUlDLFlBQVlGLFNBQVNHLE1BQU07SUFDL0IsSUFBSUMsYUFBYUYsVUFBVUcsT0FBTyxDQUFDZDtJQUNuQyxJQUFJZSxXQUFXSixVQUFVRyxPQUFPLENBQUNWLFVBQVU7SUFDM0MsT0FBT1Ysc0JBQXNCZSxTQUFTTyxLQUFLLENBQUNILFlBQVlFLFVBQVVFLEdBQUcsQ0FBQyxTQUFVQyxLQUFLLEVBQUVDLFFBQVE7UUFDN0YsSUFBSUMsT0FBT0YsTUFBTUcsT0FBTztRQUN4QixJQUFJQyxRQUFRSixNQUFNSyxnQkFBZ0I7UUFFbEMsSUFBSXZCLGFBQWFJLFFBQVE7WUFDdkIsT0FBT2MsTUFBTU0sS0FBSyxDQUFDO2dCQUNqQkosTUFBTUEsS0FBS0osS0FBSyxDQUFDZCxhQUFhSTtnQkFDOUJtQixlQUFlSCxNQUFNTixLQUFLLENBQUNkLGFBQWFJO1lBQzFDO1FBQ0Y7UUFFQSxJQUFJYSxhQUFhbkIsVUFBVTtZQUN6QixPQUFPa0IsTUFBTU0sS0FBSyxDQUFDO2dCQUNqQkosTUFBTUEsS0FBS0osS0FBSyxDQUFDZDtnQkFDakJ1QixlQUFlSCxNQUFNTixLQUFLLENBQUNkO1lBQzdCO1FBQ0Y7UUFFQSxJQUFJaUIsYUFBYWYsUUFBUTtZQUN2QixPQUFPYyxNQUFNTSxLQUFLLENBQUM7Z0JBQ2pCSixNQUFNQSxLQUFLSixLQUFLLENBQUMsR0FBR1Y7Z0JBQ3BCbUIsZUFBZUgsTUFBTU4sS0FBSyxDQUFDLEdBQUdWO1lBQ2hDO1FBQ0Y7UUFFQSxPQUFPWTtJQUNUO0FBQ0Y7QUFFQVEsT0FBT0MsT0FBTyxHQUFHOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50LmpzPzVkN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHJhbmRvbWl6ZUJsb2NrTWFwS2V5cyA9IHJlcXVpcmUoXCIuL3JhbmRvbWl6ZUJsb2NrTWFwS2V5c1wiKTtcblxudmFyIHJlbW92ZUVudGl0aWVzQXRFZGdlcyA9IHJlcXVpcmUoXCIuL3JlbW92ZUVudGl0aWVzQXRFZGdlc1wiKTtcblxudmFyIGdldENvbnRlbnRTdGF0ZUZyYWdtZW50ID0gZnVuY3Rpb24gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSkge1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBlbmRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKTsgLy8gRWRnZSBlbnRpdGllcyBzaG91bGQgYmUgc3RyaXBwZWQgdG8gZW5zdXJlIHRoYXQgd2UgZG9uJ3QgcHJlc2VydmVcbiAgLy8gaW52YWxpZCBwYXJ0aWFsIGVudGl0aWVzIHdoZW4gdGhlIGZyYWdtZW50IGlzIHJldXNlZC4gV2UgZG8sIGhvd2V2ZXIsXG4gIC8vIHByZXNlcnZlIGVudGl0aWVzIHRoYXQgYXJlIGVudGlyZWx5IHdpdGhpbiB0aGUgc2VsZWN0aW9uIHJhbmdlLlxuXG4gIHZhciBjb250ZW50V2l0aG91dEVkZ2VFbnRpdGllcyA9IHJlbW92ZUVudGl0aWVzQXRFZGdlcyhjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKTtcbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFdpdGhvdXRFZGdlRW50aXRpZXMuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGJsb2NrS2V5cyA9IGJsb2NrTWFwLmtleVNlcSgpO1xuICB2YXIgc3RhcnRJbmRleCA9IGJsb2NrS2V5cy5pbmRleE9mKHN0YXJ0S2V5KTtcbiAgdmFyIGVuZEluZGV4ID0gYmxvY2tLZXlzLmluZGV4T2YoZW5kS2V5KSArIDE7XG4gIHJldHVybiByYW5kb21pemVCbG9ja01hcEtleXMoYmxvY2tNYXAuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpLm1hcChmdW5jdGlvbiAoYmxvY2ssIGJsb2NrS2V5KSB7XG4gICAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gICAgdmFyIGNoYXJzID0gYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuXG4gICAgaWYgKHN0YXJ0S2V5ID09PSBlbmRLZXkpIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHRleHQ6IHRleHQuc2xpY2Uoc3RhcnRPZmZzZXQsIGVuZE9mZnNldCksXG4gICAgICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJzLnNsaWNlKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoYmxvY2tLZXkgPT09IHN0YXJ0S2V5KSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICB0ZXh0OiB0ZXh0LnNsaWNlKHN0YXJ0T2Zmc2V0KSxcbiAgICAgICAgY2hhcmFjdGVyTGlzdDogY2hhcnMuc2xpY2Uoc3RhcnRPZmZzZXQpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoYmxvY2tLZXkgPT09IGVuZEtleSkge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgdGV4dDogdGV4dC5zbGljZSgwLCBlbmRPZmZzZXQpLFxuICAgICAgICBjaGFyYWN0ZXJMaXN0OiBjaGFycy5zbGljZSgwLCBlbmRPZmZzZXQpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2s7XG4gIH0pKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQ7Il0sIm5hbWVzIjpbInJhbmRvbWl6ZUJsb2NrTWFwS2V5cyIsInJlcXVpcmUiLCJyZW1vdmVFbnRpdGllc0F0RWRnZXMiLCJnZXRDb250ZW50U3RhdGVGcmFnbWVudCIsImNvbnRlbnRTdGF0ZSIsInNlbGVjdGlvblN0YXRlIiwic3RhcnRLZXkiLCJnZXRTdGFydEtleSIsInN0YXJ0T2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJlbmRLZXkiLCJnZXRFbmRLZXkiLCJlbmRPZmZzZXQiLCJnZXRFbmRPZmZzZXQiLCJjb250ZW50V2l0aG91dEVkZ2VFbnRpdGllcyIsImJsb2NrTWFwIiwiZ2V0QmxvY2tNYXAiLCJibG9ja0tleXMiLCJrZXlTZXEiLCJzdGFydEluZGV4IiwiaW5kZXhPZiIsImVuZEluZGV4Iiwic2xpY2UiLCJtYXAiLCJibG9jayIsImJsb2NrS2V5IiwidGV4dCIsImdldFRleHQiLCJjaGFycyIsImdldENoYXJhY3Rlckxpc3QiLCJtZXJnZSIsImNoYXJhY3Rlckxpc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/getCorrectDocumentFromNode.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function getCorrectDocumentFromNode(node) {\n    if (!node || !node.ownerDocument) {\n        return document;\n    }\n    return node.ownerDocument;\n}\nmodule.exports = getCorrectDocumentFromNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvcnJlY3REb2N1bWVudEZyb21Ob2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0EsMkJBQTJCQyxJQUFJO0lBQ3RDLElBQUksQ0FBQ0EsUUFBUSxDQUFDQSxLQUFLQyxhQUFhLEVBQUU7UUFDaEMsT0FBT0M7SUFDVDtJQUVBLE9BQU9GLEtBQUtDLGFBQWE7QUFDM0I7QUFFQUUsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0Q29ycmVjdERvY3VtZW50RnJvbU5vZGUuanM/NDUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbmZ1bmN0aW9uIGdldENvcnJlY3REb2N1bWVudEZyb21Ob2RlKG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8ICFub2RlLm93bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQ7XG4gIH1cblxuICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldENvcnJlY3REb2N1bWVudEZyb21Ob2RlOyJdLCJuYW1lcyI6WyJnZXRDb3JyZWN0RG9jdW1lbnRGcm9tTm9kZSIsIm5vZGUiLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/getDefaultKeyBinding.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar KeyBindingUtil = __webpack_require__(/*! ./KeyBindingUtil */ \"(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\");\nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar isOSX = UserAgent.isPlatform(\"Mac OS X\"); // Firefox on OSX had a bug resulting in navigation instead of cursor movement.\n// This bug was fixed in Firefox 29. Feature detection is virtually impossible\n// so we just check the version number. See #342765.\nvar shouldFixFirefoxMovement = isOSX && UserAgent.isBrowser(\"Firefox < 29\");\nvar hasCommandModifier = KeyBindingUtil.hasCommandModifier, isCtrlKeyCommand = KeyBindingUtil.isCtrlKeyCommand;\nfunction shouldRemoveWord(e) {\n    return isOSX && e.altKey || isCtrlKeyCommand(e);\n}\n/**\n * Get the appropriate undo/redo command for a Z key command.\n */ function getZCommand(e) {\n    if (!hasCommandModifier(e)) {\n        return null;\n    }\n    return e.shiftKey ? \"redo\" : \"undo\";\n}\nfunction getDeleteCommand(e) {\n    // Allow default \"cut\" behavior for PCs on Shift + Delete.\n    if (!isOSX && e.shiftKey) {\n        return null;\n    }\n    return shouldRemoveWord(e) ? \"delete-word\" : \"delete\";\n}\nfunction getBackspaceCommand(e) {\n    if (hasCommandModifier(e) && isOSX) {\n        return \"backspace-to-start-of-line\";\n    }\n    return shouldRemoveWord(e) ? \"backspace-word\" : \"backspace\";\n}\n/**\n * Retrieve a bound key command for the given event.\n */ function getDefaultKeyBinding(e) {\n    switch(e.keyCode){\n        case 66:\n            // B\n            return hasCommandModifier(e) ? \"bold\" : null;\n        case 68:\n            // D\n            return isCtrlKeyCommand(e) ? \"delete\" : null;\n        case 72:\n            // H\n            return isCtrlKeyCommand(e) ? \"backspace\" : null;\n        case 73:\n            // I\n            return hasCommandModifier(e) ? \"italic\" : null;\n        case 74:\n            // J\n            return hasCommandModifier(e) ? \"code\" : null;\n        case 75:\n            // K\n            return isOSX && isCtrlKeyCommand(e) ? \"secondary-cut\" : null;\n        case 77:\n            // M\n            return isCtrlKeyCommand(e) ? \"split-block\" : null;\n        case 79:\n            // O\n            return isCtrlKeyCommand(e) ? \"split-block\" : null;\n        case 84:\n            // T\n            return isOSX && isCtrlKeyCommand(e) ? \"transpose-characters\" : null;\n        case 85:\n            // U\n            return hasCommandModifier(e) ? \"underline\" : null;\n        case 87:\n            // W\n            return isOSX && isCtrlKeyCommand(e) ? \"backspace-word\" : null;\n        case 89:\n            // Y\n            if (isCtrlKeyCommand(e)) {\n                return isOSX ? \"secondary-paste\" : \"redo\";\n            }\n            return null;\n        case 90:\n            // Z\n            return getZCommand(e) || null;\n        case Keys.RETURN:\n            return \"split-block\";\n        case Keys.DELETE:\n            return getDeleteCommand(e);\n        case Keys.BACKSPACE:\n            return getBackspaceCommand(e);\n        // LEFT/RIGHT handlers serve as a workaround for a Firefox bug.\n        case Keys.LEFT:\n            return shouldFixFirefoxMovement && hasCommandModifier(e) ? \"move-selection-to-start-of-block\" : null;\n        case Keys.RIGHT:\n            return shouldFixFirefoxMovement && hasCommandModifier(e) ? \"move-selection-to-end-of-block\" : null;\n        default:\n            return null;\n    }\n}\nmodule.exports = getDefaultKeyBinding;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERlZmF1bHRLZXlCaW5kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsaUJBQWlCQyxtQkFBT0EsQ0FBQyw2RUFBa0I7QUFFL0MsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUMsNERBQWU7QUFFbEMsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlHLFFBQVFELFVBQVVFLFVBQVUsQ0FBQyxhQUFhLCtFQUErRTtBQUM3SCw4RUFBOEU7QUFDOUUsb0RBQW9EO0FBRXBELElBQUlDLDJCQUEyQkYsU0FBU0QsVUFBVUksU0FBUyxDQUFDO0FBQzVELElBQUlDLHFCQUFxQlIsZUFBZVEsa0JBQWtCLEVBQ3REQyxtQkFBbUJULGVBQWVTLGdCQUFnQjtBQUV0RCxTQUFTQyxpQkFBaUJDLENBQUM7SUFDekIsT0FBT1AsU0FBU08sRUFBRUMsTUFBTSxJQUFJSCxpQkFBaUJFO0FBQy9DO0FBQ0E7O0NBRUMsR0FHRCxTQUFTRSxZQUFZRixDQUFDO0lBQ3BCLElBQUksQ0FBQ0gsbUJBQW1CRyxJQUFJO1FBQzFCLE9BQU87SUFDVDtJQUVBLE9BQU9BLEVBQUVHLFFBQVEsR0FBRyxTQUFTO0FBQy9CO0FBRUEsU0FBU0MsaUJBQWlCSixDQUFDO0lBQ3pCLDBEQUEwRDtJQUMxRCxJQUFJLENBQUNQLFNBQVNPLEVBQUVHLFFBQVEsRUFBRTtRQUN4QixPQUFPO0lBQ1Q7SUFFQSxPQUFPSixpQkFBaUJDLEtBQUssZ0JBQWdCO0FBQy9DO0FBRUEsU0FBU0ssb0JBQW9CTCxDQUFDO0lBQzVCLElBQUlILG1CQUFtQkcsTUFBTVAsT0FBTztRQUNsQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPTSxpQkFBaUJDLEtBQUssbUJBQW1CO0FBQ2xEO0FBQ0E7O0NBRUMsR0FHRCxTQUFTTSxxQkFBcUJOLENBQUM7SUFDN0IsT0FBUUEsRUFBRU8sT0FBTztRQUNmLEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT1YsbUJBQW1CRyxLQUFLLFNBQVM7UUFFMUMsS0FBSztZQUNILElBQUk7WUFDSixPQUFPRixpQkFBaUJFLEtBQUssV0FBVztRQUUxQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9GLGlCQUFpQkUsS0FBSyxjQUFjO1FBRTdDLEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT0gsbUJBQW1CRyxLQUFLLFdBQVc7UUFFNUMsS0FBSztZQUNILElBQUk7WUFDSixPQUFPSCxtQkFBbUJHLEtBQUssU0FBUztRQUUxQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9QLFNBQVNLLGlCQUFpQkUsS0FBSyxrQkFBa0I7UUFFMUQsS0FBSztZQUNILElBQUk7WUFDSixPQUFPRixpQkFBaUJFLEtBQUssZ0JBQWdCO1FBRS9DLEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT0YsaUJBQWlCRSxLQUFLLGdCQUFnQjtRQUUvQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9QLFNBQVNLLGlCQUFpQkUsS0FBSyx5QkFBeUI7UUFFakUsS0FBSztZQUNILElBQUk7WUFDSixPQUFPSCxtQkFBbUJHLEtBQUssY0FBYztRQUUvQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9QLFNBQVNLLGlCQUFpQkUsS0FBSyxtQkFBbUI7UUFFM0QsS0FBSztZQUNILElBQUk7WUFDSixJQUFJRixpQkFBaUJFLElBQUk7Z0JBQ3ZCLE9BQU9QLFFBQVEsb0JBQW9CO1lBQ3JDO1lBRUEsT0FBTztRQUVULEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT1MsWUFBWUYsTUFBTTtRQUUzQixLQUFLVCxLQUFLaUIsTUFBTTtZQUNkLE9BQU87UUFFVCxLQUFLakIsS0FBS2tCLE1BQU07WUFDZCxPQUFPTCxpQkFBaUJKO1FBRTFCLEtBQUtULEtBQUttQixTQUFTO1lBQ2pCLE9BQU9MLG9CQUFvQkw7UUFDN0IsK0RBQStEO1FBRS9ELEtBQUtULEtBQUtvQixJQUFJO1lBQ1osT0FBT2hCLDRCQUE0QkUsbUJBQW1CRyxLQUFLLHFDQUFxQztRQUVsRyxLQUFLVCxLQUFLcUIsS0FBSztZQUNiLE9BQU9qQiw0QkFBNEJFLG1CQUFtQkcsS0FBSyxtQ0FBbUM7UUFFaEc7WUFDRSxPQUFPO0lBQ1g7QUFDRjtBQUVBYSxPQUFPQyxPQUFPLEdBQUdSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXREZWZhdWx0S2V5QmluZGluZy5qcz8zN2QwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBLZXlCaW5kaW5nVXRpbCA9IHJlcXVpcmUoXCIuL0tleUJpbmRpbmdVdGlsXCIpO1xuXG52YXIgS2V5cyA9IHJlcXVpcmUoXCJmYmpzL2xpYi9LZXlzXCIpO1xuXG52YXIgVXNlckFnZW50ID0gcmVxdWlyZShcImZianMvbGliL1VzZXJBZ2VudFwiKTtcblxudmFyIGlzT1NYID0gVXNlckFnZW50LmlzUGxhdGZvcm0oJ01hYyBPUyBYJyk7IC8vIEZpcmVmb3ggb24gT1NYIGhhZCBhIGJ1ZyByZXN1bHRpbmcgaW4gbmF2aWdhdGlvbiBpbnN0ZWFkIG9mIGN1cnNvciBtb3ZlbWVudC5cbi8vIFRoaXMgYnVnIHdhcyBmaXhlZCBpbiBGaXJlZm94IDI5LiBGZWF0dXJlIGRldGVjdGlvbiBpcyB2aXJ0dWFsbHkgaW1wb3NzaWJsZVxuLy8gc28gd2UganVzdCBjaGVjayB0aGUgdmVyc2lvbiBudW1iZXIuIFNlZSAjMzQyNzY1LlxuXG52YXIgc2hvdWxkRml4RmlyZWZveE1vdmVtZW50ID0gaXNPU1ggJiYgVXNlckFnZW50LmlzQnJvd3NlcignRmlyZWZveCA8IDI5Jyk7XG52YXIgaGFzQ29tbWFuZE1vZGlmaWVyID0gS2V5QmluZGluZ1V0aWwuaGFzQ29tbWFuZE1vZGlmaWVyLFxuICAgIGlzQ3RybEtleUNvbW1hbmQgPSBLZXlCaW5kaW5nVXRpbC5pc0N0cmxLZXlDb21tYW5kO1xuXG5mdW5jdGlvbiBzaG91bGRSZW1vdmVXb3JkKGUpIHtcbiAgcmV0dXJuIGlzT1NYICYmIGUuYWx0S2V5IHx8IGlzQ3RybEtleUNvbW1hbmQoZSk7XG59XG4vKipcbiAqIEdldCB0aGUgYXBwcm9wcmlhdGUgdW5kby9yZWRvIGNvbW1hbmQgZm9yIGEgWiBrZXkgY29tbWFuZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFpDb21tYW5kKGUpIHtcbiAgaWYgKCFoYXNDb21tYW5kTW9kaWZpZXIoZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlLnNoaWZ0S2V5ID8gJ3JlZG8nIDogJ3VuZG8nO1xufVxuXG5mdW5jdGlvbiBnZXREZWxldGVDb21tYW5kKGUpIHtcbiAgLy8gQWxsb3cgZGVmYXVsdCBcImN1dFwiIGJlaGF2aW9yIGZvciBQQ3Mgb24gU2hpZnQgKyBEZWxldGUuXG4gIGlmICghaXNPU1ggJiYgZS5zaGlmdEtleSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHNob3VsZFJlbW92ZVdvcmQoZSkgPyAnZGVsZXRlLXdvcmQnIDogJ2RlbGV0ZSc7XG59XG5cbmZ1bmN0aW9uIGdldEJhY2tzcGFjZUNvbW1hbmQoZSkge1xuICBpZiAoaGFzQ29tbWFuZE1vZGlmaWVyKGUpICYmIGlzT1NYKSB7XG4gICAgcmV0dXJuICdiYWNrc3BhY2UtdG8tc3RhcnQtb2YtbGluZSc7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkUmVtb3ZlV29yZChlKSA/ICdiYWNrc3BhY2Utd29yZCcgOiAnYmFja3NwYWNlJztcbn1cbi8qKlxuICogUmV0cmlldmUgYSBib3VuZCBrZXkgY29tbWFuZCBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEtleUJpbmRpbmcoZSkge1xuICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgIGNhc2UgNjY6XG4gICAgICAvLyBCXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2JvbGQnIDogbnVsbDtcblxuICAgIGNhc2UgNjg6XG4gICAgICAvLyBEXG4gICAgICByZXR1cm4gaXNDdHJsS2V5Q29tbWFuZChlKSA/ICdkZWxldGUnIDogbnVsbDtcblxuICAgIGNhc2UgNzI6XG4gICAgICAvLyBIXG4gICAgICByZXR1cm4gaXNDdHJsS2V5Q29tbWFuZChlKSA/ICdiYWNrc3BhY2UnIDogbnVsbDtcblxuICAgIGNhc2UgNzM6XG4gICAgICAvLyBJXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2l0YWxpYycgOiBudWxsO1xuXG4gICAgY2FzZSA3NDpcbiAgICAgIC8vIEpcbiAgICAgIHJldHVybiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAnY29kZScgOiBudWxsO1xuXG4gICAgY2FzZSA3NTpcbiAgICAgIC8vIEtcbiAgICAgIHJldHVybiBpc09TWCAmJiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3NlY29uZGFyeS1jdXQnIDogbnVsbDtcblxuICAgIGNhc2UgNzc6XG4gICAgICAvLyBNXG4gICAgICByZXR1cm4gaXNDdHJsS2V5Q29tbWFuZChlKSA/ICdzcGxpdC1ibG9jaycgOiBudWxsO1xuXG4gICAgY2FzZSA3OTpcbiAgICAgIC8vIE9cbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3NwbGl0LWJsb2NrJyA6IG51bGw7XG5cbiAgICBjYXNlIDg0OlxuICAgICAgLy8gVFxuICAgICAgcmV0dXJuIGlzT1NYICYmIGlzQ3RybEtleUNvbW1hbmQoZSkgPyAndHJhbnNwb3NlLWNoYXJhY3RlcnMnIDogbnVsbDtcblxuICAgIGNhc2UgODU6XG4gICAgICAvLyBVXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ3VuZGVybGluZScgOiBudWxsO1xuXG4gICAgY2FzZSA4NzpcbiAgICAgIC8vIFdcbiAgICAgIHJldHVybiBpc09TWCAmJiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ2JhY2tzcGFjZS13b3JkJyA6IG51bGw7XG5cbiAgICBjYXNlIDg5OlxuICAgICAgLy8gWVxuICAgICAgaWYgKGlzQ3RybEtleUNvbW1hbmQoZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzT1NYID8gJ3NlY29uZGFyeS1wYXN0ZScgOiAncmVkbyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY2FzZSA5MDpcbiAgICAgIC8vIFpcbiAgICAgIHJldHVybiBnZXRaQ29tbWFuZChlKSB8fCBudWxsO1xuXG4gICAgY2FzZSBLZXlzLlJFVFVSTjpcbiAgICAgIHJldHVybiAnc3BsaXQtYmxvY2snO1xuXG4gICAgY2FzZSBLZXlzLkRFTEVURTpcbiAgICAgIHJldHVybiBnZXREZWxldGVDb21tYW5kKGUpO1xuXG4gICAgY2FzZSBLZXlzLkJBQ0tTUEFDRTpcbiAgICAgIHJldHVybiBnZXRCYWNrc3BhY2VDb21tYW5kKGUpO1xuICAgIC8vIExFRlQvUklHSFQgaGFuZGxlcnMgc2VydmUgYXMgYSB3b3JrYXJvdW5kIGZvciBhIEZpcmVmb3ggYnVnLlxuXG4gICAgY2FzZSBLZXlzLkxFRlQ6XG4gICAgICByZXR1cm4gc2hvdWxkRml4RmlyZWZveE1vdmVtZW50ICYmIGhhc0NvbW1hbmRNb2RpZmllcihlKSA/ICdtb3ZlLXNlbGVjdGlvbi10by1zdGFydC1vZi1ibG9jaycgOiBudWxsO1xuXG4gICAgY2FzZSBLZXlzLlJJR0hUOlxuICAgICAgcmV0dXJuIHNob3VsZEZpeEZpcmVmb3hNb3ZlbWVudCAmJiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAnbW92ZS1zZWxlY3Rpb24tdG8tZW5kLW9mLWJsb2NrJyA6IG51bGw7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXREZWZhdWx0S2V5QmluZGluZzsiXSwibmFtZXMiOlsiS2V5QmluZGluZ1V0aWwiLCJyZXF1aXJlIiwiS2V5cyIsIlVzZXJBZ2VudCIsImlzT1NYIiwiaXNQbGF0Zm9ybSIsInNob3VsZEZpeEZpcmVmb3hNb3ZlbWVudCIsImlzQnJvd3NlciIsImhhc0NvbW1hbmRNb2RpZmllciIsImlzQ3RybEtleUNvbW1hbmQiLCJzaG91bGRSZW1vdmVXb3JkIiwiZSIsImFsdEtleSIsImdldFpDb21tYW5kIiwic2hpZnRLZXkiLCJnZXREZWxldGVDb21tYW5kIiwiZ2V0QmFja3NwYWNlQ29tbWFuZCIsImdldERlZmF1bHRLZXlCaW5kaW5nIiwia2V5Q29kZSIsIlJFVFVSTiIsIkRFTEVURSIsIkJBQ0tTUEFDRSIsIkxFRlQiLCJSSUdIVCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getDraftEditorSelection.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getDraftEditorSelectionWithNodes = __webpack_require__(/*! ./getDraftEditorSelectionWithNodes */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js\");\n/**\n * Convert the current selection range to an anchor/focus pair of offset keys\n * and values that can be interpreted by components.\n */ function getDraftEditorSelection(editorState, root) {\n    var selection = root.ownerDocument.defaultView.getSelection();\n    var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset, rangeCount = selection.rangeCount;\n    if (rangeCount === 0 || // No selection, ever. As in, the user hasn't selected anything since\n    // opening the document.\n    anchorNode == null || focusNode == null) {\n        return {\n            selectionState: editorState.getSelection().set(\"hasFocus\", false),\n            needsRecovery: false\n        };\n    }\n    return getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset);\n}\nmodule.exports = getDraftEditorSelection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsbUNBQW1DQyxtQkFBT0EsQ0FBQyxpSEFBb0M7QUFDbkY7OztDQUdDLEdBR0QsU0FBU0Msd0JBQXdCQyxXQUFXLEVBQUVDLElBQUk7SUFDaEQsSUFBSUMsWUFBWUQsS0FBS0UsYUFBYSxDQUFDQyxXQUFXLENBQUNDLFlBQVk7SUFDM0QsSUFBSUMsYUFBYUosVUFBVUksVUFBVSxFQUNqQ0MsZUFBZUwsVUFBVUssWUFBWSxFQUNyQ0MsWUFBWU4sVUFBVU0sU0FBUyxFQUMvQkMsY0FBY1AsVUFBVU8sV0FBVyxFQUNuQ0MsYUFBYVIsVUFBVVEsVUFBVTtJQUVyQyxJQUNBQSxlQUFlLEtBQUsscUVBQXFFO0lBQ3pGLHdCQUF3QjtJQUN4QkosY0FBYyxRQUFRRSxhQUFhLE1BQU07UUFDdkMsT0FBTztZQUNMRyxnQkFBZ0JYLFlBQVlLLFlBQVksR0FBR08sR0FBRyxDQUFDLFlBQVk7WUFDM0RDLGVBQWU7UUFDakI7SUFDRjtJQUVBLE9BQU9oQixpQ0FBaUNHLGFBQWFDLE1BQU1LLFlBQVlDLGNBQWNDLFdBQVdDO0FBQ2xHO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXREcmFmdEVkaXRvclNlbGVjdGlvbi5qcz8zYTVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyA9IHJlcXVpcmUoXCIuL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzXCIpO1xuLyoqXG4gKiBDb252ZXJ0IHRoZSBjdXJyZW50IHNlbGVjdGlvbiByYW5nZSB0byBhbiBhbmNob3IvZm9jdXMgcGFpciBvZiBvZmZzZXQga2V5c1xuICogYW5kIHZhbHVlcyB0aGF0IGNhbiBiZSBpbnRlcnByZXRlZCBieSBjb21wb25lbnRzLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHJvb3QpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHJvb3Qub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQsXG4gICAgICByYW5nZUNvdW50ID0gc2VsZWN0aW9uLnJhbmdlQ291bnQ7XG5cbiAgaWYgKCAvLyBObyBhY3RpdmUgc2VsZWN0aW9uLlxuICByYW5nZUNvdW50ID09PSAwIHx8IC8vIE5vIHNlbGVjdGlvbiwgZXZlci4gQXMgaW4sIHRoZSB1c2VyIGhhc24ndCBzZWxlY3RlZCBhbnl0aGluZyBzaW5jZVxuICAvLyBvcGVuaW5nIHRoZSBkb2N1bWVudC5cbiAgYW5jaG9yTm9kZSA9PSBudWxsIHx8IGZvY3VzTm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdGlvblN0YXRlOiBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKS5zZXQoJ2hhc0ZvY3VzJywgZmFsc2UpLFxuICAgICAgbmVlZHNSZWNvdmVyeTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzKGVkaXRvclN0YXRlLCByb290LCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uOyJdLCJuYW1lcyI6WyJnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyIsInJlcXVpcmUiLCJnZXREcmFmdEVkaXRvclNlbGVjdGlvbiIsImVkaXRvclN0YXRlIiwicm9vdCIsInNlbGVjdGlvbiIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInJhbmdlQ291bnQiLCJzZWxlY3Rpb25TdGF0ZSIsInNldCIsIm5lZWRzUmVjb3ZlcnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js":
/*!***********************************************************************!*\
  !*** ./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar getSelectionOffsetKeyForNode = __webpack_require__(/*! ./getSelectionOffsetKeyForNode */ \"(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js\");\nvar getUpdatedSelectionState = __webpack_require__(/*! ./getUpdatedSelectionState */ \"(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * Convert the current selection range to an anchor/focus pair of offset keys\n * and values that can be interpreted by components.\n */ function getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset) {\n    var anchorIsTextNode = anchorNode.nodeType === Node.TEXT_NODE;\n    var focusIsTextNode = focusNode.nodeType === Node.TEXT_NODE; // If the selection range lies only on text nodes, the task is simple.\n    // Find the nearest offset-aware elements and use the\n    // offset values supplied by the selection range.\n    if (anchorIsTextNode && focusIsTextNode) {\n        return {\n            selectionState: getUpdatedSelectionState(editorState, nullthrows(findAncestorOffsetKey(anchorNode)), anchorOffset, nullthrows(findAncestorOffsetKey(focusNode)), focusOffset),\n            needsRecovery: false\n        };\n    }\n    var anchorPoint = null;\n    var focusPoint = null;\n    var needsRecovery = true; // An element is selected. Convert this selection range into leaf offset\n    // keys and offset values for consumption at the component level. This\n    // is common in Firefox, where select-all and triple click behavior leads\n    // to entire elements being selected.\n    //\n    // Note that we use the `needsRecovery` parameter in the callback here. This\n    // is because when certain elements are selected, the behavior for subsequent\n    // cursor movement (e.g. via arrow keys) is uncertain and may not match\n    // expectations at the component level. For example, if an entire <div> is\n    // selected and the user presses the right arrow, Firefox keeps the selection\n    // on the <div>. If we allow subsequent keypresses to insert characters\n    // natively, they will be inserted into a browser-created text node to the\n    // right of that <div>. This is obviously undesirable.\n    //\n    // With the `needsRecovery` flag, we inform the caller that it is responsible\n    // for manually setting the selection state on the rendered document to\n    // ensure proper selection state maintenance.\n    if (anchorIsTextNode) {\n        anchorPoint = {\n            key: nullthrows(findAncestorOffsetKey(anchorNode)),\n            offset: anchorOffset\n        };\n        focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);\n    } else if (focusIsTextNode) {\n        focusPoint = {\n            key: nullthrows(findAncestorOffsetKey(focusNode)),\n            offset: focusOffset\n        };\n        anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);\n    } else {\n        anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);\n        focusPoint = getPointForNonTextNode(root, focusNode, focusOffset); // If the selection is collapsed on an empty block, don't force recovery.\n        // This way, on arrow key selection changes, the browser can move the\n        // cursor from a non-zero offset on one block, through empty blocks,\n        // to a matching non-zero offset on other text blocks.\n        if (anchorNode === focusNode && anchorOffset === focusOffset) {\n            needsRecovery = !!anchorNode.firstChild && anchorNode.firstChild.nodeName !== \"BR\";\n        }\n    }\n    return {\n        selectionState: getUpdatedSelectionState(editorState, anchorPoint.key, anchorPoint.offset, focusPoint.key, focusPoint.offset),\n        needsRecovery: needsRecovery\n    };\n}\n/**\n * Identify the first leaf descendant for the given node.\n */ function getFirstLeaf(node) {\n    while(node.firstChild && (isElement(node.firstChild) && node.firstChild.getAttribute(\"data-blocks\") === \"true\" || getSelectionOffsetKeyForNode(node.firstChild))){\n        node = node.firstChild;\n    }\n    return node;\n}\n/**\n * Identify the last leaf descendant for the given node.\n */ function getLastLeaf(node) {\n    while(node.lastChild && (isElement(node.lastChild) && node.lastChild.getAttribute(\"data-blocks\") === \"true\" || getSelectionOffsetKeyForNode(node.lastChild))){\n        node = node.lastChild;\n    }\n    return node;\n}\nfunction getPointForNonTextNode(editorRoot, startNode, childOffset) {\n    var node = startNode;\n    var offsetKey = findAncestorOffsetKey(node);\n    !(offsetKey != null || editorRoot && (editorRoot === node || editorRoot.firstChild === node)) ?  true ? invariant(false, \"Unknown node in selection range.\") : 0 : void 0; // If the editorRoot is the selection, step downward into the content\n    // wrapper.\n    if (editorRoot === node) {\n        node = node.firstChild;\n        !isElement(node) ?  true ? invariant(false, \"Invalid DraftEditorContents node.\") : 0 : void 0;\n        var castedNode = node; // assignment only added for flow :/\n        // otherwise it throws in line 200 saying that node can be null or undefined\n        node = castedNode;\n        !(node.getAttribute(\"data-contents\") === \"true\") ?  true ? invariant(false, \"Invalid DraftEditorContents structure.\") : 0 : void 0;\n        if (childOffset > 0) {\n            childOffset = node.childNodes.length;\n        }\n    } // If the child offset is zero and we have an offset key, we're done.\n    // If there's no offset key because the entire editor is selected,\n    // find the leftmost (\"first\") leaf in the tree and use that as the offset\n    // key.\n    if (childOffset === 0) {\n        var key = null;\n        if (offsetKey != null) {\n            key = offsetKey;\n        } else {\n            var firstLeaf = getFirstLeaf(node);\n            key = nullthrows(getSelectionOffsetKeyForNode(firstLeaf));\n        }\n        return {\n            key: key,\n            offset: 0\n        };\n    }\n    var nodeBeforeCursor = node.childNodes[childOffset - 1];\n    var leafKey = null;\n    var textLength = null;\n    if (!getSelectionOffsetKeyForNode(nodeBeforeCursor)) {\n        // Our target node may be a leaf or a text node, in which case we're\n        // already where we want to be and can just use the child's length as\n        // our offset.\n        leafKey = nullthrows(offsetKey);\n        textLength = getTextContentLength(nodeBeforeCursor);\n    } else {\n        // Otherwise, we'll look at the child to the left of the cursor and find\n        // the last leaf node in its subtree.\n        var lastLeaf = getLastLeaf(nodeBeforeCursor);\n        leafKey = nullthrows(getSelectionOffsetKeyForNode(lastLeaf));\n        textLength = getTextContentLength(lastLeaf);\n    }\n    return {\n        key: leafKey,\n        offset: textLength\n    };\n}\n/**\n * Return the length of a node's textContent, regarding single newline\n * characters as zero-length. This allows us to avoid problems with identifying\n * the correct selection offset for empty blocks in IE, in which we\n * render newlines instead of break tags.\n */ function getTextContentLength(node) {\n    var textContent = node.textContent;\n    return textContent === \"\\n\" ? 0 : textContent.length;\n}\nmodule.exports = getDraftEditorSelectionWithNodes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getEntityKeyForSelection.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _require = __webpack_require__(/*! ./draftKeyUtils */ \"(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js\"), notEmptyKey = _require.notEmptyKey;\n/**\n * Return the entity key that should be used when inserting text for the\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n * and `SEGMENTED` entities should not be used for insertion behavior.\n */ function getEntityKeyForSelection(contentState, targetSelection) {\n    var entityKey;\n    if (targetSelection.isCollapsed()) {\n        var key = targetSelection.getAnchorKey();\n        var offset = targetSelection.getAnchorOffset();\n        if (offset > 0) {\n            entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n            if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n                return null;\n            }\n            return filterKey(contentState.getEntityMap(), entityKey);\n        }\n        return null;\n    }\n    var startKey = targetSelection.getStartKey();\n    var startOffset = targetSelection.getStartOffset();\n    var startBlock = contentState.getBlockForKey(startKey);\n    entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n    return filterKey(contentState.getEntityMap(), entityKey);\n}\n/**\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n * return it. If not, return null.\n */ function filterKey(entityMap, entityKey) {\n    if (notEmptyKey(entityKey)) {\n        var entity = entityMap.__get(entityKey);\n        return entity.getMutability() === \"MUTABLE\" ? entityKey : null;\n    }\n    return null;\n}\nmodule.exports = getEntityKeyForSelection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEVudGl0eUtleUZvclNlbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFdBQVdDLG1CQUFPQSxDQUFDLDJFQUFpQixHQUNwQ0MsY0FBY0YsU0FBU0UsV0FBVztBQUN0Qzs7OztDQUlDLEdBR0QsU0FBU0MseUJBQXlCQyxZQUFZLEVBQUVDLGVBQWU7SUFDN0QsSUFBSUM7SUFFSixJQUFJRCxnQkFBZ0JFLFdBQVcsSUFBSTtRQUNqQyxJQUFJQyxNQUFNSCxnQkFBZ0JJLFlBQVk7UUFDdEMsSUFBSUMsU0FBU0wsZ0JBQWdCTSxlQUFlO1FBRTVDLElBQUlELFNBQVMsR0FBRztZQUNkSixZQUFZRixhQUFhUSxjQUFjLENBQUNKLEtBQUtLLFdBQVcsQ0FBQ0gsU0FBUztZQUVsRSxJQUFJSixjQUFjRixhQUFhUSxjQUFjLENBQUNKLEtBQUtLLFdBQVcsQ0FBQ0gsU0FBUztnQkFDdEUsT0FBTztZQUNUO1lBRUEsT0FBT0ksVUFBVVYsYUFBYVcsWUFBWSxJQUFJVDtRQUNoRDtRQUVBLE9BQU87SUFDVDtJQUVBLElBQUlVLFdBQVdYLGdCQUFnQlksV0FBVztJQUMxQyxJQUFJQyxjQUFjYixnQkFBZ0JjLGNBQWM7SUFDaEQsSUFBSUMsYUFBYWhCLGFBQWFRLGNBQWMsQ0FBQ0k7SUFDN0NWLFlBQVlZLGdCQUFnQkUsV0FBV0MsU0FBUyxLQUFLLE9BQU9ELFdBQVdQLFdBQVcsQ0FBQ0s7SUFDbkYsT0FBT0osVUFBVVYsYUFBYVcsWUFBWSxJQUFJVDtBQUNoRDtBQUNBOzs7Q0FHQyxHQUdELFNBQVNRLFVBQVVRLFNBQVMsRUFBRWhCLFNBQVM7SUFDckMsSUFBSUosWUFBWUksWUFBWTtRQUMxQixJQUFJaUIsU0FBU0QsVUFBVUUsS0FBSyxDQUFDbEI7UUFFN0IsT0FBT2lCLE9BQU9FLGFBQWEsT0FBTyxZQUFZbkIsWUFBWTtJQUM1RDtJQUVBLE9BQU87QUFDVDtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEVudGl0eUtleUZvclNlbGVjdGlvbi5qcz9mOTgyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2RyYWZ0S2V5VXRpbHNcIiksXG4gICAgbm90RW1wdHlLZXkgPSBfcmVxdWlyZS5ub3RFbXB0eUtleTtcbi8qKlxuICogUmV0dXJuIHRoZSBlbnRpdHkga2V5IHRoYXQgc2hvdWxkIGJlIHVzZWQgd2hlbiBpbnNlcnRpbmcgdGV4dCBmb3IgdGhlXG4gKiBzcGVjaWZpZWQgdGFyZ2V0IHNlbGVjdGlvbiwgb25seSBpZiB0aGUgZW50aXR5IGlzIGBNVVRBQkxFYC4gYElNTVVUQUJMRWBcbiAqIGFuZCBgU0VHTUVOVEVEYCBlbnRpdGllcyBzaG91bGQgbm90IGJlIHVzZWQgZm9yIGluc2VydGlvbiBiZWhhdmlvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEVudGl0eUtleUZvclNlbGVjdGlvbihjb250ZW50U3RhdGUsIHRhcmdldFNlbGVjdGlvbikge1xuICB2YXIgZW50aXR5S2V5O1xuXG4gIGlmICh0YXJnZXRTZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIHZhciBrZXkgPSB0YXJnZXRTZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gICAgdmFyIG9mZnNldCA9IHRhcmdldFNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKTtcblxuICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICBlbnRpdHlLZXkgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoa2V5KS5nZXRFbnRpdHlBdChvZmZzZXQgLSAxKTtcblxuICAgICAgaWYgKGVudGl0eUtleSAhPT0gY29udGVudFN0YXRlLmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0RW50aXR5QXQob2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbHRlcktleShjb250ZW50U3RhdGUuZ2V0RW50aXR5TWFwKCksIGVudGl0eUtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc3RhcnRLZXkgPSB0YXJnZXRTZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gdGFyZ2V0U2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBzdGFydEJsb2NrID0gY29udGVudFN0YXRlLmdldEJsb2NrRm9yS2V5KHN0YXJ0S2V5KTtcbiAgZW50aXR5S2V5ID0gc3RhcnRPZmZzZXQgPT09IHN0YXJ0QmxvY2suZ2V0TGVuZ3RoKCkgPyBudWxsIDogc3RhcnRCbG9jay5nZXRFbnRpdHlBdChzdGFydE9mZnNldCk7XG4gIHJldHVybiBmaWx0ZXJLZXkoY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpLCBlbnRpdHlLZXkpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBhbiBlbnRpdHkga2V5IGNvcnJlc3BvbmRzIHRvIGEgYE1VVEFCTEVgIGVudGl0eS4gSWYgc28sXG4gKiByZXR1cm4gaXQuIElmIG5vdCwgcmV0dXJuIG51bGwuXG4gKi9cblxuXG5mdW5jdGlvbiBmaWx0ZXJLZXkoZW50aXR5TWFwLCBlbnRpdHlLZXkpIHtcbiAgaWYgKG5vdEVtcHR5S2V5KGVudGl0eUtleSkpIHtcbiAgICB2YXIgZW50aXR5ID0gZW50aXR5TWFwLl9fZ2V0KGVudGl0eUtleSk7XG5cbiAgICByZXR1cm4gZW50aXR5LmdldE11dGFiaWxpdHkoKSA9PT0gJ01VVEFCTEUnID8gZW50aXR5S2V5IDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEVudGl0eUtleUZvclNlbGVjdGlvbjsiXSwibmFtZXMiOlsiX3JlcXVpcmUiLCJyZXF1aXJlIiwibm90RW1wdHlLZXkiLCJnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24iLCJjb250ZW50U3RhdGUiLCJ0YXJnZXRTZWxlY3Rpb24iLCJlbnRpdHlLZXkiLCJpc0NvbGxhcHNlZCIsImtleSIsImdldEFuY2hvcktleSIsIm9mZnNldCIsImdldEFuY2hvck9mZnNldCIsImdldEJsb2NrRm9yS2V5IiwiZ2V0RW50aXR5QXQiLCJmaWx0ZXJLZXkiLCJnZXRFbnRpdHlNYXAiLCJzdGFydEtleSIsImdldFN0YXJ0S2V5Iiwic3RhcnRPZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsInN0YXJ0QmxvY2siLCJnZXRMZW5ndGgiLCJlbnRpdHlNYXAiLCJlbnRpdHkiLCJfX2dldCIsImdldE11dGFiaWxpdHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getFragmentFromSelection.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\nfunction getFragmentFromSelection(editorState) {\n    var selectionState = editorState.getSelection();\n    if (selectionState.isCollapsed()) {\n        return null;\n    }\n    return getContentStateFragment(editorState.getCurrentContent(), selectionState);\n}\nmodule.exports = getFragmentFromSelection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLDBCQUEwQkMsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLFNBQVNDLHlCQUF5QkMsV0FBVztJQUMzQyxJQUFJQyxpQkFBaUJELFlBQVlFLFlBQVk7SUFFN0MsSUFBSUQsZUFBZUUsV0FBVyxJQUFJO1FBQ2hDLE9BQU87SUFDVDtJQUVBLE9BQU9OLHdCQUF3QkcsWUFBWUksaUJBQWlCLElBQUlIO0FBQ2xFO0FBRUFJLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvbi5qcz82MmUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IHJlcXVpcmUoXCIuL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50XCIpO1xuXG5mdW5jdGlvbiBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24oZWRpdG9yU3RhdGUpIHtcbiAgdmFyIHNlbGVjdGlvblN0YXRlID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKHNlbGVjdGlvblN0YXRlLmlzQ29sbGFwc2VkKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBnZXRDb250ZW50U3RhdGVGcmFnbWVudChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBzZWxlY3Rpb25TdGF0ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uOyJdLCJuYW1lcyI6WyJnZXRDb250ZW50U3RhdGVGcmFnbWVudCIsInJlcXVpcmUiLCJnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24iLCJlZGl0b3JTdGF0ZSIsInNlbGVjdGlvblN0YXRlIiwiZ2V0U2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiLCJnZXRDdXJyZW50Q29udGVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getNextDelimiterBlockKey.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ var ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar getNextDelimiterBlockKey = function getNextDelimiterBlockKey(block, blockMap) {\n    var isExperimentalTreeBlock = block instanceof ContentBlockNode;\n    if (!isExperimentalTreeBlock) {\n        return null;\n    }\n    var nextSiblingKey = block.getNextSiblingKey();\n    if (nextSiblingKey) {\n        return nextSiblingKey;\n    }\n    var parent = block.getParentKey();\n    if (!parent) {\n        return null;\n    }\n    var nextNonDescendantBlock = blockMap.get(parent);\n    while(nextNonDescendantBlock && !nextNonDescendantBlock.getNextSiblingKey()){\n        var parentKey = nextNonDescendantBlock.getParentKey();\n        nextNonDescendantBlock = parentKey ? blockMap.get(parentKey) : null;\n    }\n    if (!nextNonDescendantBlock) {\n        return null;\n    }\n    return nextNonDescendantBlock.getNextSiblingKey();\n};\nmodule.exports = getNextDelimiterBlockKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldE5leHREZWxpbWl0ZXJCbG9ja0tleS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELElBQUlBLG1CQUFtQkMsbUJBQU9BLENBQUMsaUZBQW9CO0FBRW5ELElBQUlDLDJCQUEyQixTQUFTQSx5QkFBeUJDLEtBQUssRUFBRUMsUUFBUTtJQUM5RSxJQUFJQywwQkFBMEJGLGlCQUFpQkg7SUFFL0MsSUFBSSxDQUFDSyx5QkFBeUI7UUFDNUIsT0FBTztJQUNUO0lBRUEsSUFBSUMsaUJBQWlCSCxNQUFNSSxpQkFBaUI7SUFFNUMsSUFBSUQsZ0JBQWdCO1FBQ2xCLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJRSxTQUFTTCxNQUFNTSxZQUFZO0lBRS9CLElBQUksQ0FBQ0QsUUFBUTtRQUNYLE9BQU87SUFDVDtJQUVBLElBQUlFLHlCQUF5Qk4sU0FBU08sR0FBRyxDQUFDSDtJQUUxQyxNQUFPRSwwQkFBMEIsQ0FBQ0EsdUJBQXVCSCxpQkFBaUIsR0FBSTtRQUM1RSxJQUFJSyxZQUFZRix1QkFBdUJELFlBQVk7UUFDbkRDLHlCQUF5QkUsWUFBWVIsU0FBU08sR0FBRyxDQUFDQyxhQUFhO0lBQ2pFO0lBRUEsSUFBSSxDQUFDRix3QkFBd0I7UUFDM0IsT0FBTztJQUNUO0lBRUEsT0FBT0EsdUJBQXVCSCxpQkFBaUI7QUFDakQ7QUFFQU0sT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5LmpzPzU0MmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICpcbiAqIFRoaXMgaXMgdW5zdGFibGUgYW5kIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgYnlcbiAqIHByb2R1Y3Rpb24gc3lzdGVtcy4gVGhpcyBmaWxlIG1heSBiZSB1cGRhdGUvcmVtb3ZlZCB3aXRob3V0IG5vdGljZS5cbiAqL1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKFwiLi9Db250ZW50QmxvY2tOb2RlXCIpO1xuXG52YXIgZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5ID0gZnVuY3Rpb24gZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5KGJsb2NrLCBibG9ja01hcCkge1xuICB2YXIgaXNFeHBlcmltZW50YWxUcmVlQmxvY2sgPSBibG9jayBpbnN0YW5jZW9mIENvbnRlbnRCbG9ja05vZGU7XG5cbiAgaWYgKCFpc0V4cGVyaW1lbnRhbFRyZWVCbG9jaykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG5leHRTaWJsaW5nS2V5ID0gYmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKTtcblxuICBpZiAobmV4dFNpYmxpbmdLZXkpIHtcbiAgICByZXR1cm4gbmV4dFNpYmxpbmdLZXk7XG4gIH1cblxuICB2YXIgcGFyZW50ID0gYmxvY2suZ2V0UGFyZW50S2V5KCk7XG5cbiAgaWYgKCFwYXJlbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBuZXh0Tm9uRGVzY2VuZGFudEJsb2NrID0gYmxvY2tNYXAuZ2V0KHBhcmVudCk7XG5cbiAgd2hpbGUgKG5leHROb25EZXNjZW5kYW50QmxvY2sgJiYgIW5leHROb25EZXNjZW5kYW50QmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKSkge1xuICAgIHZhciBwYXJlbnRLZXkgPSBuZXh0Tm9uRGVzY2VuZGFudEJsb2NrLmdldFBhcmVudEtleSgpO1xuICAgIG5leHROb25EZXNjZW5kYW50QmxvY2sgPSBwYXJlbnRLZXkgPyBibG9ja01hcC5nZXQocGFyZW50S2V5KSA6IG51bGw7XG4gIH1cblxuICBpZiAoIW5leHROb25EZXNjZW5kYW50QmxvY2spIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXh0Tm9uRGVzY2VuZGFudEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5leHREZWxpbWl0ZXJCbG9ja0tleTsiXSwibmFtZXMiOlsiQ29udGVudEJsb2NrTm9kZSIsInJlcXVpcmUiLCJnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkiLCJibG9jayIsImJsb2NrTWFwIiwiaXNFeHBlcmltZW50YWxUcmVlQmxvY2siLCJuZXh0U2libGluZ0tleSIsImdldE5leHRTaWJsaW5nS2V5IiwicGFyZW50IiwiZ2V0UGFyZW50S2V5IiwibmV4dE5vbkRlc2NlbmRhbnRCbG9jayIsImdldCIsInBhcmVudEtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/getOwnObjectValues.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * \n * @typechecks\n * @format\n */ /**\n * Retrieve an object's own values as an array. If you want the values in the\n * protoype chain, too, use getObjectValuesIncludingPrototype.\n *\n * If you are looking for a function that creates an Array instance based\n * on an \"Array-like\" object, use createArrayFrom instead.\n *\n * @param {object} obj An object.\n * @return {array}     The object's values.\n */ function getOwnObjectValues(obj) {\n    return Object.keys(obj).map(function(key) {\n        return obj[key];\n    });\n}\nmodule.exports = getOwnObjectValues;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldE93bk9iamVjdFZhbHVlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Q0FNQyxHQUVEOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNBLG1CQUFtQkMsR0FBRztJQUM3QixPQUFPQyxPQUFPQyxJQUFJLENBQUNGLEtBQUtHLEdBQUcsQ0FBQyxTQUFVQyxHQUFHO1FBQ3ZDLE9BQU9KLEdBQUcsQ0FBQ0ksSUFBSTtJQUNqQjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldE93bk9iamVjdFZhbHVlcy5qcz9mZTY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDA0LXByZXNlbnQgRmFjZWJvb2suIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogXG4gKiBAdHlwZWNoZWNrc1xuICogQGZvcm1hdFxuICovXG5cbi8qKlxuICogUmV0cmlldmUgYW4gb2JqZWN0J3Mgb3duIHZhbHVlcyBhcyBhbiBhcnJheS4gSWYgeW91IHdhbnQgdGhlIHZhbHVlcyBpbiB0aGVcbiAqIHByb3RveXBlIGNoYWluLCB0b28sIHVzZSBnZXRPYmplY3RWYWx1ZXNJbmNsdWRpbmdQcm90b3R5cGUuXG4gKlxuICogSWYgeW91IGFyZSBsb29raW5nIGZvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhbiBBcnJheSBpbnN0YW5jZSBiYXNlZFxuICogb24gYW4gXCJBcnJheS1saWtlXCIgb2JqZWN0LCB1c2UgY3JlYXRlQXJyYXlGcm9tIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9iaiBBbiBvYmplY3QuXG4gKiBAcmV0dXJuIHthcnJheX0gICAgIFRoZSBvYmplY3QncyB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldE93bk9iamVjdFZhbHVlcyhvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE93bk9iamVjdFZhbHVlczsiXSwibmFtZXMiOlsiZ2V0T3duT2JqZWN0VmFsdWVzIiwib2JqIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getRangeBoundingClientRect.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/getRangeBoundingClientRect.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getRangeClientRects = __webpack_require__(/*! ./getRangeClientRects */ \"(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js\");\n/**\n * Like range.getBoundingClientRect() but normalizes for browser bugs.\n */ function getRangeBoundingClientRect(range) {\n    // \"Return a DOMRect object describing the smallest rectangle that includes\n    // the first rectangle in list and all of the remaining rectangles of which\n    // the height or width is not zero.\"\n    // http://www.w3.org/TR/cssom-view/#dom-range-getboundingclientrect\n    var rects = getRangeClientRects(range);\n    var top = 0;\n    var right = 0;\n    var bottom = 0;\n    var left = 0;\n    if (rects.length) {\n        // If the first rectangle has 0 width, we use the second, this is needed\n        // because Chrome renders a 0 width rectangle when the selection contains\n        // a line break.\n        if (rects.length > 1 && rects[0].width === 0) {\n            var _rects$ = rects[1];\n            top = _rects$.top;\n            right = _rects$.right;\n            bottom = _rects$.bottom;\n            left = _rects$.left;\n        } else {\n            var _rects$2 = rects[0];\n            top = _rects$2.top;\n            right = _rects$2.right;\n            bottom = _rects$2.bottom;\n            left = _rects$2.left;\n        }\n        for(var ii = 1; ii < rects.length; ii++){\n            var rect = rects[ii];\n            if (rect.height !== 0 && rect.width !== 0) {\n                top = Math.min(top, rect.top);\n                right = Math.max(right, rect.right);\n                bottom = Math.max(bottom, rect.bottom);\n                left = Math.min(left, rect.left);\n            }\n        }\n    }\n    return {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: right - left,\n        height: bottom - top\n    };\n}\nmodule.exports = getRangeBoundingClientRect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsc0JBQXNCQyxtQkFBT0EsQ0FBQyx1RkFBdUI7QUFFekQ7O0NBRUMsR0FDRCxTQUFTQywyQkFBMkJDLEtBQUs7SUFDdkMsMkVBQTJFO0lBQzNFLDJFQUEyRTtJQUMzRSxvQ0FBb0M7SUFDcEMsbUVBQW1FO0lBQ25FLElBQUlDLFFBQVFKLG9CQUFvQkc7SUFDaEMsSUFBSUUsTUFBTTtJQUNWLElBQUlDLFFBQVE7SUFDWixJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsT0FBTztJQUVYLElBQUlKLE1BQU1LLE1BQU0sRUFBRTtRQUNoQix3RUFBd0U7UUFDeEUseUVBQXlFO1FBQ3pFLGdCQUFnQjtRQUNoQixJQUFJTCxNQUFNSyxNQUFNLEdBQUcsS0FBS0wsS0FBSyxDQUFDLEVBQUUsQ0FBQ00sS0FBSyxLQUFLLEdBQUc7WUFDNUMsSUFBSUMsVUFBVVAsS0FBSyxDQUFDLEVBQUU7WUFDdEJDLE1BQU1NLFFBQVFOLEdBQUc7WUFDakJDLFFBQVFLLFFBQVFMLEtBQUs7WUFDckJDLFNBQVNJLFFBQVFKLE1BQU07WUFDdkJDLE9BQU9HLFFBQVFILElBQUk7UUFDckIsT0FBTztZQUNMLElBQUlJLFdBQVdSLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCQyxNQUFNTyxTQUFTUCxHQUFHO1lBQ2xCQyxRQUFRTSxTQUFTTixLQUFLO1lBQ3RCQyxTQUFTSyxTQUFTTCxNQUFNO1lBQ3hCQyxPQUFPSSxTQUFTSixJQUFJO1FBQ3RCO1FBRUEsSUFBSyxJQUFJSyxLQUFLLEdBQUdBLEtBQUtULE1BQU1LLE1BQU0sRUFBRUksS0FBTTtZQUN4QyxJQUFJQyxPQUFPVixLQUFLLENBQUNTLEdBQUc7WUFFcEIsSUFBSUMsS0FBS0MsTUFBTSxLQUFLLEtBQUtELEtBQUtKLEtBQUssS0FBSyxHQUFHO2dCQUN6Q0wsTUFBTVcsS0FBS0MsR0FBRyxDQUFDWixLQUFLUyxLQUFLVCxHQUFHO2dCQUM1QkMsUUFBUVUsS0FBS0UsR0FBRyxDQUFDWixPQUFPUSxLQUFLUixLQUFLO2dCQUNsQ0MsU0FBU1MsS0FBS0UsR0FBRyxDQUFDWCxRQUFRTyxLQUFLUCxNQUFNO2dCQUNyQ0MsT0FBT1EsS0FBS0MsR0FBRyxDQUFDVCxNQUFNTSxLQUFLTixJQUFJO1lBQ2pDO1FBQ0Y7SUFDRjtJQUVBLE9BQU87UUFDTEgsS0FBS0E7UUFDTEMsT0FBT0E7UUFDUEMsUUFBUUE7UUFDUkMsTUFBTUE7UUFDTkUsT0FBT0osUUFBUUU7UUFDZk8sUUFBUVIsU0FBU0Y7SUFDbkI7QUFDRjtBQUVBYyxPQUFPQyxPQUFPLEdBQUdsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3QuanM/NjdjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UmFuZ2VDbGllbnRSZWN0cyA9IHJlcXVpcmUoXCIuL2dldFJhbmdlQ2xpZW50UmVjdHNcIik7XG5cbi8qKlxuICogTGlrZSByYW5nZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBidXQgbm9ybWFsaXplcyBmb3IgYnJvd3NlciBidWdzLlxuICovXG5mdW5jdGlvbiBnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdChyYW5nZSkge1xuICAvLyBcIlJldHVybiBhIERPTVJlY3Qgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIHNtYWxsZXN0IHJlY3RhbmdsZSB0aGF0IGluY2x1ZGVzXG4gIC8vIHRoZSBmaXJzdCByZWN0YW5nbGUgaW4gbGlzdCBhbmQgYWxsIG9mIHRoZSByZW1haW5pbmcgcmVjdGFuZ2xlcyBvZiB3aGljaFxuICAvLyB0aGUgaGVpZ2h0IG9yIHdpZHRoIGlzIG5vdCB6ZXJvLlwiXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2Nzc29tLXZpZXcvI2RvbS1yYW5nZS1nZXRib3VuZGluZ2NsaWVudHJlY3RcbiAgdmFyIHJlY3RzID0gZ2V0UmFuZ2VDbGllbnRSZWN0cyhyYW5nZSk7XG4gIHZhciB0b3AgPSAwO1xuICB2YXIgcmlnaHQgPSAwO1xuICB2YXIgYm90dG9tID0gMDtcbiAgdmFyIGxlZnQgPSAwO1xuXG4gIGlmIChyZWN0cy5sZW5ndGgpIHtcbiAgICAvLyBJZiB0aGUgZmlyc3QgcmVjdGFuZ2xlIGhhcyAwIHdpZHRoLCB3ZSB1c2UgdGhlIHNlY29uZCwgdGhpcyBpcyBuZWVkZWRcbiAgICAvLyBiZWNhdXNlIENocm9tZSByZW5kZXJzIGEgMCB3aWR0aCByZWN0YW5nbGUgd2hlbiB0aGUgc2VsZWN0aW9uIGNvbnRhaW5zXG4gICAgLy8gYSBsaW5lIGJyZWFrLlxuICAgIGlmIChyZWN0cy5sZW5ndGggPiAxICYmIHJlY3RzWzBdLndpZHRoID09PSAwKSB7XG4gICAgICB2YXIgX3JlY3RzJCA9IHJlY3RzWzFdO1xuICAgICAgdG9wID0gX3JlY3RzJC50b3A7XG4gICAgICByaWdodCA9IF9yZWN0cyQucmlnaHQ7XG4gICAgICBib3R0b20gPSBfcmVjdHMkLmJvdHRvbTtcbiAgICAgIGxlZnQgPSBfcmVjdHMkLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVjdHMkMiA9IHJlY3RzWzBdO1xuICAgICAgdG9wID0gX3JlY3RzJDIudG9wO1xuICAgICAgcmlnaHQgPSBfcmVjdHMkMi5yaWdodDtcbiAgICAgIGJvdHRvbSA9IF9yZWN0cyQyLmJvdHRvbTtcbiAgICAgIGxlZnQgPSBfcmVjdHMkMi5sZWZ0O1xuICAgIH1cblxuICAgIGZvciAodmFyIGlpID0gMTsgaWkgPCByZWN0cy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciByZWN0ID0gcmVjdHNbaWldO1xuXG4gICAgICBpZiAocmVjdC5oZWlnaHQgIT09IDAgJiYgcmVjdC53aWR0aCAhPT0gMCkge1xuICAgICAgICB0b3AgPSBNYXRoLm1pbih0b3AsIHJlY3QudG9wKTtcbiAgICAgICAgcmlnaHQgPSBNYXRoLm1heChyaWdodCwgcmVjdC5yaWdodCk7XG4gICAgICAgIGJvdHRvbSA9IE1hdGgubWF4KGJvdHRvbSwgcmVjdC5ib3R0b20pO1xuICAgICAgICBsZWZ0ID0gTWF0aC5taW4obGVmdCwgcmVjdC5sZWZ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogdG9wLFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHdpZHRoOiByaWdodCAtIGxlZnQsXG4gICAgaGVpZ2h0OiBib3R0b20gLSB0b3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdDsiXSwibmFtZXMiOlsiZ2V0UmFuZ2VDbGllbnRSZWN0cyIsInJlcXVpcmUiLCJnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdCIsInJhbmdlIiwicmVjdHMiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJsZW5ndGgiLCJ3aWR0aCIsIl9yZWN0cyQiLCJfcmVjdHMkMiIsImlpIiwicmVjdCIsImhlaWdodCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getRangeBoundingClientRect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/getRangeClientRects.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isChrome = UserAgent.isBrowser(\"Chrome\"); // In Chrome, the client rects will include the entire bounds of all nodes that\n// begin (have a start tag) within the selection, even if the selection does\n// not overlap the entire node. To resolve this, we split the range at each\n// start tag and join the client rects together.\n// https://code.google.com/p/chromium/issues/detail?id=324437\n/* eslint-disable consistent-return */ function getRangeClientRectsChrome(range) {\n    var tempRange = range.cloneRange();\n    var clientRects = [];\n    for(var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode){\n        // If we've climbed up to the common ancestor, we can now use the\n        // original start point and stop climbing the tree.\n        var atCommonAncestor = ancestor === range.commonAncestorContainer;\n        if (atCommonAncestor) {\n            tempRange.setStart(range.startContainer, range.startOffset);\n        } else {\n            tempRange.setStart(tempRange.endContainer, 0);\n        }\n        var rects = Array.from(tempRange.getClientRects());\n        clientRects.push(rects);\n        if (atCommonAncestor) {\n            var _ref;\n            clientRects.reverse();\n            return (_ref = []).concat.apply(_ref, clientRects);\n        }\n        tempRange.setEndBefore(ancestor);\n    }\n     true ?  true ? invariant(false, \"Found an unexpected detached subtree when getting range client rects.\") : 0 : 0;\n}\n/* eslint-enable consistent-return */ /**\n * Like range.getClientRects() but normalizes for browser bugs.\n */ var getRangeClientRects = isChrome ? getRangeClientRectsChrome : function(range) {\n    return Array.from(range.getClientRects());\n};\nmodule.exports = getRangeClientRects;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlQ2xpZW50UmVjdHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxzRUFBb0I7QUFFNUMsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlFLFdBQVdILFVBQVVJLFNBQVMsQ0FBQyxXQUFXLCtFQUErRTtBQUM3SCw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLGdEQUFnRDtBQUNoRCw2REFBNkQ7QUFFN0Qsb0NBQW9DLEdBRXBDLFNBQVNDLDBCQUEwQkMsS0FBSztJQUN0QyxJQUFJQyxZQUFZRCxNQUFNRSxVQUFVO0lBQ2hDLElBQUlDLGNBQWMsRUFBRTtJQUVwQixJQUFLLElBQUlDLFdBQVdKLE1BQU1LLFlBQVksRUFBRUQsWUFBWSxNQUFNQSxXQUFXQSxTQUFTRSxVQUFVLENBQUU7UUFDeEYsaUVBQWlFO1FBQ2pFLG1EQUFtRDtRQUNuRCxJQUFJQyxtQkFBbUJILGFBQWFKLE1BQU1RLHVCQUF1QjtRQUVqRSxJQUFJRCxrQkFBa0I7WUFDcEJOLFVBQVVRLFFBQVEsQ0FBQ1QsTUFBTVUsY0FBYyxFQUFFVixNQUFNVyxXQUFXO1FBQzVELE9BQU87WUFDTFYsVUFBVVEsUUFBUSxDQUFDUixVQUFVSSxZQUFZLEVBQUU7UUFDN0M7UUFFQSxJQUFJTyxRQUFRQyxNQUFNQyxJQUFJLENBQUNiLFVBQVVjLGNBQWM7UUFDL0NaLFlBQVlhLElBQUksQ0FBQ0o7UUFFakIsSUFBSUwsa0JBQWtCO1lBQ3BCLElBQUlVO1lBRUpkLFlBQVllLE9BQU87WUFDbkIsT0FBTyxDQUFDRCxPQUFPLEVBQUUsRUFBRUUsTUFBTSxDQUFDQyxLQUFLLENBQUNILE1BQU1kO1FBQ3hDO1FBRUFGLFVBQVVvQixZQUFZLENBQUNqQjtJQUN6QjtJQUVBLEtBQU0sR0FBR2tCLEtBQXFDLEdBQUcxQixVQUFVLE9BQU8sMkVBQTJFQSxDQUFnQixHQUFHLENBQU07QUFDeEs7QUFDQSxtQ0FBbUMsR0FFbkM7O0NBRUMsR0FHRCxJQUFJMkIsc0JBQXNCMUIsV0FBV0UsNEJBQTRCLFNBQVVDLEtBQUs7SUFDOUUsT0FBT2EsTUFBTUMsSUFBSSxDQUFDZCxNQUFNZSxjQUFjO0FBQ3hDO0FBQ0FTLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlQ2xpZW50UmVjdHMuanM/YzgyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVXNlckFnZW50ID0gcmVxdWlyZShcImZianMvbGliL1VzZXJBZ2VudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7XG5cbnZhciBpc0Nocm9tZSA9IFVzZXJBZ2VudC5pc0Jyb3dzZXIoJ0Nocm9tZScpOyAvLyBJbiBDaHJvbWUsIHRoZSBjbGllbnQgcmVjdHMgd2lsbCBpbmNsdWRlIHRoZSBlbnRpcmUgYm91bmRzIG9mIGFsbCBub2RlcyB0aGF0XG4vLyBiZWdpbiAoaGF2ZSBhIHN0YXJ0IHRhZykgd2l0aGluIHRoZSBzZWxlY3Rpb24sIGV2ZW4gaWYgdGhlIHNlbGVjdGlvbiBkb2VzXG4vLyBub3Qgb3ZlcmxhcCB0aGUgZW50aXJlIG5vZGUuIFRvIHJlc29sdmUgdGhpcywgd2Ugc3BsaXQgdGhlIHJhbmdlIGF0IGVhY2hcbi8vIHN0YXJ0IHRhZyBhbmQgam9pbiB0aGUgY2xpZW50IHJlY3RzIHRvZ2V0aGVyLlxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTMyNDQzN1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuXG5mdW5jdGlvbiBnZXRSYW5nZUNsaWVudFJlY3RzQ2hyb21lKHJhbmdlKSB7XG4gIHZhciB0ZW1wUmFuZ2UgPSByYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHZhciBjbGllbnRSZWN0cyA9IFtdO1xuXG4gIGZvciAodmFyIGFuY2VzdG9yID0gcmFuZ2UuZW5kQ29udGFpbmVyOyBhbmNlc3RvciAhPSBudWxsOyBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGUpIHtcbiAgICAvLyBJZiB3ZSd2ZSBjbGltYmVkIHVwIHRvIHRoZSBjb21tb24gYW5jZXN0b3IsIHdlIGNhbiBub3cgdXNlIHRoZVxuICAgIC8vIG9yaWdpbmFsIHN0YXJ0IHBvaW50IGFuZCBzdG9wIGNsaW1iaW5nIHRoZSB0cmVlLlxuICAgIHZhciBhdENvbW1vbkFuY2VzdG9yID0gYW5jZXN0b3IgPT09IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gICAgaWYgKGF0Q29tbW9uQW5jZXN0b3IpIHtcbiAgICAgIHRlbXBSYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wUmFuZ2Uuc2V0U3RhcnQodGVtcFJhbmdlLmVuZENvbnRhaW5lciwgMCk7XG4gICAgfVxuXG4gICAgdmFyIHJlY3RzID0gQXJyYXkuZnJvbSh0ZW1wUmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKSk7XG4gICAgY2xpZW50UmVjdHMucHVzaChyZWN0cyk7XG5cbiAgICBpZiAoYXRDb21tb25BbmNlc3Rvcikge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGNsaWVudFJlY3RzLnJldmVyc2UoKTtcbiAgICAgIHJldHVybiAoX3JlZiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZiwgY2xpZW50UmVjdHMpO1xuICAgIH1cblxuICAgIHRlbXBSYW5nZS5zZXRFbmRCZWZvcmUoYW5jZXN0b3IpO1xuICB9XG5cbiAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRm91bmQgYW4gdW5leHBlY3RlZCBkZXRhY2hlZCBzdWJ0cmVlIHdoZW4gZ2V0dGluZyByYW5nZSBjbGllbnQgcmVjdHMuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufVxuLyogZXNsaW50LWVuYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuXG4vKipcbiAqIExpa2UgcmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKSBidXQgbm9ybWFsaXplcyBmb3IgYnJvd3NlciBidWdzLlxuICovXG5cblxudmFyIGdldFJhbmdlQ2xpZW50UmVjdHMgPSBpc0Nocm9tZSA/IGdldFJhbmdlQ2xpZW50UmVjdHNDaHJvbWUgOiBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20ocmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5nZUNsaWVudFJlY3RzOyJdLCJuYW1lcyI6WyJVc2VyQWdlbnQiLCJyZXF1aXJlIiwiaW52YXJpYW50IiwiaXNDaHJvbWUiLCJpc0Jyb3dzZXIiLCJnZXRSYW5nZUNsaWVudFJlY3RzQ2hyb21lIiwicmFuZ2UiLCJ0ZW1wUmFuZ2UiLCJjbG9uZVJhbmdlIiwiY2xpZW50UmVjdHMiLCJhbmNlc3RvciIsImVuZENvbnRhaW5lciIsInBhcmVudE5vZGUiLCJhdENvbW1vbkFuY2VzdG9yIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJzZXRTdGFydCIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJyZWN0cyIsIkFycmF5IiwiZnJvbSIsImdldENsaWVudFJlY3RzIiwicHVzaCIsIl9yZWYiLCJyZXZlcnNlIiwiY29uY2F0IiwiYXBwbHkiLCJzZXRFbmRCZWZvcmUiLCJwcm9jZXNzIiwiZ2V0UmFuZ2VDbGllbnRSZWN0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getRangesForDraftEntity.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getRangesForDraftEntity.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\n/**\n * Obtain the start and end positions of the range that has the\n * specified entity applied to it.\n *\n * Entity keys are applied only to contiguous stretches of text, so this\n * method searches for the first instance of the entity key and returns\n * the subsequent range.\n */ function getRangesForDraftEntity(block, key) {\n    var ranges = [];\n    block.findEntityRanges(function(c) {\n        return c.getEntity() === key;\n    }, function(start, end) {\n        ranges.push({\n            start: start,\n            end: end\n        });\n    });\n    !!!ranges.length ?  true ? invariant(false, \"Entity key not found in this range.\") : 0 : void 0;\n    return ranges;\n}\nmodule.exports = getRangesForDraftEntity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlc0ZvckRyYWZ0RW50aXR5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsc0VBQW9CO0FBQzVDOzs7Ozs7O0NBT0MsR0FHRCxTQUFTQyx3QkFBd0JDLEtBQUssRUFBRUMsR0FBRztJQUN6QyxJQUFJQyxTQUFTLEVBQUU7SUFDZkYsTUFBTUcsZ0JBQWdCLENBQUMsU0FBVUMsQ0FBQztRQUNoQyxPQUFPQSxFQUFFQyxTQUFTLE9BQU9KO0lBQzNCLEdBQUcsU0FBVUssS0FBSyxFQUFFQyxHQUFHO1FBQ3JCTCxPQUFPTSxJQUFJLENBQUM7WUFDVkYsT0FBT0E7WUFDUEMsS0FBS0E7UUFDUDtJQUNGO0lBQ0EsQ0FBQyxDQUFDLENBQUNMLE9BQU9PLE1BQU0sR0FBR0MsS0FBcUMsR0FBR2IsVUFBVSxPQUFPLHlDQUF5Q0EsQ0FBZ0IsR0FBRyxLQUFLO0lBQzdJLE9BQU9LO0FBQ1Q7QUFFQVMsT0FBT0MsT0FBTyxHQUFHYiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHkuanM/ZTA1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTtcbi8qKlxuICogT2J0YWluIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiB0aGUgcmFuZ2UgdGhhdCBoYXMgdGhlXG4gKiBzcGVjaWZpZWQgZW50aXR5IGFwcGxpZWQgdG8gaXQuXG4gKlxuICogRW50aXR5IGtleXMgYXJlIGFwcGxpZWQgb25seSB0byBjb250aWd1b3VzIHN0cmV0Y2hlcyBvZiB0ZXh0LCBzbyB0aGlzXG4gKiBtZXRob2Qgc2VhcmNoZXMgZm9yIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgZW50aXR5IGtleSBhbmQgcmV0dXJuc1xuICogdGhlIHN1YnNlcXVlbnQgcmFuZ2UuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSYW5nZXNGb3JEcmFmdEVudGl0eShibG9jaywga2V5KSB7XG4gIHZhciByYW5nZXMgPSBbXTtcbiAgYmxvY2suZmluZEVudGl0eVJhbmdlcyhmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLmdldEVudGl0eSgpID09PSBrZXk7XG4gIH0sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgcmFuZ2VzLnB1c2goe1xuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBlbmRcbiAgICB9KTtcbiAgfSk7XG4gICEhIXJhbmdlcy5sZW5ndGggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFbnRpdHkga2V5IG5vdCBmb3VuZCBpbiB0aGlzIHJhbmdlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJhbmdlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5nZXNGb3JEcmFmdEVudGl0eTsiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsImdldFJhbmdlc0ZvckRyYWZ0RW50aXR5IiwiYmxvY2siLCJrZXkiLCJyYW5nZXMiLCJmaW5kRW50aXR5UmFuZ2VzIiwiYyIsImdldEVudGl0eSIsInN0YXJ0IiwiZW5kIiwicHVzaCIsImxlbmd0aCIsInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getRangesForDraftEntity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/getSafeBodyFromHTML.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isOldIE = UserAgent.isBrowser(\"IE <= 9\"); // Provides a dom node that will not execute scripts\n// https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument\n// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM\nfunction getSafeBodyFromHTML(html) {\n    var doc;\n    var root = null; // Provides a safe context\n    if (!isOldIE && document.implementation && document.implementation.createHTMLDocument) {\n        doc = document.implementation.createHTMLDocument(\"foo\");\n        !doc.documentElement ?  true ? invariant(false, \"Missing doc.documentElement\") : 0 : void 0;\n        doc.documentElement.innerHTML = html;\n        root = doc.getElementsByTagName(\"body\")[0];\n    }\n    return root;\n}\nmodule.exports = getSafeBodyFromHTML;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFNhZmVCb2R5RnJvbUhUTUwuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxzRUFBb0I7QUFFNUMsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlFLFVBQVVILFVBQVVJLFNBQVMsQ0FBQyxZQUFZLG9EQUFvRDtBQUNsRyx3RkFBd0Y7QUFDeEYsd0VBQXdFO0FBRXhFLFNBQVNDLG9CQUFvQkMsSUFBSTtJQUMvQixJQUFJQztJQUNKLElBQUlDLE9BQU8sTUFBTSwwQkFBMEI7SUFFM0MsSUFBSSxDQUFDTCxXQUFXTSxTQUFTQyxjQUFjLElBQUlELFNBQVNDLGNBQWMsQ0FBQ0Msa0JBQWtCLEVBQUU7UUFDckZKLE1BQU1FLFNBQVNDLGNBQWMsQ0FBQ0Msa0JBQWtCLENBQUM7UUFDakQsQ0FBQ0osSUFBSUssZUFBZSxHQUFHQyxLQUFxQyxHQUFHWCxVQUFVLE9BQU8saUNBQWlDQSxDQUFnQixHQUFHLEtBQUs7UUFDeklLLElBQUlLLGVBQWUsQ0FBQ0UsU0FBUyxHQUFHUjtRQUNoQ0UsT0FBT0QsSUFBSVEsb0JBQW9CLENBQUMsT0FBTyxDQUFDLEVBQUU7SUFDNUM7SUFFQSxPQUFPUDtBQUNUO0FBRUFRLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFNhZmVCb2R5RnJvbUhUTUwuanM/OGQ3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVXNlckFnZW50ID0gcmVxdWlyZShcImZianMvbGliL1VzZXJBZ2VudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7XG5cbnZhciBpc09sZElFID0gVXNlckFnZW50LmlzQnJvd3NlcignSUUgPD0gOScpOyAvLyBQcm92aWRlcyBhIGRvbSBub2RlIHRoYXQgd2lsbCBub3QgZXhlY3V0ZSBzY3JpcHRzXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NSW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9BZGQtb25zL0NvZGVfc25pcHBldHMvSFRNTF90b19ET01cblxuZnVuY3Rpb24gZ2V0U2FmZUJvZHlGcm9tSFRNTChodG1sKSB7XG4gIHZhciBkb2M7XG4gIHZhciByb290ID0gbnVsbDsgLy8gUHJvdmlkZXMgYSBzYWZlIGNvbnRleHRcblxuICBpZiAoIWlzT2xkSUUgJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KSB7XG4gICAgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCdmb28nKTtcbiAgICAhZG9jLmRvY3VtZW50RWxlbWVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgZG9jLmRvY3VtZW50RWxlbWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBkb2MuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgcm9vdCA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICB9XG5cbiAgcmV0dXJuIHJvb3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U2FmZUJvZHlGcm9tSFRNTDsiXSwibmFtZXMiOlsiVXNlckFnZW50IiwicmVxdWlyZSIsImludmFyaWFudCIsImlzT2xkSUUiLCJpc0Jyb3dzZXIiLCJnZXRTYWZlQm9keUZyb21IVE1MIiwiaHRtbCIsImRvYyIsInJvb3QiLCJkb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwicHJvY2VzcyIsImlubmVySFRNTCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Get offset key from a node or it's child nodes. Return the first offset key\n * found on the DOM tree of given node.\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction getSelectionOffsetKeyForNode(node) {\n    if (isElement(node)) {\n        var castedNode = node;\n        var offsetKey = castedNode.getAttribute(\"data-offset-key\");\n        if (offsetKey) {\n            return offsetKey;\n        }\n        for(var ii = 0; ii < castedNode.childNodes.length; ii++){\n            var childOffsetKey = getSelectionOffsetKeyForNode(castedNode.childNodes[ii]);\n            if (childOffsetKey) {\n                return childOffsetKey;\n            }\n        }\n    }\n    return null;\n}\nmodule.exports = getSelectionOffsetKeyForNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFDQTs7O0NBR0MsR0FFRCxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVyQyxTQUFTQyw2QkFBNkJDLElBQUk7SUFDeEMsSUFBSUgsVUFBVUcsT0FBTztRQUNuQixJQUFJQyxhQUFhRDtRQUNqQixJQUFJRSxZQUFZRCxXQUFXRSxZQUFZLENBQUM7UUFFeEMsSUFBSUQsV0FBVztZQUNiLE9BQU9BO1FBQ1Q7UUFFQSxJQUFLLElBQUlFLEtBQUssR0FBR0EsS0FBS0gsV0FBV0ksVUFBVSxDQUFDQyxNQUFNLEVBQUVGLEtBQU07WUFDeEQsSUFBSUcsaUJBQWlCUiw2QkFBNkJFLFdBQVdJLFVBQVUsQ0FBQ0QsR0FBRztZQUUzRSxJQUFJRyxnQkFBZ0I7Z0JBQ2xCLE9BQU9BO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUuanM/MzViZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBHZXQgb2Zmc2V0IGtleSBmcm9tIGEgbm9kZSBvciBpdCdzIGNoaWxkIG5vZGVzLiBSZXR1cm4gdGhlIGZpcnN0IG9mZnNldCBrZXlcbiAqIGZvdW5kIG9uIHRoZSBET00gdHJlZSBvZiBnaXZlbiBub2RlLlxuICovXG5cbnZhciBpc0VsZW1lbnQgPSByZXF1aXJlKFwiLi9pc0VsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUobm9kZSkge1xuICBpZiAoaXNFbGVtZW50KG5vZGUpKSB7XG4gICAgdmFyIGNhc3RlZE5vZGUgPSBub2RlO1xuICAgIHZhciBvZmZzZXRLZXkgPSBjYXN0ZWROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1vZmZzZXQta2V5Jyk7XG5cbiAgICBpZiAob2Zmc2V0S2V5KSB7XG4gICAgICByZXR1cm4gb2Zmc2V0S2V5O1xuICAgIH1cblxuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBjYXN0ZWROb2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgY2hpbGRPZmZzZXRLZXkgPSBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKGNhc3RlZE5vZGUuY2hpbGROb2Rlc1tpaV0pO1xuXG4gICAgICBpZiAoY2hpbGRPZmZzZXRLZXkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkT2Zmc2V0S2V5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGU7Il0sIm5hbWVzIjpbImlzRWxlbWVudCIsInJlcXVpcmUiLCJnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlIiwibm9kZSIsImNhc3RlZE5vZGUiLCJvZmZzZXRLZXkiLCJnZXRBdHRyaWJ1dGUiLCJpaSIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJjaGlsZE9mZnNldEtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getTextContentFromFiles.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar TEXT_CLIPPING_REGEX = /\\.textClipping$/;\nvar TEXT_TYPES = {\n    \"text/plain\": true,\n    \"text/html\": true,\n    \"text/rtf\": true\n}; // Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\nvar TEXT_SIZE_UPPER_BOUND = 5000;\n/**\n * Extract the text content from a file list.\n */ function getTextContentFromFiles(files, callback) {\n    var readCount = 0;\n    var results = [];\n    files.forEach(function(/*blob*/ file) {\n        readFile(file, function(/*string*/ text) {\n            readCount++;\n            text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\n            if (readCount == files.length) {\n                callback(results.join(\"\\r\"));\n            }\n        });\n    });\n}\n/**\n * todo isaac: Do work to turn html/rtf into a content fragment.\n */ function readFile(file, callback) {\n    if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {\n        callback(\"\");\n        return;\n    }\n    if (file.type === \"\") {\n        var _contents = \"\"; // Special-case text clippings, which have an empty type but include\n        // `.textClipping` in the file name. `readAsText` results in an empty\n        // string for text clippings, so we force the file name to serve\n        // as the text value for the file.\n        if (TEXT_CLIPPING_REGEX.test(file.name)) {\n            _contents = file.name.replace(TEXT_CLIPPING_REGEX, \"\");\n        }\n        callback(_contents);\n        return;\n    }\n    var reader = new FileReader();\n    reader.onload = function() {\n        var result = reader.result;\n        !(typeof result === \"string\") ?  true ? invariant(false, 'We should be calling \"FileReader.readAsText\" which returns a string') : 0 : void 0;\n        callback(result);\n    };\n    reader.onerror = function() {\n        callback(\"\");\n    };\n    reader.readAsText(file);\n}\nmodule.exports = getTextContentFromFiles;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFRleHRDb250ZW50RnJvbUZpbGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlDLHNCQUFzQjtBQUMxQixJQUFJQyxhQUFhO0lBQ2YsY0FBYztJQUNkLGFBQWE7SUFDYixZQUFZO0FBQ2QsR0FBRyw4RUFBOEU7QUFFakYsSUFBSUMsd0JBQXdCO0FBQzVCOztDQUVDLEdBRUQsU0FBU0Msd0JBQXdCQyxLQUFLLEVBQUVDLFFBQVE7SUFDOUMsSUFBSUMsWUFBWTtJQUNoQixJQUFJQyxVQUFVLEVBQUU7SUFDaEJILE1BQU1JLE9BQU8sQ0FBQyxTQUNkLE1BQU0sR0FDTkMsSUFBSTtRQUNGQyxTQUFTRCxNQUFNLFNBQ2YsUUFBUSxHQUNSRSxJQUFJO1lBQ0ZMO1lBQ0FLLFFBQVFKLFFBQVFLLElBQUksQ0FBQ0QsS0FBS0UsS0FBSyxDQUFDLEdBQUdYO1lBRW5DLElBQUlJLGFBQWFGLE1BQU1VLE1BQU0sRUFBRTtnQkFDN0JULFNBQVNFLFFBQVFRLElBQUksQ0FBQztZQUN4QjtRQUNGO0lBQ0Y7QUFDRjtBQUNBOztDQUVDLEdBR0QsU0FBU0wsU0FBU0QsSUFBSSxFQUFFSixRQUFRO0lBQzlCLElBQUksQ0FBQ1csT0FBT0MsVUFBVSxJQUFJUixLQUFLUyxJQUFJLElBQUksQ0FBRVQsQ0FBQUEsS0FBS1MsSUFBSSxJQUFJakIsVUFBUyxHQUFJO1FBQ2pFSSxTQUFTO1FBQ1Q7SUFDRjtJQUVBLElBQUlJLEtBQUtTLElBQUksS0FBSyxJQUFJO1FBQ3BCLElBQUlDLFlBQVksSUFBSSxvRUFBb0U7UUFDeEYscUVBQXFFO1FBQ3JFLGdFQUFnRTtRQUNoRSxrQ0FBa0M7UUFFbEMsSUFBSW5CLG9CQUFvQm9CLElBQUksQ0FBQ1gsS0FBS1ksSUFBSSxHQUFHO1lBQ3ZDRixZQUFZVixLQUFLWSxJQUFJLENBQUNDLE9BQU8sQ0FBQ3RCLHFCQUFxQjtRQUNyRDtRQUVBSyxTQUFTYztRQUNUO0lBQ0Y7SUFFQSxJQUFJSSxTQUFTLElBQUlOO0lBRWpCTSxPQUFPQyxNQUFNLEdBQUc7UUFDZCxJQUFJQyxTQUFTRixPQUFPRSxNQUFNO1FBQzFCLENBQUUsUUFBT0EsV0FBVyxRQUFPLElBQUtDLEtBQXFDLEdBQUc1QixVQUFVLE9BQU8seUVBQXlFQSxDQUFnQixHQUFHLEtBQUs7UUFDMUxPLFNBQVNvQjtJQUNYO0lBRUFGLE9BQU9JLE9BQU8sR0FBRztRQUNmdEIsU0FBUztJQUNYO0lBRUFrQixPQUFPSyxVQUFVLENBQUNuQjtBQUNwQjtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFRleHRDb250ZW50RnJvbUZpbGVzLmpzP2Y5ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7XG5cbnZhciBURVhUX0NMSVBQSU5HX1JFR0VYID0gL1xcLnRleHRDbGlwcGluZyQvO1xudmFyIFRFWFRfVFlQRVMgPSB7XG4gICd0ZXh0L3BsYWluJzogdHJ1ZSxcbiAgJ3RleHQvaHRtbCc6IHRydWUsXG4gICd0ZXh0L3J0Zic6IHRydWVcbn07IC8vIFNvbWV3aGF0IGFyYml0cmFyeSB1cHBlciBib3VuZCBvbiB0ZXh0IHNpemUuIExldCdzIG5vdCBsb2NrIHVwIHRoZSBicm93c2VyLlxuXG52YXIgVEVYVF9TSVpFX1VQUEVSX0JPVU5EID0gNTAwMDtcbi8qKlxuICogRXh0cmFjdCB0aGUgdGV4dCBjb250ZW50IGZyb20gYSBmaWxlIGxpc3QuXG4gKi9cblxuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMoZmlsZXMsIGNhbGxiYWNrKSB7XG4gIHZhciByZWFkQ291bnQgPSAwO1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChcbiAgLypibG9iKi9cbiAgZmlsZSkge1xuICAgIHJlYWRGaWxlKGZpbGUsIGZ1bmN0aW9uIChcbiAgICAvKnN0cmluZyovXG4gICAgdGV4dCkge1xuICAgICAgcmVhZENvdW50Kys7XG4gICAgICB0ZXh0ICYmIHJlc3VsdHMucHVzaCh0ZXh0LnNsaWNlKDAsIFRFWFRfU0laRV9VUFBFUl9CT1VORCkpO1xuXG4gICAgICBpZiAocmVhZENvdW50ID09IGZpbGVzLmxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJ1xccicpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG4vKipcbiAqIHRvZG8gaXNhYWM6IERvIHdvcmsgdG8gdHVybiBodG1sL3J0ZiBpbnRvIGEgY29udGVudCBmcmFnbWVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWRGaWxlKGZpbGUsIGNhbGxiYWNrKSB7XG4gIGlmICghZ2xvYmFsLkZpbGVSZWFkZXIgfHwgZmlsZS50eXBlICYmICEoZmlsZS50eXBlIGluIFRFWFRfVFlQRVMpKSB7XG4gICAgY2FsbGJhY2soJycpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChmaWxlLnR5cGUgPT09ICcnKSB7XG4gICAgdmFyIF9jb250ZW50cyA9ICcnOyAvLyBTcGVjaWFsLWNhc2UgdGV4dCBjbGlwcGluZ3MsIHdoaWNoIGhhdmUgYW4gZW1wdHkgdHlwZSBidXQgaW5jbHVkZVxuICAgIC8vIGAudGV4dENsaXBwaW5nYCBpbiB0aGUgZmlsZSBuYW1lLiBgcmVhZEFzVGV4dGAgcmVzdWx0cyBpbiBhbiBlbXB0eVxuICAgIC8vIHN0cmluZyBmb3IgdGV4dCBjbGlwcGluZ3MsIHNvIHdlIGZvcmNlIHRoZSBmaWxlIG5hbWUgdG8gc2VydmVcbiAgICAvLyBhcyB0aGUgdGV4dCB2YWx1ZSBmb3IgdGhlIGZpbGUuXG5cbiAgICBpZiAoVEVYVF9DTElQUElOR19SRUdFWC50ZXN0KGZpbGUubmFtZSkpIHtcbiAgICAgIF9jb250ZW50cyA9IGZpbGUubmFtZS5yZXBsYWNlKFRFWFRfQ0xJUFBJTkdfUkVHRVgsICcnKTtcbiAgICB9XG5cbiAgICBjYWxsYmFjayhfY29udGVudHMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlYWRlci5yZXN1bHQ7XG4gICAgISh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdXZSBzaG91bGQgYmUgY2FsbGluZyBcIkZpbGVSZWFkZXIucmVhZEFzVGV4dFwiIHdoaWNoIHJldHVybnMgYSBzdHJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgY2FsbGJhY2socmVzdWx0KTtcbiAgfTtcblxuICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjaygnJyk7XG4gIH07XG5cbiAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXM7Il0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJURVhUX0NMSVBQSU5HX1JFR0VYIiwiVEVYVF9UWVBFUyIsIlRFWFRfU0laRV9VUFBFUl9CT1VORCIsImdldFRleHRDb250ZW50RnJvbUZpbGVzIiwiZmlsZXMiLCJjYWxsYmFjayIsInJlYWRDb3VudCIsInJlc3VsdHMiLCJmb3JFYWNoIiwiZmlsZSIsInJlYWRGaWxlIiwidGV4dCIsInB1c2giLCJzbGljZSIsImxlbmd0aCIsImpvaW4iLCJnbG9iYWwiLCJGaWxlUmVhZGVyIiwidHlwZSIsIl9jb250ZW50cyIsInRlc3QiLCJuYW1lIiwicmVwbGFjZSIsInJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsInByb2Nlc3MiLCJvbmVycm9yIiwicmVhZEFzVGV4dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getUpdatedSelectionState.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nfunction getUpdatedSelectionState(editorState, anchorKey, anchorOffset, focusKey, focusOffset) {\n    var selection = nullthrows(editorState.getSelection());\n    if (!anchorKey || !focusKey) {\n        // If we cannot make sense of the updated selection state, stick to the current one.\n        if (true) {\n            /* eslint-disable-next-line */ console.warn(\"Invalid selection state.\", arguments, editorState.toJS());\n        }\n        return selection;\n    }\n    var anchorPath = DraftOffsetKey.decode(anchorKey);\n    var anchorBlockKey = anchorPath.blockKey;\n    var anchorLeafBlockTree = editorState.getBlockTree(anchorBlockKey);\n    var anchorLeaf = anchorLeafBlockTree && anchorLeafBlockTree.getIn([\n        anchorPath.decoratorKey,\n        \"leaves\",\n        anchorPath.leafKey\n    ]);\n    var focusPath = DraftOffsetKey.decode(focusKey);\n    var focusBlockKey = focusPath.blockKey;\n    var focusLeafBlockTree = editorState.getBlockTree(focusBlockKey);\n    var focusLeaf = focusLeafBlockTree && focusLeafBlockTree.getIn([\n        focusPath.decoratorKey,\n        \"leaves\",\n        focusPath.leafKey\n    ]);\n    if (!anchorLeaf || !focusLeaf) {\n        // If we cannot make sense of the updated selection state, stick to the current one.\n        if (true) {\n            /* eslint-disable-next-line */ console.warn(\"Invalid selection state.\", arguments, editorState.toJS());\n        }\n        return selection;\n    }\n    var anchorLeafStart = anchorLeaf.get(\"start\");\n    var focusLeafStart = focusLeaf.get(\"start\");\n    var anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;\n    var focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;\n    var areEqual = selection.getAnchorKey() === anchorBlockKey && selection.getAnchorOffset() === anchorBlockOffset && selection.getFocusKey() === focusBlockKey && selection.getFocusOffset() === focusBlockOffset;\n    if (areEqual) {\n        return selection;\n    }\n    var isBackward = false;\n    if (anchorBlockKey === focusBlockKey) {\n        var anchorLeafEnd = anchorLeaf.get(\"end\");\n        var focusLeafEnd = focusLeaf.get(\"end\");\n        if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd) {\n            isBackward = focusOffset < anchorOffset;\n        } else {\n            isBackward = focusLeafStart < anchorLeafStart;\n        }\n    } else {\n        var startKey = editorState.getCurrentContent().getBlockMap().keySeq().skipUntil(function(v) {\n            return v === anchorBlockKey || v === focusBlockKey;\n        }).first();\n        isBackward = startKey === focusBlockKey;\n    }\n    return selection.merge({\n        anchorKey: anchorBlockKey,\n        anchorOffset: anchorBlockOffset,\n        focusKey: focusBlockKey,\n        focusOffset: focusBlockOffset,\n        isBackward: isBackward\n    });\n}\nmodule.exports = getUpdatedSelectionState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGlCQUFpQkMsbUJBQU9BLENBQUMsNkVBQWtCO0FBRS9DLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDLHdFQUFxQjtBQUU5QyxTQUFTRSx5QkFBeUJDLFdBQVcsRUFBRUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLFFBQVEsRUFBRUMsV0FBVztJQUMzRixJQUFJQyxZQUFZUCxXQUFXRSxZQUFZTSxZQUFZO0lBRW5ELElBQUksQ0FBQ0wsYUFBYSxDQUFDRSxVQUFVO1FBQzNCLG9GQUFvRjtRQUNwRixJQUFJSSxJQUFxQyxFQUFFO1lBQ3pDLDRCQUE0QixHQUM1QkMsUUFBUUMsSUFBSSxDQUFDLDRCQUE0QkMsV0FBV1YsWUFBWVcsSUFBSTtRQUN0RTtRQUVBLE9BQU9OO0lBQ1Q7SUFFQSxJQUFJTyxhQUFhaEIsZUFBZWlCLE1BQU0sQ0FBQ1o7SUFDdkMsSUFBSWEsaUJBQWlCRixXQUFXRyxRQUFRO0lBQ3hDLElBQUlDLHNCQUFzQmhCLFlBQVlpQixZQUFZLENBQUNIO0lBQ25ELElBQUlJLGFBQWFGLHVCQUF1QkEsb0JBQW9CRyxLQUFLLENBQUM7UUFBQ1AsV0FBV1EsWUFBWTtRQUFFO1FBQVVSLFdBQVdTLE9BQU87S0FBQztJQUN6SCxJQUFJQyxZQUFZMUIsZUFBZWlCLE1BQU0sQ0FBQ1Y7SUFDdEMsSUFBSW9CLGdCQUFnQkQsVUFBVVAsUUFBUTtJQUN0QyxJQUFJUyxxQkFBcUJ4QixZQUFZaUIsWUFBWSxDQUFDTTtJQUNsRCxJQUFJRSxZQUFZRCxzQkFBc0JBLG1CQUFtQkwsS0FBSyxDQUFDO1FBQUNHLFVBQVVGLFlBQVk7UUFBRTtRQUFVRSxVQUFVRCxPQUFPO0tBQUM7SUFFcEgsSUFBSSxDQUFDSCxjQUFjLENBQUNPLFdBQVc7UUFDN0Isb0ZBQW9GO1FBQ3BGLElBQUlsQixJQUFxQyxFQUFFO1lBQ3pDLDRCQUE0QixHQUM1QkMsUUFBUUMsSUFBSSxDQUFDLDRCQUE0QkMsV0FBV1YsWUFBWVcsSUFBSTtRQUN0RTtRQUVBLE9BQU9OO0lBQ1Q7SUFFQSxJQUFJcUIsa0JBQWtCUixXQUFXUyxHQUFHLENBQUM7SUFDckMsSUFBSUMsaUJBQWlCSCxVQUFVRSxHQUFHLENBQUM7SUFDbkMsSUFBSUUsb0JBQW9CWCxhQUFhUSxrQkFBa0J4QixlQUFlO0lBQ3RFLElBQUk0QixtQkFBbUJMLFlBQVlHLGlCQUFpQnhCLGNBQWM7SUFDbEUsSUFBSTJCLFdBQVcxQixVQUFVMkIsWUFBWSxPQUFPbEIsa0JBQWtCVCxVQUFVNEIsZUFBZSxPQUFPSixxQkFBcUJ4QixVQUFVNkIsV0FBVyxPQUFPWCxpQkFBaUJsQixVQUFVOEIsY0FBYyxPQUFPTDtJQUUvTCxJQUFJQyxVQUFVO1FBQ1osT0FBTzFCO0lBQ1Q7SUFFQSxJQUFJK0IsYUFBYTtJQUVqQixJQUFJdEIsbUJBQW1CUyxlQUFlO1FBQ3BDLElBQUljLGdCQUFnQm5CLFdBQVdTLEdBQUcsQ0FBQztRQUNuQyxJQUFJVyxlQUFlYixVQUFVRSxHQUFHLENBQUM7UUFFakMsSUFBSUMsbUJBQW1CRixtQkFBbUJZLGlCQUFpQkQsZUFBZTtZQUN4RUQsYUFBYWhDLGNBQWNGO1FBQzdCLE9BQU87WUFDTGtDLGFBQWFSLGlCQUFpQkY7UUFDaEM7SUFDRixPQUFPO1FBQ0wsSUFBSWEsV0FBV3ZDLFlBQVl3QyxpQkFBaUIsR0FBR0MsV0FBVyxHQUFHQyxNQUFNLEdBQUdDLFNBQVMsQ0FBQyxTQUFVQyxDQUFDO1lBQ3pGLE9BQU9BLE1BQU05QixrQkFBa0I4QixNQUFNckI7UUFDdkMsR0FBR3NCLEtBQUs7UUFDUlQsYUFBYUcsYUFBYWhCO0lBQzVCO0lBRUEsT0FBT2xCLFVBQVV5QyxLQUFLLENBQUM7UUFDckI3QyxXQUFXYTtRQUNYWixjQUFjMkI7UUFDZDFCLFVBQVVvQjtRQUNWbkIsYUFBYTBCO1FBQ2JNLFlBQVlBO0lBQ2Q7QUFDRjtBQUVBVyxPQUFPQyxPQUFPLEdBQUdqRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlLmpzP2EwZjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0T2Zmc2V0S2V5ID0gcmVxdWlyZShcIi4vRHJhZnRPZmZzZXRLZXlcIik7XG5cbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZShcImZianMvbGliL251bGx0aHJvd3NcIik7XG5cbmZ1bmN0aW9uIGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZShlZGl0b3JTdGF0ZSwgYW5jaG9yS2V5LCBhbmNob3JPZmZzZXQsIGZvY3VzS2V5LCBmb2N1c09mZnNldCkge1xuICB2YXIgc2VsZWN0aW9uID0gbnVsbHRocm93cyhlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSk7XG5cbiAgaWYgKCFhbmNob3JLZXkgfHwgIWZvY3VzS2V5KSB7XG4gICAgLy8gSWYgd2UgY2Fubm90IG1ha2Ugc2Vuc2Ugb2YgdGhlIHVwZGF0ZWQgc2VsZWN0aW9uIHN0YXRlLCBzdGljayB0byB0aGUgY3VycmVudCBvbmUuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG4gICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgc2VsZWN0aW9uIHN0YXRlLicsIGFyZ3VtZW50cywgZWRpdG9yU3RhdGUudG9KUygpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9XG5cbiAgdmFyIGFuY2hvclBhdGggPSBEcmFmdE9mZnNldEtleS5kZWNvZGUoYW5jaG9yS2V5KTtcbiAgdmFyIGFuY2hvckJsb2NrS2V5ID0gYW5jaG9yUGF0aC5ibG9ja0tleTtcbiAgdmFyIGFuY2hvckxlYWZCbG9ja1RyZWUgPSBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoYW5jaG9yQmxvY2tLZXkpO1xuICB2YXIgYW5jaG9yTGVhZiA9IGFuY2hvckxlYWZCbG9ja1RyZWUgJiYgYW5jaG9yTGVhZkJsb2NrVHJlZS5nZXRJbihbYW5jaG9yUGF0aC5kZWNvcmF0b3JLZXksICdsZWF2ZXMnLCBhbmNob3JQYXRoLmxlYWZLZXldKTtcbiAgdmFyIGZvY3VzUGF0aCA9IERyYWZ0T2Zmc2V0S2V5LmRlY29kZShmb2N1c0tleSk7XG4gIHZhciBmb2N1c0Jsb2NrS2V5ID0gZm9jdXNQYXRoLmJsb2NrS2V5O1xuICB2YXIgZm9jdXNMZWFmQmxvY2tUcmVlID0gZWRpdG9yU3RhdGUuZ2V0QmxvY2tUcmVlKGZvY3VzQmxvY2tLZXkpO1xuICB2YXIgZm9jdXNMZWFmID0gZm9jdXNMZWFmQmxvY2tUcmVlICYmIGZvY3VzTGVhZkJsb2NrVHJlZS5nZXRJbihbZm9jdXNQYXRoLmRlY29yYXRvcktleSwgJ2xlYXZlcycsIGZvY3VzUGF0aC5sZWFmS2V5XSk7XG5cbiAgaWYgKCFhbmNob3JMZWFmIHx8ICFmb2N1c0xlYWYpIHtcbiAgICAvLyBJZiB3ZSBjYW5ub3QgbWFrZSBzZW5zZSBvZiB0aGUgdXBkYXRlZCBzZWxlY3Rpb24gc3RhdGUsIHN0aWNrIHRvIHRoZSBjdXJyZW50IG9uZS5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBzZWxlY3Rpb24gc3RhdGUuJywgYXJndW1lbnRzLCBlZGl0b3JTdGF0ZS50b0pTKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3Rpb247XG4gIH1cblxuICB2YXIgYW5jaG9yTGVhZlN0YXJ0ID0gYW5jaG9yTGVhZi5nZXQoJ3N0YXJ0Jyk7XG4gIHZhciBmb2N1c0xlYWZTdGFydCA9IGZvY3VzTGVhZi5nZXQoJ3N0YXJ0Jyk7XG4gIHZhciBhbmNob3JCbG9ja09mZnNldCA9IGFuY2hvckxlYWYgPyBhbmNob3JMZWFmU3RhcnQgKyBhbmNob3JPZmZzZXQgOiBudWxsO1xuICB2YXIgZm9jdXNCbG9ja09mZnNldCA9IGZvY3VzTGVhZiA/IGZvY3VzTGVhZlN0YXJ0ICsgZm9jdXNPZmZzZXQgOiBudWxsO1xuICB2YXIgYXJlRXF1YWwgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCkgPT09IGFuY2hvckJsb2NrS2V5ICYmIHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKSA9PT0gYW5jaG9yQmxvY2tPZmZzZXQgJiYgc2VsZWN0aW9uLmdldEZvY3VzS2V5KCkgPT09IGZvY3VzQmxvY2tLZXkgJiYgc2VsZWN0aW9uLmdldEZvY3VzT2Zmc2V0KCkgPT09IGZvY3VzQmxvY2tPZmZzZXQ7XG5cbiAgaWYgKGFyZUVxdWFsKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfVxuXG4gIHZhciBpc0JhY2t3YXJkID0gZmFsc2U7XG5cbiAgaWYgKGFuY2hvckJsb2NrS2V5ID09PSBmb2N1c0Jsb2NrS2V5KSB7XG4gICAgdmFyIGFuY2hvckxlYWZFbmQgPSBhbmNob3JMZWFmLmdldCgnZW5kJyk7XG4gICAgdmFyIGZvY3VzTGVhZkVuZCA9IGZvY3VzTGVhZi5nZXQoJ2VuZCcpO1xuXG4gICAgaWYgKGZvY3VzTGVhZlN0YXJ0ID09PSBhbmNob3JMZWFmU3RhcnQgJiYgZm9jdXNMZWFmRW5kID09PSBhbmNob3JMZWFmRW5kKSB7XG4gICAgICBpc0JhY2t3YXJkID0gZm9jdXNPZmZzZXQgPCBhbmNob3JPZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzQmFja3dhcmQgPSBmb2N1c0xlYWZTdGFydCA8IGFuY2hvckxlYWZTdGFydDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHN0YXJ0S2V5ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKS5nZXRCbG9ja01hcCgpLmtleVNlcSgpLnNraXBVbnRpbChmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHYgPT09IGFuY2hvckJsb2NrS2V5IHx8IHYgPT09IGZvY3VzQmxvY2tLZXk7XG4gICAgfSkuZmlyc3QoKTtcbiAgICBpc0JhY2t3YXJkID0gc3RhcnRLZXkgPT09IGZvY3VzQmxvY2tLZXk7XG4gIH1cblxuICByZXR1cm4gc2VsZWN0aW9uLm1lcmdlKHtcbiAgICBhbmNob3JLZXk6IGFuY2hvckJsb2NrS2V5LFxuICAgIGFuY2hvck9mZnNldDogYW5jaG9yQmxvY2tPZmZzZXQsXG4gICAgZm9jdXNLZXk6IGZvY3VzQmxvY2tLZXksXG4gICAgZm9jdXNPZmZzZXQ6IGZvY3VzQmxvY2tPZmZzZXQsXG4gICAgaXNCYWNrd2FyZDogaXNCYWNrd2FyZFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRVcGRhdGVkU2VsZWN0aW9uU3RhdGU7Il0sIm5hbWVzIjpbIkRyYWZ0T2Zmc2V0S2V5IiwicmVxdWlyZSIsIm51bGx0aHJvd3MiLCJnZXRVcGRhdGVkU2VsZWN0aW9uU3RhdGUiLCJlZGl0b3JTdGF0ZSIsImFuY2hvcktleSIsImFuY2hvck9mZnNldCIsImZvY3VzS2V5IiwiZm9jdXNPZmZzZXQiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJwcm9jZXNzIiwiY29uc29sZSIsIndhcm4iLCJhcmd1bWVudHMiLCJ0b0pTIiwiYW5jaG9yUGF0aCIsImRlY29kZSIsImFuY2hvckJsb2NrS2V5IiwiYmxvY2tLZXkiLCJhbmNob3JMZWFmQmxvY2tUcmVlIiwiZ2V0QmxvY2tUcmVlIiwiYW5jaG9yTGVhZiIsImdldEluIiwiZGVjb3JhdG9yS2V5IiwibGVhZktleSIsImZvY3VzUGF0aCIsImZvY3VzQmxvY2tLZXkiLCJmb2N1c0xlYWZCbG9ja1RyZWUiLCJmb2N1c0xlYWYiLCJhbmNob3JMZWFmU3RhcnQiLCJnZXQiLCJmb2N1c0xlYWZTdGFydCIsImFuY2hvckJsb2NrT2Zmc2V0IiwiZm9jdXNCbG9ja09mZnNldCIsImFyZUVxdWFsIiwiZ2V0QW5jaG9yS2V5IiwiZ2V0QW5jaG9yT2Zmc2V0IiwiZ2V0Rm9jdXNLZXkiLCJnZXRGb2N1c09mZnNldCIsImlzQmFja3dhcmQiLCJhbmNob3JMZWFmRW5kIiwiZm9jdXNMZWFmRW5kIiwic3RhcnRLZXkiLCJnZXRDdXJyZW50Q29udGVudCIsImdldEJsb2NrTWFwIiwia2V5U2VxIiwic2tpcFVudGlsIiwidiIsImZpcnN0IiwibWVyZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getVisibleSelectionRect.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getVisibleSelectionRect.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getRangeBoundingClientRect = __webpack_require__(/*! ./getRangeBoundingClientRect */ \"(ssr)/./node_modules/draft-js/lib/getRangeBoundingClientRect.js\");\n/**\n * Return the bounding ClientRect for the visible DOM selection, if any.\n * In cases where there are no selected ranges or the bounding rect is\n * temporarily invalid, return null.\n *\n * When using from an iframe, you should pass the iframe window object\n */ function getVisibleSelectionRect(global) {\n    var selection = global.getSelection();\n    if (!selection.rangeCount) {\n        return null;\n    }\n    var range = selection.getRangeAt(0);\n    var boundingRect = getRangeBoundingClientRect(range);\n    var top = boundingRect.top, right = boundingRect.right, bottom = boundingRect.bottom, left = boundingRect.left; // When a re-render leads to a node being removed, the DOM selection will\n    // temporarily be placed on an ancestor node, which leads to an invalid\n    // bounding rect. Discard this state.\n    if (top === 0 && right === 0 && bottom === 0 && left === 0) {\n        return null;\n    }\n    return boundingRect;\n}\nmodule.exports = getVisibleSelectionRect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFZpc2libGVTZWxlY3Rpb25SZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsNkJBQTZCQyxtQkFBT0EsQ0FBQyxxR0FBOEI7QUFDdkU7Ozs7OztDQU1DLEdBR0QsU0FBU0Msd0JBQXdCQyxNQUFNO0lBQ3JDLElBQUlDLFlBQVlELE9BQU9FLFlBQVk7SUFFbkMsSUFBSSxDQUFDRCxVQUFVRSxVQUFVLEVBQUU7UUFDekIsT0FBTztJQUNUO0lBRUEsSUFBSUMsUUFBUUgsVUFBVUksVUFBVSxDQUFDO0lBQ2pDLElBQUlDLGVBQWVULDJCQUEyQk87SUFDOUMsSUFBSUcsTUFBTUQsYUFBYUMsR0FBRyxFQUN0QkMsUUFBUUYsYUFBYUUsS0FBSyxFQUMxQkMsU0FBU0gsYUFBYUcsTUFBTSxFQUM1QkMsT0FBT0osYUFBYUksSUFBSSxFQUFFLHlFQUF5RTtJQUN2Ryx1RUFBdUU7SUFDdkUscUNBQXFDO0lBRXJDLElBQUlILFFBQVEsS0FBS0MsVUFBVSxLQUFLQyxXQUFXLEtBQUtDLFNBQVMsR0FBRztRQUMxRCxPQUFPO0lBQ1Q7SUFFQSxPQUFPSjtBQUNUO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFZpc2libGVTZWxlY3Rpb25SZWN0LmpzPzMxMmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0ID0gcmVxdWlyZShcIi4vZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3RcIik7XG4vKipcbiAqIFJldHVybiB0aGUgYm91bmRpbmcgQ2xpZW50UmVjdCBmb3IgdGhlIHZpc2libGUgRE9NIHNlbGVjdGlvbiwgaWYgYW55LlxuICogSW4gY2FzZXMgd2hlcmUgdGhlcmUgYXJlIG5vIHNlbGVjdGVkIHJhbmdlcyBvciB0aGUgYm91bmRpbmcgcmVjdCBpc1xuICogdGVtcG9yYXJpbHkgaW52YWxpZCwgcmV0dXJuIG51bGwuXG4gKlxuICogV2hlbiB1c2luZyBmcm9tIGFuIGlmcmFtZSwgeW91IHNob3VsZCBwYXNzIHRoZSBpZnJhbWUgd2luZG93IG9iamVjdFxuICovXG5cblxuZnVuY3Rpb24gZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3QoZ2xvYmFsKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBnbG9iYWwuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdChyYW5nZSk7XG4gIHZhciB0b3AgPSBib3VuZGluZ1JlY3QudG9wLFxuICAgICAgcmlnaHQgPSBib3VuZGluZ1JlY3QucmlnaHQsXG4gICAgICBib3R0b20gPSBib3VuZGluZ1JlY3QuYm90dG9tLFxuICAgICAgbGVmdCA9IGJvdW5kaW5nUmVjdC5sZWZ0OyAvLyBXaGVuIGEgcmUtcmVuZGVyIGxlYWRzIHRvIGEgbm9kZSBiZWluZyByZW1vdmVkLCB0aGUgRE9NIHNlbGVjdGlvbiB3aWxsXG4gIC8vIHRlbXBvcmFyaWx5IGJlIHBsYWNlZCBvbiBhbiBhbmNlc3RvciBub2RlLCB3aGljaCBsZWFkcyB0byBhbiBpbnZhbGlkXG4gIC8vIGJvdW5kaW5nIHJlY3QuIERpc2NhcmQgdGhpcyBzdGF0ZS5cblxuICBpZiAodG9wID09PSAwICYmIHJpZ2h0ID09PSAwICYmIGJvdHRvbSA9PT0gMCAmJiBsZWZ0ID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gYm91bmRpbmdSZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZpc2libGVTZWxlY3Rpb25SZWN0OyJdLCJuYW1lcyI6WyJnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdCIsInJlcXVpcmUiLCJnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdCIsImdsb2JhbCIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJyYW5nZSIsImdldFJhbmdlQXQiLCJib3VuZGluZ1JlY3QiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getVisibleSelectionRect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getWindowForNode.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/getWindowForNode.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function getWindowForNode(node) {\n    if (!node || !node.ownerDocument || !node.ownerDocument.defaultView) {\n        return window;\n    }\n    return node.ownerDocument.defaultView;\n}\nmodule.exports = getWindowForNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFdpbmRvd0Zvck5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxpQkFBaUJDLElBQUk7SUFDNUIsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLGFBQWEsSUFBSSxDQUFDRCxLQUFLQyxhQUFhLENBQUNDLFdBQVcsRUFBRTtRQUNuRSxPQUFPQztJQUNUO0lBRUEsT0FBT0gsS0FBS0MsYUFBYSxDQUFDQyxXQUFXO0FBQ3ZDO0FBRUFFLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFdpbmRvd0Zvck5vZGUuanM/NmZlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvd0Zvck5vZGUobm9kZSkge1xuICBpZiAoIW5vZGUgfHwgIW5vZGUub3duZXJEb2N1bWVudCB8fCAhbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0V2luZG93Rm9yTm9kZTsiXSwibmFtZXMiOlsiZ2V0V2luZG93Rm9yTm9kZSIsIm5vZGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getWindowForNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/gkx.js":
/*!******************************************!*\
  !*** ./node_modules/draft-js/lib/gkx.js ***!
  \******************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */ \nmodule.exports = function(name) {\n    if (false) {}\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dreC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Q0FRQyxHQUNEO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxJQUFJO0lBQzdCLElBQUksS0FBbUQsRUFBRSxFQUV4RDtJQUVELE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2t4LmpzPzA1NGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19EUkFGVF9HS1gpIHtcbiAgICByZXR1cm4gISF3aW5kb3cuX19EUkFGVF9HS1hbbmFtZV07XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsIndpbmRvdyIsIl9fRFJBRlRfR0tYIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/gkx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/insertFragmentIntoContentState.js":
/*!*********************************************************************!*\
  !*** ./node_modules/draft-js/lib/insertFragmentIntoContentState.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar insertIntoList = __webpack_require__(/*! ./insertIntoList */ \"(ssr)/./node_modules/draft-js/lib/insertIntoList.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar randomizeBlockMapKeys = __webpack_require__(/*! ./randomizeBlockMapKeys */ \"(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js\");\nvar List = Immutable.List;\nvar updateExistingBlock = function updateExistingBlock(contentState, selectionState, blockMap, fragmentBlock, targetKey, targetOffset) {\n    var mergeBlockData = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : \"REPLACE_WITH_NEW_DATA\";\n    var targetBlock = blockMap.get(targetKey);\n    var text = targetBlock.getText();\n    var chars = targetBlock.getCharacterList();\n    var finalKey = targetKey;\n    var finalOffset = targetOffset + fragmentBlock.getText().length;\n    var data = null;\n    switch(mergeBlockData){\n        case \"MERGE_OLD_DATA_TO_NEW_DATA\":\n            data = fragmentBlock.getData().merge(targetBlock.getData());\n            break;\n        case \"REPLACE_WITH_NEW_DATA\":\n            data = fragmentBlock.getData();\n            break;\n    }\n    var type = targetBlock.getType();\n    if (text && type === \"unstyled\") {\n        type = fragmentBlock.getType();\n    }\n    var newBlock = targetBlock.merge({\n        text: text.slice(0, targetOffset) + fragmentBlock.getText() + text.slice(targetOffset),\n        characterList: insertIntoList(chars, fragmentBlock.getCharacterList(), targetOffset),\n        type: type,\n        data: data\n    });\n    return contentState.merge({\n        blockMap: blockMap.set(targetKey, newBlock),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: finalKey,\n            anchorOffset: finalOffset,\n            focusKey: finalKey,\n            focusOffset: finalOffset,\n            isBackward: false\n        })\n    });\n};\n/**\n * Appends text/characterList from the fragment first block to\n * target block.\n */ var updateHead = function updateHead(block, targetOffset, fragment) {\n    var text = block.getText();\n    var chars = block.getCharacterList(); // Modify head portion of block.\n    var headText = text.slice(0, targetOffset);\n    var headCharacters = chars.slice(0, targetOffset);\n    var appendToHead = fragment.first();\n    return block.merge({\n        text: headText + appendToHead.getText(),\n        characterList: headCharacters.concat(appendToHead.getCharacterList()),\n        type: headText ? block.getType() : appendToHead.getType(),\n        data: appendToHead.getData()\n    });\n};\n/**\n * Appends offset text/characterList from the target block to the last\n * fragment block.\n */ var updateTail = function updateTail(block, targetOffset, fragment) {\n    // Modify tail portion of block.\n    var text = block.getText();\n    var chars = block.getCharacterList(); // Modify head portion of block.\n    var blockSize = text.length;\n    var tailText = text.slice(targetOffset, blockSize);\n    var tailCharacters = chars.slice(targetOffset, blockSize);\n    var prependToTail = fragment.last();\n    return prependToTail.merge({\n        text: prependToTail.getText() + tailText,\n        characterList: prependToTail.getCharacterList().concat(tailCharacters),\n        data: prependToTail.getData()\n    });\n};\nvar getRootBlocks = function getRootBlocks(block, blockMap) {\n    var headKey = block.getKey();\n    var rootBlock = block;\n    var rootBlocks = []; // sometimes the fragment head block will not be part of the blockMap itself this can happen when\n    // the fragment head is used to update the target block, however when this does not happen we need\n    // to make sure that we include it on the rootBlocks since the first block of a fragment is always a\n    // fragment root block\n    if (blockMap.get(headKey)) {\n        rootBlocks.push(headKey);\n    }\n    while(rootBlock && rootBlock.getNextSiblingKey()){\n        var lastSiblingKey = rootBlock.getNextSiblingKey();\n        if (!lastSiblingKey) {\n            break;\n        }\n        rootBlocks.push(lastSiblingKey);\n        rootBlock = blockMap.get(lastSiblingKey);\n    }\n    return rootBlocks;\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, originalBlockMap, targetBlock, fragmentHeadBlock) {\n    return blockMap.withMutations(function(blockMapState) {\n        var targetKey = targetBlock.getKey();\n        var headKey = fragmentHeadBlock.getKey();\n        var targetNextKey = targetBlock.getNextSiblingKey();\n        var targetParentKey = targetBlock.getParentKey();\n        var fragmentRootBlocks = getRootBlocks(fragmentHeadBlock, blockMap);\n        var lastRootFragmentBlockKey = fragmentRootBlocks[fragmentRootBlocks.length - 1];\n        if (blockMapState.get(headKey)) {\n            // update the fragment head when it is part of the blockMap otherwise\n            blockMapState.setIn([\n                targetKey,\n                \"nextSibling\"\n            ], headKey);\n            blockMapState.setIn([\n                headKey,\n                \"prevSibling\"\n            ], targetKey);\n        } else {\n            // update the target block that had the fragment head contents merged into it\n            blockMapState.setIn([\n                targetKey,\n                \"nextSibling\"\n            ], fragmentHeadBlock.getNextSiblingKey());\n            blockMapState.setIn([\n                fragmentHeadBlock.getNextSiblingKey(),\n                \"prevSibling\"\n            ], targetKey);\n        } // update the last root block fragment\n        blockMapState.setIn([\n            lastRootFragmentBlockKey,\n            \"nextSibling\"\n        ], targetNextKey); // update the original target next block\n        if (targetNextKey) {\n            blockMapState.setIn([\n                targetNextKey,\n                \"prevSibling\"\n            ], lastRootFragmentBlockKey);\n        } // update fragment parent links\n        fragmentRootBlocks.forEach(function(blockKey) {\n            return blockMapState.setIn([\n                blockKey,\n                \"parent\"\n            ], targetParentKey);\n        }); // update targetBlock parent child links\n        if (targetParentKey) {\n            var targetParent = blockMap.get(targetParentKey);\n            var originalTargetParentChildKeys = targetParent.getChildKeys();\n            var targetBlockIndex = originalTargetParentChildKeys.indexOf(targetKey);\n            var insertionIndex = targetBlockIndex + 1;\n            var newChildrenKeysArray = originalTargetParentChildKeys.toArray(); // insert fragment children\n            newChildrenKeysArray.splice.apply(newChildrenKeysArray, [\n                insertionIndex,\n                0\n            ].concat(fragmentRootBlocks));\n            blockMapState.setIn([\n                targetParentKey,\n                \"children\"\n            ], List(newChildrenKeysArray));\n        }\n    });\n};\nvar insertFragment = function insertFragment(contentState, selectionState, blockMap, fragment, targetKey, targetOffset) {\n    var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\n    var newBlockArr = [];\n    var fragmentSize = fragment.size;\n    var target = blockMap.get(targetKey);\n    var head = fragment.first();\n    var tail = fragment.last();\n    var finalOffset = tail.getLength();\n    var finalKey = tail.getKey();\n    var shouldNotUpdateFromFragmentBlock = isTreeBasedBlockMap && (!target.getChildKeys().isEmpty() || !head.getChildKeys().isEmpty());\n    blockMap.forEach(function(block, blockKey) {\n        if (blockKey !== targetKey) {\n            newBlockArr.push(block);\n            return;\n        }\n        if (shouldNotUpdateFromFragmentBlock) {\n            newBlockArr.push(block);\n        } else {\n            newBlockArr.push(updateHead(block, targetOffset, fragment));\n        } // Insert fragment blocks after the head and before the tail.\n        fragment // when we are updating the target block with the head fragment block we skip the first fragment\n        // head since its contents have already been merged with the target block otherwise we include\n        // the whole fragment\n        .slice(shouldNotUpdateFromFragmentBlock ? 0 : 1, fragmentSize - 1).forEach(function(fragmentBlock) {\n            return newBlockArr.push(fragmentBlock);\n        }); // update tail\n        newBlockArr.push(updateTail(block, targetOffset, fragment));\n    });\n    var updatedBlockMap = BlockMapBuilder.createFromArray(newBlockArr);\n    if (isTreeBasedBlockMap) {\n        updatedBlockMap = updateBlockMapLinks(updatedBlockMap, blockMap, target, head);\n    }\n    return contentState.merge({\n        blockMap: updatedBlockMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: finalKey,\n            anchorOffset: finalOffset,\n            focusKey: finalKey,\n            focusOffset: finalOffset,\n            isBackward: false\n        })\n    });\n};\nvar insertFragmentIntoContentState = function insertFragmentIntoContentState(contentState, selectionState, fragmentBlockMap) {\n    var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"REPLACE_WITH_NEW_DATA\";\n    !selectionState.isCollapsed() ?  true ? invariant(false, \"`insertFragment` should only be called with a collapsed selection state.\") : 0 : void 0;\n    var blockMap = contentState.getBlockMap();\n    var fragment = randomizeBlockMapKeys(fragmentBlockMap);\n    var targetKey = selectionState.getStartKey();\n    var targetOffset = selectionState.getStartOffset();\n    var targetBlock = blockMap.get(targetKey);\n    if (targetBlock instanceof ContentBlockNode) {\n        !targetBlock.getChildKeys().isEmpty() ?  true ? invariant(false, \"`insertFragment` should not be called when a container node is selected.\") : 0 : void 0;\n    } // When we insert a fragment with a single block we simply update the target block\n    // with the contents of the inserted fragment block\n    if (fragment.size === 1) {\n        return updateExistingBlock(contentState, selectionState, blockMap, fragment.first(), targetKey, targetOffset, mergeBlockData);\n    }\n    return insertFragment(contentState, selectionState, blockMap, fragment, targetKey, targetOffset);\n};\nmodule.exports = insertFragmentIntoContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/insertFragmentIntoContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/insertIntoList.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/insertIntoList.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Maintain persistence for target list when appending and prepending.\n */ function insertIntoList(targetListArg, toInsert, offset) {\n    var targetList = targetListArg;\n    if (offset === targetList.count()) {\n        toInsert.forEach(function(c) {\n            targetList = targetList.push(c);\n        });\n    } else if (offset === 0) {\n        toInsert.reverse().forEach(function(c) {\n            targetList = targetList.unshift(c);\n        });\n    } else {\n        var head = targetList.slice(0, offset);\n        var tail = targetList.slice(offset);\n        targetList = head.concat(toInsert, tail).toList();\n    }\n    return targetList;\n}\nmodule.exports = insertIntoList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydEludG9MaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUE7O0NBRUMsR0FDRCxTQUFTQSxlQUFlQyxhQUFhLEVBQUVDLFFBQVEsRUFBRUMsTUFBTTtJQUNyRCxJQUFJQyxhQUFhSDtJQUVqQixJQUFJRSxXQUFXQyxXQUFXQyxLQUFLLElBQUk7UUFDakNILFNBQVNJLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1lBQzFCSCxhQUFhQSxXQUFXSSxJQUFJLENBQUNEO1FBQy9CO0lBQ0YsT0FBTyxJQUFJSixXQUFXLEdBQUc7UUFDdkJELFNBQVNPLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFNBQVVDLENBQUM7WUFDcENILGFBQWFBLFdBQVdNLE9BQU8sQ0FBQ0g7UUFDbEM7SUFDRixPQUFPO1FBQ0wsSUFBSUksT0FBT1AsV0FBV1EsS0FBSyxDQUFDLEdBQUdUO1FBQy9CLElBQUlVLE9BQU9ULFdBQVdRLEtBQUssQ0FBQ1Q7UUFDNUJDLGFBQWFPLEtBQUtHLE1BQU0sQ0FBQ1osVUFBVVcsTUFBTUUsTUFBTTtJQUNqRDtJQUVBLE9BQU9YO0FBQ1Q7QUFFQVksT0FBT0MsT0FBTyxHQUFHakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydEludG9MaXN0LmpzP2YwZmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNYWludGFpbiBwZXJzaXN0ZW5jZSBmb3IgdGFyZ2V0IGxpc3Qgd2hlbiBhcHBlbmRpbmcgYW5kIHByZXBlbmRpbmcuXG4gKi9cbmZ1bmN0aW9uIGluc2VydEludG9MaXN0KHRhcmdldExpc3RBcmcsIHRvSW5zZXJ0LCBvZmZzZXQpIHtcbiAgdmFyIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0QXJnO1xuXG4gIGlmIChvZmZzZXQgPT09IHRhcmdldExpc3QuY291bnQoKSkge1xuICAgIHRvSW5zZXJ0LmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnB1c2goYyk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgdG9JbnNlcnQucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnVuc2hpZnQoYyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhlYWQgPSB0YXJnZXRMaXN0LnNsaWNlKDAsIG9mZnNldCk7XG4gICAgdmFyIHRhaWwgPSB0YXJnZXRMaXN0LnNsaWNlKG9mZnNldCk7XG4gICAgdGFyZ2V0TGlzdCA9IGhlYWQuY29uY2F0KHRvSW5zZXJ0LCB0YWlsKS50b0xpc3QoKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRMaXN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEludG9MaXN0OyJdLCJuYW1lcyI6WyJpbnNlcnRJbnRvTGlzdCIsInRhcmdldExpc3RBcmciLCJ0b0luc2VydCIsIm9mZnNldCIsInRhcmdldExpc3QiLCJjb3VudCIsImZvckVhY2giLCJjIiwicHVzaCIsInJldmVyc2UiLCJ1bnNoaWZ0IiwiaGVhZCIsInNsaWNlIiwidGFpbCIsImNvbmNhdCIsInRvTGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/insertIntoList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/insertTextIntoContentState.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/insertTextIntoContentState.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar insertIntoList = __webpack_require__(/*! ./insertIntoList */ \"(ssr)/./node_modules/draft-js/lib/insertIntoList.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar Repeat = Immutable.Repeat;\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n    !selectionState.isCollapsed() ?  true ? invariant(false, \"`insertText` should only be called with a collapsed range.\") : 0 : void 0;\n    var len = null;\n    if (text != null) {\n        len = text.length;\n    }\n    if (len == null || len === 0) {\n        return contentState;\n    }\n    var blockMap = contentState.getBlockMap();\n    var key = selectionState.getStartKey();\n    var offset = selectionState.getStartOffset();\n    var block = blockMap.get(key);\n    var blockText = block.getText();\n    var newBlock = block.merge({\n        text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n        characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n    });\n    var newOffset = offset + len;\n    return contentState.merge({\n        blockMap: blockMap.set(key, newBlock),\n        selectionAfter: selectionState.merge({\n            anchorOffset: newOffset,\n            focusOffset: newOffset\n        })\n    });\n}\nmodule.exports = insertTextIntoContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydFRleHRJbnRvQ29udGVudFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyw2RUFBa0I7QUFFL0MsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlHLFNBQVNKLFVBQVVJLE1BQU07QUFFN0IsU0FBU0MsMkJBQTJCQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsSUFBSSxFQUFFQyxpQkFBaUI7SUFDdkYsQ0FBQ0YsZUFBZUcsV0FBVyxLQUFLQyxLQUFxQyxHQUFHUixVQUFVLE9BQU8sZ0VBQWdFQSxDQUFnQixHQUFHLEtBQUs7SUFDakwsSUFBSVMsTUFBTTtJQUVWLElBQUlKLFFBQVEsTUFBTTtRQUNoQkksTUFBTUosS0FBS0ssTUFBTTtJQUNuQjtJQUVBLElBQUlELE9BQU8sUUFBUUEsUUFBUSxHQUFHO1FBQzVCLE9BQU9OO0lBQ1Q7SUFFQSxJQUFJUSxXQUFXUixhQUFhUyxXQUFXO0lBQ3ZDLElBQUlDLE1BQU1ULGVBQWVVLFdBQVc7SUFDcEMsSUFBSUMsU0FBU1gsZUFBZVksY0FBYztJQUMxQyxJQUFJQyxRQUFRTixTQUFTTyxHQUFHLENBQUNMO0lBQ3pCLElBQUlNLFlBQVlGLE1BQU1HLE9BQU87SUFDN0IsSUFBSUMsV0FBV0osTUFBTUssS0FBSyxDQUFDO1FBQ3pCakIsTUFBTWMsVUFBVUksS0FBSyxDQUFDLEdBQUdSLFVBQVVWLE9BQU9jLFVBQVVJLEtBQUssQ0FBQ1IsUUFBUUUsTUFBTU8sU0FBUztRQUNqRkMsZUFBZTFCLGVBQWVrQixNQUFNUyxnQkFBZ0IsSUFBSXpCLE9BQU9LLG1CQUFtQkcsS0FBS2tCLE1BQU0sSUFBSVo7SUFDbkc7SUFDQSxJQUFJYSxZQUFZYixTQUFTTjtJQUN6QixPQUFPTixhQUFhbUIsS0FBSyxDQUFDO1FBQ3hCWCxVQUFVQSxTQUFTa0IsR0FBRyxDQUFDaEIsS0FBS1E7UUFDNUJTLGdCQUFnQjFCLGVBQWVrQixLQUFLLENBQUM7WUFDbkNTLGNBQWNIO1lBQ2RJLGFBQWFKO1FBQ2Y7SUFDRjtBQUNGO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pbnNlcnRUZXh0SW50b0NvbnRlbnRTdGF0ZS5qcz81NWRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG52YXIgaW5zZXJ0SW50b0xpc3QgPSByZXF1aXJlKFwiLi9pbnNlcnRJbnRvTGlzdFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7XG5cbnZhciBSZXBlYXQgPSBJbW11dGFibGUuUmVwZWF0O1xuXG5mdW5jdGlvbiBpbnNlcnRUZXh0SW50b0NvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCB0ZXh0LCBjaGFyYWN0ZXJNZXRhZGF0YSkge1xuICAhc2VsZWN0aW9uU3RhdGUuaXNDb2xsYXBzZWQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2BpbnNlcnRUZXh0YCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2l0aCBhIGNvbGxhcHNlZCByYW5nZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBsZW4gPSBudWxsO1xuXG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICBsZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgfVxuXG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPT09IDApIHtcbiAgICByZXR1cm4gY29udGVudFN0YXRlO1xuICB9XG5cbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBrZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGJsb2NrID0gYmxvY2tNYXAuZ2V0KGtleSk7XG4gIHZhciBibG9ja1RleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gIHZhciBuZXdCbG9jayA9IGJsb2NrLm1lcmdlKHtcbiAgICB0ZXh0OiBibG9ja1RleHQuc2xpY2UoMCwgb2Zmc2V0KSArIHRleHQgKyBibG9ja1RleHQuc2xpY2Uob2Zmc2V0LCBibG9jay5nZXRMZW5ndGgoKSksXG4gICAgY2hhcmFjdGVyTGlzdDogaW5zZXJ0SW50b0xpc3QoYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpLCBSZXBlYXQoY2hhcmFjdGVyTWV0YWRhdGEsIGxlbikudG9MaXN0KCksIG9mZnNldClcbiAgfSk7XG4gIHZhciBuZXdPZmZzZXQgPSBvZmZzZXQgKyBsZW47XG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5zZXQoa2V5LCBuZXdCbG9jayksXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGFuY2hvck9mZnNldDogbmV3T2Zmc2V0LFxuICAgICAgZm9jdXNPZmZzZXQ6IG5ld09mZnNldFxuICAgIH0pXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFRleHRJbnRvQ29udGVudFN0YXRlOyJdLCJuYW1lcyI6WyJJbW11dGFibGUiLCJyZXF1aXJlIiwiaW5zZXJ0SW50b0xpc3QiLCJpbnZhcmlhbnQiLCJSZXBlYXQiLCJpbnNlcnRUZXh0SW50b0NvbnRlbnRTdGF0ZSIsImNvbnRlbnRTdGF0ZSIsInNlbGVjdGlvblN0YXRlIiwidGV4dCIsImNoYXJhY3Rlck1ldGFkYXRhIiwiaXNDb2xsYXBzZWQiLCJwcm9jZXNzIiwibGVuIiwibGVuZ3RoIiwiYmxvY2tNYXAiLCJnZXRCbG9ja01hcCIsImtleSIsImdldFN0YXJ0S2V5Iiwib2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJibG9jayIsImdldCIsImJsb2NrVGV4dCIsImdldFRleHQiLCJuZXdCbG9jayIsIm1lcmdlIiwic2xpY2UiLCJnZXRMZW5ndGgiLCJjaGFyYWN0ZXJMaXN0IiwiZ2V0Q2hhcmFjdGVyTGlzdCIsInRvTGlzdCIsIm5ld09mZnNldCIsInNldCIsInNlbGVjdGlvbkFmdGVyIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNPZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/insertTextIntoContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isElement.js":
/*!************************************************!*\
  !*** ./node_modules/draft-js/lib/isElement.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function isElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return node.nodeType === Node.ELEMENT_NODE;\n}\nmodule.exports = isElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzRWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNBLFVBQVVDLElBQUk7SUFDckIsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLGFBQWEsRUFBRTtRQUNoQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPRCxLQUFLRSxRQUFRLEtBQUtDLEtBQUtDLFlBQVk7QUFDNUM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaXNFbGVtZW50LmpzPzNmM2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICBpZiAoIW5vZGUgfHwgIW5vZGUub3duZXJEb2N1bWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VsZW1lbnQ7Il0sIm5hbWVzIjpbImlzRWxlbWVudCIsIm5vZGUiLCJvd25lckRvY3VtZW50Iiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isEventHandled.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/isEventHandled.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Utility method for determining whether or not the value returned\n * from a handler indicates that it was handled.\n */ function isEventHandled(value) {\n    return value === \"handled\" || value === true;\n}\nmodule.exports = isEventHandled;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzRXZlbnRIYW5kbGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0EsZUFBZUMsS0FBSztJQUMzQixPQUFPQSxVQUFVLGFBQWFBLFVBQVU7QUFDMUM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaXNFdmVudEhhbmRsZWQuanM/ODdkOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFV0aWxpdHkgbWV0aG9kIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIG9yIG5vdCB0aGUgdmFsdWUgcmV0dXJuZWRcbiAqIGZyb20gYSBoYW5kbGVyIGluZGljYXRlcyB0aGF0IGl0IHdhcyBoYW5kbGVkLlxuICovXG5mdW5jdGlvbiBpc0V2ZW50SGFuZGxlZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09ICdoYW5kbGVkJyB8fCB2YWx1ZSA9PT0gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0V2ZW50SGFuZGxlZDsiXSwibmFtZXMiOlsiaXNFdmVudEhhbmRsZWQiLCJ2YWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isEventHandled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLAnchorElement.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLAnchorElement.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction isHTMLAnchorElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return isElement(node) && node.nodeName === \"A\";\n}\nmodule.exports = isHTMLAnchorElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEFuY2hvckVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVyQyxTQUFTQyxvQkFBb0JDLElBQUk7SUFDL0IsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLGFBQWEsRUFBRTtRQUNoQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPSixVQUFVRyxTQUFTQSxLQUFLRSxRQUFRLEtBQUs7QUFDOUM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaXNIVE1MQW5jaG9yRWxlbWVudC5qcz82NTJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xudmFyIGlzRWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gaXNIVE1MQW5jaG9yRWxlbWVudChub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzRWxlbWVudChub2RlKSAmJiBub2RlLm5vZGVOYW1lID09PSAnQSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNIVE1MQW5jaG9yRWxlbWVudDsiXSwibmFtZXMiOlsiaXNFbGVtZW50IiwicmVxdWlyZSIsImlzSFRNTEFuY2hvckVsZW1lbnQiLCJub2RlIiwib3duZXJEb2N1bWVudCIsIm5vZGVOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLAnchorElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js":
/*!******************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLBRElement.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction isHTMLBRElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return isElement(node) && node.nodeName === \"BR\";\n}\nmodule.exports = isHTMLBRElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEJSRWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Q0FTQyxHQUNELElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRXJDLFNBQVNDLGdCQUFnQkMsSUFBSTtJQUMzQixJQUFJLENBQUNBLFFBQVEsQ0FBQ0EsS0FBS0MsYUFBYSxFQUFFO1FBQ2hDLE9BQU87SUFDVDtJQUVBLE9BQU9KLFVBQVVHLFNBQVNBLEtBQUtFLFFBQVEsS0FBSztBQUM5QztBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc0hUTUxCUkVsZW1lbnQuanM/ODQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbnZhciBpc0VsZW1lbnQgPSByZXF1aXJlKFwiLi9pc0VsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGlzSFRNTEJSRWxlbWVudChub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzRWxlbWVudChub2RlKSAmJiBub2RlLm5vZGVOYW1lID09PSAnQlInO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSFRNTEJSRWxlbWVudDsiXSwibmFtZXMiOlsiaXNFbGVtZW50IiwicmVxdWlyZSIsImlzSFRNTEJSRWxlbWVudCIsIm5vZGUiLCJvd25lckRvY3VtZW50Iiwibm9kZU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLElement.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLElement.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function isHTMLElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    if (!node.ownerDocument.defaultView) {\n        return node instanceof HTMLElement;\n    }\n    if (node instanceof node.ownerDocument.defaultView.HTMLElement) {\n        return true;\n    }\n    return false;\n}\nmodule.exports = isHTMLElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxjQUFjQyxJQUFJO0lBQ3pCLElBQUksQ0FBQ0EsUUFBUSxDQUFDQSxLQUFLQyxhQUFhLEVBQUU7UUFDaEMsT0FBTztJQUNUO0lBRUEsSUFBSSxDQUFDRCxLQUFLQyxhQUFhLENBQUNDLFdBQVcsRUFBRTtRQUNuQyxPQUFPRixnQkFBZ0JHO0lBQ3pCO0lBRUEsSUFBSUgsZ0JBQWdCQSxLQUFLQyxhQUFhLENBQUNDLFdBQVcsQ0FBQ0MsV0FBVyxFQUFFO1FBQzlELE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc0hUTUxFbGVtZW50LmpzPzQzNzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8ICFub2RlLm93bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIW5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldykge1xuICAgIHJldHVybiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH1cblxuICBpZiAobm9kZSBpbnN0YW5jZW9mIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5IVE1MRWxlbWVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSFRNTEVsZW1lbnQ7Il0sIm5hbWVzIjpbImlzSFRNTEVsZW1lbnQiLCJub2RlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiSFRNTEVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLImageElement.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLImageElement.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction isHTMLImageElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return isElement(node) && node.nodeName === \"IMG\";\n}\nmodule.exports = isHTMLImageElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEltYWdlRWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Q0FTQyxHQUNELElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRXJDLFNBQVNDLG1CQUFtQkMsSUFBSTtJQUM5QixJQUFJLENBQUNBLFFBQVEsQ0FBQ0EsS0FBS0MsYUFBYSxFQUFFO1FBQ2hDLE9BQU87SUFDVDtJQUVBLE9BQU9KLFVBQVVHLFNBQVNBLEtBQUtFLFFBQVEsS0FBSztBQUM5QztBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc0hUTUxJbWFnZUVsZW1lbnQuanM/Y2VhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbnZhciBpc0VsZW1lbnQgPSByZXF1aXJlKFwiLi9pc0VsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGlzSFRNTEltYWdlRWxlbWVudChub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzRWxlbWVudChub2RlKSAmJiBub2RlLm5vZGVOYW1lID09PSAnSU1HJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0hUTUxJbWFnZUVsZW1lbnQ7Il0sIm5hbWVzIjpbImlzRWxlbWVudCIsInJlcXVpcmUiLCJpc0hUTUxJbWFnZUVsZW1lbnQiLCJub2RlIiwib3duZXJEb2N1bWVudCIsIm5vZGVOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLImageElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isInstanceOfNode.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/isInstanceOfNode.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function isInstanceOfNode(target) {\n    // we changed the name because of having duplicate module provider (fbjs)\n    if (!target || !(\"ownerDocument\" in target)) {\n        return false;\n    }\n    if (\"ownerDocument\" in target) {\n        var node = target;\n        if (!node.ownerDocument.defaultView) {\n            return node instanceof Node;\n        }\n        if (node instanceof node.ownerDocument.defaultView.Node) {\n            return true;\n        }\n    }\n    return false;\n}\nmodule.exports = isInstanceOfNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSW5zdGFuY2VPZk5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxpQkFBaUJDLE1BQU07SUFDOUIseUVBQXlFO0lBQ3pFLElBQUksQ0FBQ0EsVUFBVSxDQUFFLG9CQUFtQkEsTUFBSyxHQUFJO1FBQzNDLE9BQU87SUFDVDtJQUVBLElBQUksbUJBQW1CQSxRQUFRO1FBQzdCLElBQUlDLE9BQU9EO1FBRVgsSUFBSSxDQUFDQyxLQUFLQyxhQUFhLENBQUNDLFdBQVcsRUFBRTtZQUNuQyxPQUFPRixnQkFBZ0JHO1FBQ3pCO1FBRUEsSUFBSUgsZ0JBQWdCQSxLQUFLQyxhQUFhLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxFQUFFO1lBQ3ZELE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSW5zdGFuY2VPZk5vZGUuanM/YWE0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbmZ1bmN0aW9uIGlzSW5zdGFuY2VPZk5vZGUodGFyZ2V0KSB7XG4gIC8vIHdlIGNoYW5nZWQgdGhlIG5hbWUgYmVjYXVzZSBvZiBoYXZpbmcgZHVwbGljYXRlIG1vZHVsZSBwcm92aWRlciAoZmJqcylcbiAgaWYgKCF0YXJnZXQgfHwgISgnb3duZXJEb2N1bWVudCcgaW4gdGFyZ2V0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgnb3duZXJEb2N1bWVudCcgaW4gdGFyZ2V0KSB7XG4gICAgdmFyIG5vZGUgPSB0YXJnZXQ7XG5cbiAgICBpZiAoIW5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldykge1xuICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBOb2RlO1xuICAgIH1cblxuICAgIGlmIChub2RlIGluc3RhbmNlb2Ygbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lk5vZGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luc3RhbmNlT2ZOb2RlOyJdLCJuYW1lcyI6WyJpc0luc3RhbmNlT2ZOb2RlIiwidGFyZ2V0Iiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIk5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isInstanceOfNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isSelectionAtLeafStart.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/isSelectionAtLeafStart.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction isSelectionAtLeafStart(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var blockTree = editorState.getBlockTree(anchorKey);\n    var offset = selection.getStartOffset();\n    var isAtStart = false;\n    blockTree.some(function(leafSet) {\n        if (offset === leafSet.get(\"start\")) {\n            isAtStart = true;\n            return true;\n        }\n        if (offset < leafSet.get(\"end\")) {\n            return leafSet.get(\"leaves\").some(function(leaf) {\n                var leafStart = leaf.get(\"start\");\n                if (offset === leafStart) {\n                    isAtStart = true;\n                    return true;\n                }\n                return false;\n            });\n        }\n        return false;\n    });\n    return isAtStart;\n}\nmodule.exports = isSelectionAtLeafStart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzU2VsZWN0aW9uQXRMZWFmU3RhcnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSx1QkFBdUJDLFdBQVc7SUFDekMsSUFBSUMsWUFBWUQsWUFBWUUsWUFBWTtJQUN4QyxJQUFJQyxZQUFZRixVQUFVRyxZQUFZO0lBQ3RDLElBQUlDLFlBQVlMLFlBQVlNLFlBQVksQ0FBQ0g7SUFDekMsSUFBSUksU0FBU04sVUFBVU8sY0FBYztJQUNyQyxJQUFJQyxZQUFZO0lBQ2hCSixVQUFVSyxJQUFJLENBQUMsU0FBVUMsT0FBTztRQUM5QixJQUFJSixXQUFXSSxRQUFRQyxHQUFHLENBQUMsVUFBVTtZQUNuQ0gsWUFBWTtZQUNaLE9BQU87UUFDVDtRQUVBLElBQUlGLFNBQVNJLFFBQVFDLEdBQUcsQ0FBQyxRQUFRO1lBQy9CLE9BQU9ELFFBQVFDLEdBQUcsQ0FBQyxVQUFVRixJQUFJLENBQUMsU0FBVUcsSUFBSTtnQkFDOUMsSUFBSUMsWUFBWUQsS0FBS0QsR0FBRyxDQUFDO2dCQUV6QixJQUFJTCxXQUFXTyxXQUFXO29CQUN4QkwsWUFBWTtvQkFDWixPQUFPO2dCQUNUO2dCQUVBLE9BQU87WUFDVDtRQUNGO1FBRUEsT0FBTztJQUNUO0lBQ0EsT0FBT0E7QUFDVDtBQUVBTSxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaXNTZWxlY3Rpb25BdExlYWZTdGFydC5qcz81NTMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGlzU2VsZWN0aW9uQXRMZWFmU3RhcnQoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICB2YXIgYW5jaG9yS2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICB2YXIgYmxvY2tUcmVlID0gZWRpdG9yU3RhdGUuZ2V0QmxvY2tUcmVlKGFuY2hvcktleSk7XG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGlzQXRTdGFydCA9IGZhbHNlO1xuICBibG9ja1RyZWUuc29tZShmdW5jdGlvbiAobGVhZlNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IGxlYWZTZXQuZ2V0KCdzdGFydCcpKSB7XG4gICAgICBpc0F0U3RhcnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCA8IGxlYWZTZXQuZ2V0KCdlbmQnKSkge1xuICAgICAgcmV0dXJuIGxlYWZTZXQuZ2V0KCdsZWF2ZXMnKS5zb21lKGZ1bmN0aW9uIChsZWFmKSB7XG4gICAgICAgIHZhciBsZWFmU3RhcnQgPSBsZWFmLmdldCgnc3RhcnQnKTtcblxuICAgICAgICBpZiAob2Zmc2V0ID09PSBsZWFmU3RhcnQpIHtcbiAgICAgICAgICBpc0F0U3RhcnQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlzQXRTdGFydDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0OyJdLCJuYW1lcyI6WyJpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0IiwiZWRpdG9yU3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JLZXkiLCJnZXRBbmNob3JLZXkiLCJibG9ja1RyZWUiLCJnZXRCbG9ja1RyZWUiLCJvZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsImlzQXRTdGFydCIsInNvbWUiLCJsZWFmU2V0IiwiZ2V0IiwibGVhZiIsImxlYWZTdGFydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isSelectionAtLeafStart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isSoftNewlineEvent.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/isSoftNewlineEvent.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nfunction isSoftNewlineEvent(e) {\n    return e.which === Keys.RETURN && (e.getModifierState(\"Shift\") || e.getModifierState(\"Alt\") || e.getModifierState(\"Control\"));\n}\nmodule.exports = isSoftNewlineEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzU29mdE5ld2xpbmVFdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLDREQUFlO0FBRWxDLFNBQVNDLG1CQUFtQkMsQ0FBQztJQUMzQixPQUFPQSxFQUFFQyxLQUFLLEtBQUtKLEtBQUtLLE1BQU0sSUFBS0YsQ0FBQUEsRUFBRUcsZ0JBQWdCLENBQUMsWUFBWUgsRUFBRUcsZ0JBQWdCLENBQUMsVUFBVUgsRUFBRUcsZ0JBQWdCLENBQUMsVUFBUztBQUM3SDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc1NvZnROZXdsaW5lRXZlbnQuanM/YmI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgS2V5cyA9IHJlcXVpcmUoXCJmYmpzL2xpYi9LZXlzXCIpO1xuXG5mdW5jdGlvbiBpc1NvZnROZXdsaW5lRXZlbnQoZSkge1xuICByZXR1cm4gZS53aGljaCA9PT0gS2V5cy5SRVRVUk4gJiYgKGUuZ2V0TW9kaWZpZXJTdGF0ZSgnU2hpZnQnKSB8fCBlLmdldE1vZGlmaWVyU3RhdGUoJ0FsdCcpIHx8IGUuZ2V0TW9kaWZpZXJTdGF0ZSgnQ29udHJvbCcpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1NvZnROZXdsaW5lRXZlbnQ7Il0sIm5hbWVzIjpbIktleXMiLCJyZXF1aXJlIiwiaXNTb2Z0TmV3bGluZUV2ZW50IiwiZSIsIndoaWNoIiwiUkVUVVJOIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isSoftNewlineEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js":
/*!***********************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar expandRangeToStartOfLine = __webpack_require__(/*! ./expandRangeToStartOfLine */ \"(ssr)/./node_modules/draft-js/lib/expandRangeToStartOfLine.js\");\nvar getDraftEditorSelectionWithNodes = __webpack_require__(/*! ./getDraftEditorSelectionWithNodes */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js\");\nvar moveSelectionBackward = __webpack_require__(/*! ./moveSelectionBackward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\nfunction keyCommandBackspaceToStartOfLine(editorState, e) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\n            return moveSelectionBackward(strategyState, 1);\n        }\n        var ownerDocument = e.currentTarget.ownerDocument;\n        var domSelection = ownerDocument.defaultView.getSelection(); // getRangeAt can technically throw if there's no selection, but we know\n        // there is one here because text editor has focus (the cursor is a\n        // selection of length 0). Therefore, we don't need to wrap this in a\n        // try-catch block.\n        var range = domSelection.getRangeAt(0);\n        range = expandRangeToStartOfLine(range);\n        return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;\n    }, \"backward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    return EditorState.push(editorState, afterRemoval, \"remove-range\");\n}\nmodule.exports = keyCommandBackspaceToStartOfLine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUMsMkJBQTJCRCxtQkFBT0EsQ0FBQyxpR0FBNEI7QUFFbkUsSUFBSUUsbUNBQW1DRixtQkFBT0EsQ0FBQyxpSEFBb0M7QUFFbkYsSUFBSUcsd0JBQXdCSCxtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUkseUJBQXlCSixtQkFBT0EsQ0FBQyw2RkFBMEI7QUFFL0QsU0FBU0ssaUNBQWlDQyxXQUFXLEVBQUVDLENBQUM7SUFDdEQsSUFBSUMsZUFBZUosdUJBQXVCRSxhQUFhLFNBQVVHLGFBQWE7UUFDNUUsSUFBSUMsWUFBWUQsY0FBY0UsWUFBWTtRQUUxQyxJQUFJRCxVQUFVRSxXQUFXLE1BQU1GLFVBQVVHLGVBQWUsT0FBTyxHQUFHO1lBQ2hFLE9BQU9WLHNCQUFzQk0sZUFBZTtRQUM5QztRQUVBLElBQUlLLGdCQUFnQlAsRUFBRVEsYUFBYSxDQUFDRCxhQUFhO1FBQ2pELElBQUlFLGVBQWVGLGNBQWNHLFdBQVcsQ0FBQ04sWUFBWSxJQUFJLHdFQUF3RTtRQUNySSxtRUFBbUU7UUFDbkUscUVBQXFFO1FBQ3JFLG1CQUFtQjtRQUVuQixJQUFJTyxRQUFRRixhQUFhRyxVQUFVLENBQUM7UUFDcENELFFBQVFqQix5QkFBeUJpQjtRQUNqQyxPQUFPaEIsaUNBQWlDTyxlQUFlLE1BQU1TLE1BQU1FLFlBQVksRUFBRUYsTUFBTUcsU0FBUyxFQUFFSCxNQUFNSSxjQUFjLEVBQUVKLE1BQU1LLFdBQVcsRUFBRUMsY0FBYztJQUMzSixHQUFHO0lBRUgsSUFBSWhCLGlCQUFpQkYsWUFBWW1CLGlCQUFpQixJQUFJO1FBQ3BELE9BQU9uQjtJQUNUO0lBRUEsT0FBT1AsWUFBWTJCLElBQUksQ0FBQ3BCLGFBQWFFLGNBQWM7QUFDckQ7QUFFQW1CLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kQmFja3NwYWNlVG9TdGFydE9mTGluZS5qcz81ZjMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lID0gcmVxdWlyZShcIi4vZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lXCIpO1xuXG52YXIgZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMgPSByZXF1aXJlKFwiLi9nZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2Rlc1wiKTtcblxudmFyIG1vdmVTZWxlY3Rpb25CYWNrd2FyZCA9IHJlcXVpcmUoXCIuL21vdmVTZWxlY3Rpb25CYWNrd2FyZFwiKTtcblxudmFyIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3kgPSByZXF1aXJlKFwiLi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5XCIpO1xuXG5mdW5jdGlvbiBrZXlDb21tYW5kQmFja3NwYWNlVG9TdGFydE9mTGluZShlZGl0b3JTdGF0ZSwgZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSAmJiBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCkgPT09IDApIHtcbiAgICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoc3RyYXRlZ3lTdGF0ZSwgMSk7XG4gICAgfVxuXG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBlLmN1cnJlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgICB2YXIgZG9tU2VsZWN0aW9uID0gb3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRTZWxlY3Rpb24oKTsgLy8gZ2V0UmFuZ2VBdCBjYW4gdGVjaG5pY2FsbHkgdGhyb3cgaWYgdGhlcmUncyBubyBzZWxlY3Rpb24sIGJ1dCB3ZSBrbm93XG4gICAgLy8gdGhlcmUgaXMgb25lIGhlcmUgYmVjYXVzZSB0ZXh0IGVkaXRvciBoYXMgZm9jdXMgKHRoZSBjdXJzb3IgaXMgYVxuICAgIC8vIHNlbGVjdGlvbiBvZiBsZW5ndGggMCkuIFRoZXJlZm9yZSwgd2UgZG9uJ3QgbmVlZCB0byB3cmFwIHRoaXMgaW4gYVxuICAgIC8vIHRyeS1jYXRjaCBibG9jay5cblxuICAgIHZhciByYW5nZSA9IGRvbVNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIHJhbmdlID0gZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lKHJhbmdlKTtcbiAgICByZXR1cm4gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMoc3RyYXRlZ3lTdGF0ZSwgbnVsbCwgcmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCkuc2VsZWN0aW9uU3RhdGU7XG4gIH0sICdiYWNrd2FyZCcpO1xuXG4gIGlmIChhZnRlclJlbW92YWwgPT09IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJSZW1vdmFsLCAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmU7Il0sIm5hbWVzIjpbIkVkaXRvclN0YXRlIiwicmVxdWlyZSIsImV4cGFuZFJhbmdlVG9TdGFydE9mTGluZSIsImdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzIiwibW92ZVNlbGVjdGlvbkJhY2t3YXJkIiwicmVtb3ZlVGV4dFdpdGhTdHJhdGVneSIsImtleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lIiwiZWRpdG9yU3RhdGUiLCJlIiwiYWZ0ZXJSZW1vdmFsIiwic3RyYXRlZ3lTdGF0ZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImlzQ29sbGFwc2VkIiwiZ2V0QW5jaG9yT2Zmc2V0Iiwib3duZXJEb2N1bWVudCIsImN1cnJlbnRUYXJnZXQiLCJkb21TZWxlY3Rpb24iLCJkZWZhdWx0VmlldyIsInJhbmdlIiwiZ2V0UmFuZ2VBdCIsImVuZENvbnRhaW5lciIsImVuZE9mZnNldCIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJzZWxlY3Rpb25TdGF0ZSIsImdldEN1cnJlbnRDb250ZW50IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceWord.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandBackspaceWord.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftRemovableWord = __webpack_require__(/*! ./DraftRemovableWord */ \"(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar moveSelectionBackward = __webpack_require__(/*! ./moveSelectionBackward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Delete the word that is left of the cursor, as well as any spaces or\n * punctuation after the word.\n */ function keyCommandBackspaceWord(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var offset = selection.getStartOffset(); // If there are no words before the cursor, remove the preceding newline.\n        if (offset === 0) {\n            return moveSelectionBackward(strategyState, 1);\n        }\n        var key = selection.getStartKey();\n        var content = strategyState.getCurrentContent();\n        var text = content.getBlockForKey(key).getText().slice(0, offset);\n        var toRemove = DraftRemovableWord.getBackward(text);\n        return moveSelectionBackward(strategyState, toRemove.length || 1);\n    }, \"backward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    return EditorState.push(editorState, afterRemoval, \"remove-range\");\n}\nmodule.exports = keyCommandBackspaceWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRCYWNrc3BhY2VXb3JkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEscUJBQXFCQyxtQkFBT0EsQ0FBQyxxRkFBc0I7QUFFdkQsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUUsd0JBQXdCRixtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUcseUJBQXlCSCxtQkFBT0EsQ0FBQyw2RkFBMEI7QUFDL0Q7OztDQUdDLEdBR0QsU0FBU0ksd0JBQXdCQyxXQUFXO0lBQzFDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsU0FBU0YsVUFBVUcsY0FBYyxJQUFJLHlFQUF5RTtRQUVsSCxJQUFJRCxXQUFXLEdBQUc7WUFDaEIsT0FBT1Isc0JBQXNCSyxlQUFlO1FBQzlDO1FBRUEsSUFBSUssTUFBTUosVUFBVUssV0FBVztRQUMvQixJQUFJQyxVQUFVUCxjQUFjUSxpQkFBaUI7UUFDN0MsSUFBSUMsT0FBT0YsUUFBUUcsY0FBYyxDQUFDTCxLQUFLTSxPQUFPLEdBQUdDLEtBQUssQ0FBQyxHQUFHVDtRQUMxRCxJQUFJVSxXQUFXckIsbUJBQW1Cc0IsV0FBVyxDQUFDTDtRQUM5QyxPQUFPZCxzQkFBc0JLLGVBQWVhLFNBQVNFLE1BQU0sSUFBSTtJQUNqRSxHQUFHO0lBRUgsSUFBSWhCLGlCQUFpQkQsWUFBWVUsaUJBQWlCLElBQUk7UUFDcEQsT0FBT1Y7SUFDVDtJQUVBLE9BQU9KLFlBQVlzQixJQUFJLENBQUNsQixhQUFhQyxjQUFjO0FBQ3JEO0FBRUFrQixPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZEJhY2tzcGFjZVdvcmQuanM/ZGFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRSZW1vdmFibGVXb3JkID0gcmVxdWlyZShcIi4vRHJhZnRSZW1vdmFibGVXb3JkXCIpO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxudmFyIG1vdmVTZWxlY3Rpb25CYWNrd2FyZCA9IHJlcXVpcmUoXCIuL21vdmVTZWxlY3Rpb25CYWNrd2FyZFwiKTtcblxudmFyIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3kgPSByZXF1aXJlKFwiLi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5XCIpO1xuLyoqXG4gKiBEZWxldGUgdGhlIHdvcmQgdGhhdCBpcyBsZWZ0IG9mIHRoZSBjdXJzb3IsIGFzIHdlbGwgYXMgYW55IHNwYWNlcyBvclxuICogcHVuY3R1YXRpb24gYWZ0ZXIgdGhlIHdvcmQuXG4gKi9cblxuXG5mdW5jdGlvbiBrZXlDb21tYW5kQmFja3NwYWNlV29yZChlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7IC8vIElmIHRoZXJlIGFyZSBubyB3b3JkcyBiZWZvcmUgdGhlIGN1cnNvciwgcmVtb3ZlIHRoZSBwcmVjZWRpbmcgbmV3bGluZS5cblxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoc3RyYXRlZ3lTdGF0ZSwgMSk7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICAgIHZhciBjb250ZW50ID0gc3RyYXRlZ3lTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciB0ZXh0ID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpLmdldFRleHQoKS5zbGljZSgwLCBvZmZzZXQpO1xuICAgIHZhciB0b1JlbW92ZSA9IERyYWZ0UmVtb3ZhYmxlV29yZC5nZXRCYWNrd2FyZCh0ZXh0KTtcbiAgICByZXR1cm4gbW92ZVNlbGVjdGlvbkJhY2t3YXJkKHN0cmF0ZWd5U3RhdGUsIHRvUmVtb3ZlLmxlbmd0aCB8fCAxKTtcbiAgfSwgJ2JhY2t3YXJkJyk7XG5cbiAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwsICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kQmFja3NwYWNlV29yZDsiXSwibmFtZXMiOlsiRHJhZnRSZW1vdmFibGVXb3JkIiwicmVxdWlyZSIsIkVkaXRvclN0YXRlIiwibW92ZVNlbGVjdGlvbkJhY2t3YXJkIiwicmVtb3ZlVGV4dFdpdGhTdHJhdGVneSIsImtleUNvbW1hbmRCYWNrc3BhY2VXb3JkIiwiZWRpdG9yU3RhdGUiLCJhZnRlclJlbW92YWwiLCJzdHJhdGVneVN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwib2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJrZXkiLCJnZXRTdGFydEtleSIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsInRleHQiLCJnZXRCbG9ja0ZvcktleSIsImdldFRleHQiLCJzbGljZSIsInRvUmVtb3ZlIiwiZ2V0QmFja3dhcmQiLCJsZW5ndGgiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceWord.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandDeleteWord.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandDeleteWord.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftRemovableWord = __webpack_require__(/*! ./DraftRemovableWord */ \"(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar moveSelectionForward = __webpack_require__(/*! ./moveSelectionForward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Delete the word that is right of the cursor, as well as any spaces or\n * punctuation before the word.\n */ function keyCommandDeleteWord(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var offset = selection.getStartOffset();\n        var key = selection.getStartKey();\n        var content = strategyState.getCurrentContent();\n        var text = content.getBlockForKey(key).getText().slice(offset);\n        var toRemove = DraftRemovableWord.getForward(text); // If there are no words in front of the cursor, remove the newline.\n        return moveSelectionForward(strategyState, toRemove.length || 1);\n    }, \"forward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    return EditorState.push(editorState, afterRemoval, \"remove-range\");\n}\nmodule.exports = keyCommandDeleteWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmREZWxldGVXb3JkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEscUJBQXFCQyxtQkFBT0EsQ0FBQyxxRkFBc0I7QUFFdkQsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUUsdUJBQXVCRixtQkFBT0EsQ0FBQyx5RkFBd0I7QUFFM0QsSUFBSUcseUJBQXlCSCxtQkFBT0EsQ0FBQyw2RkFBMEI7QUFDL0Q7OztDQUdDLEdBR0QsU0FBU0kscUJBQXFCQyxXQUFXO0lBQ3ZDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsU0FBU0YsVUFBVUcsY0FBYztRQUNyQyxJQUFJQyxNQUFNSixVQUFVSyxXQUFXO1FBQy9CLElBQUlDLFVBQVVQLGNBQWNRLGlCQUFpQjtRQUM3QyxJQUFJQyxPQUFPRixRQUFRRyxjQUFjLENBQUNMLEtBQUtNLE9BQU8sR0FBR0MsS0FBSyxDQUFDVDtRQUN2RCxJQUFJVSxXQUFXckIsbUJBQW1Cc0IsVUFBVSxDQUFDTCxPQUFPLG9FQUFvRTtRQUV4SCxPQUFPZCxxQkFBcUJLLGVBQWVhLFNBQVNFLE1BQU0sSUFBSTtJQUNoRSxHQUFHO0lBRUgsSUFBSWhCLGlCQUFpQkQsWUFBWVUsaUJBQWlCLElBQUk7UUFDcEQsT0FBT1Y7SUFDVDtJQUVBLE9BQU9KLFlBQVlzQixJQUFJLENBQUNsQixhQUFhQyxjQUFjO0FBQ3JEO0FBRUFrQixPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZERlbGV0ZVdvcmQuanM/ZWE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRSZW1vdmFibGVXb3JkID0gcmVxdWlyZShcIi4vRHJhZnRSZW1vdmFibGVXb3JkXCIpO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxudmFyIG1vdmVTZWxlY3Rpb25Gb3J3YXJkID0gcmVxdWlyZShcIi4vbW92ZVNlbGVjdGlvbkZvcndhcmRcIik7XG5cbnZhciByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5ID0gcmVxdWlyZShcIi4vcmVtb3ZlVGV4dFdpdGhTdHJhdGVneVwiKTtcbi8qKlxuICogRGVsZXRlIHRoZSB3b3JkIHRoYXQgaXMgcmlnaHQgb2YgdGhlIGN1cnNvciwgYXMgd2VsbCBhcyBhbnkgc3BhY2VzIG9yXG4gKiBwdW5jdHVhdGlvbiBiZWZvcmUgdGhlIHdvcmQuXG4gKi9cblxuXG5mdW5jdGlvbiBrZXlDb21tYW5kRGVsZXRlV29yZChlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gICAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICAgIHZhciBjb250ZW50ID0gc3RyYXRlZ3lTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciB0ZXh0ID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpLmdldFRleHQoKS5zbGljZShvZmZzZXQpO1xuICAgIHZhciB0b1JlbW92ZSA9IERyYWZ0UmVtb3ZhYmxlV29yZC5nZXRGb3J3YXJkKHRleHQpOyAvLyBJZiB0aGVyZSBhcmUgbm8gd29yZHMgaW4gZnJvbnQgb2YgdGhlIGN1cnNvciwgcmVtb3ZlIHRoZSBuZXdsaW5lLlxuXG4gICAgcmV0dXJuIG1vdmVTZWxlY3Rpb25Gb3J3YXJkKHN0cmF0ZWd5U3RhdGUsIHRvUmVtb3ZlLmxlbmd0aCB8fCAxKTtcbiAgfSwgJ2ZvcndhcmQnKTtcblxuICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbCwgJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmREZWxldGVXb3JkOyJdLCJuYW1lcyI6WyJEcmFmdFJlbW92YWJsZVdvcmQiLCJyZXF1aXJlIiwiRWRpdG9yU3RhdGUiLCJtb3ZlU2VsZWN0aW9uRm9yd2FyZCIsInJlbW92ZVRleHRXaXRoU3RyYXRlZ3kiLCJrZXlDb21tYW5kRGVsZXRlV29yZCIsImVkaXRvclN0YXRlIiwiYWZ0ZXJSZW1vdmFsIiwic3RyYXRlZ3lTdGF0ZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsIm9mZnNldCIsImdldFN0YXJ0T2Zmc2V0Iiwia2V5IiwiZ2V0U3RhcnRLZXkiLCJjb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJ0ZXh0IiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRUZXh0Iiwic2xpY2UiLCJ0b1JlbW92ZSIsImdldEZvcndhcmQiLCJsZW5ndGgiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandDeleteWord.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandInsertNewline.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandInsertNewline.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nfunction keyCommandInsertNewline(editorState) {\n    var contentState = DraftModifier.splitBlock(editorState.getCurrentContent(), editorState.getSelection());\n    return EditorState.push(editorState, contentState, \"split-block\");\n}\nmodule.exports = keyCommandInsertNewline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRJbnNlcnROZXdsaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQywyRUFBaUI7QUFFN0MsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsU0FBU0Usd0JBQXdCQyxXQUFXO0lBQzFDLElBQUlDLGVBQWVMLGNBQWNNLFVBQVUsQ0FBQ0YsWUFBWUcsaUJBQWlCLElBQUlILFlBQVlJLFlBQVk7SUFDckcsT0FBT04sWUFBWU8sSUFBSSxDQUFDTCxhQUFhQyxjQUFjO0FBQ3JEO0FBRUFLLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRJbnNlcnROZXdsaW5lLmpzP2YwZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKFwiLi9EcmFmdE1vZGlmaWVyXCIpO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxuZnVuY3Rpb24ga2V5Q29tbWFuZEluc2VydE5ld2xpbmUoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIGNvbnRlbnRTdGF0ZSA9IERyYWZ0TW9kaWZpZXIuc3BsaXRCbG9jayhlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBjb250ZW50U3RhdGUsICdzcGxpdC1ibG9jaycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRJbnNlcnROZXdsaW5lOyJdLCJuYW1lcyI6WyJEcmFmdE1vZGlmaWVyIiwicmVxdWlyZSIsIkVkaXRvclN0YXRlIiwia2V5Q29tbWFuZEluc2VydE5ld2xpbmUiLCJlZGl0b3JTdGF0ZSIsImNvbnRlbnRTdGF0ZSIsInNwbGl0QmxvY2siLCJnZXRDdXJyZW50Q29udGVudCIsImdldFNlbGVjdGlvbiIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandInsertNewline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js":
/*!**************************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\n/**\n * See comment for `moveSelectionToStartOfBlock`.\n */ function keyCommandMoveSelectionToEndOfBlock(editorState) {\n    var selection = editorState.getSelection();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var textLength = content.getBlockForKey(endKey).getLength();\n    return EditorState.set(editorState, {\n        selection: selection.merge({\n            anchorKey: endKey,\n            anchorOffset: textLength,\n            focusKey: endKey,\n            focusOffset: textLength,\n            isBackward: false\n        }),\n        forceSelection: true\n    });\n}\nmodule.exports = keyCommandMoveSelectionToEndOfBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFDekM7O0NBRUMsR0FHRCxTQUFTQyxvQ0FBb0NDLFdBQVc7SUFDdEQsSUFBSUMsWUFBWUQsWUFBWUUsWUFBWTtJQUN4QyxJQUFJQyxTQUFTRixVQUFVRyxTQUFTO0lBQ2hDLElBQUlDLFVBQVVMLFlBQVlNLGlCQUFpQjtJQUMzQyxJQUFJQyxhQUFhRixRQUFRRyxjQUFjLENBQUNMLFFBQVFNLFNBQVM7SUFDekQsT0FBT1osWUFBWWEsR0FBRyxDQUFDVixhQUFhO1FBQ2xDQyxXQUFXQSxVQUFVVSxLQUFLLENBQUM7WUFDekJDLFdBQVdUO1lBQ1hVLGNBQWNOO1lBQ2RPLFVBQVVYO1lBQ1ZZLGFBQWFSO1lBQ2JTLFlBQVk7UUFDZDtRQUNBQyxnQkFBZ0I7SUFDbEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2suanM/Yzk5YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcbi8qKlxuICogU2VlIGNvbW1lbnQgZm9yIGBtb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2tgLlxuICovXG5cblxuZnVuY3Rpb24ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2soZWRpdG9yU3RhdGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uLmdldEVuZEtleSgpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gIHZhciB0ZXh0TGVuZ3RoID0gY29udGVudC5nZXRCbG9ja0ZvcktleShlbmRLZXkpLmdldExlbmd0aCgpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUuc2V0KGVkaXRvclN0YXRlLCB7XG4gICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24ubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBlbmRLZXksXG4gICAgICBhbmNob3JPZmZzZXQ6IHRleHRMZW5ndGgsXG4gICAgICBmb2N1c0tleTogZW5kS2V5LFxuICAgICAgZm9jdXNPZmZzZXQ6IHRleHRMZW5ndGgsXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pLFxuICAgIGZvcmNlU2VsZWN0aW9uOiB0cnVlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrOyJdLCJuYW1lcyI6WyJFZGl0b3JTdGF0ZSIsInJlcXVpcmUiLCJrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jayIsImVkaXRvclN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiZW5kS2V5IiwiZ2V0RW5kS2V5IiwiY29udGVudCIsImdldEN1cnJlbnRDb250ZW50IiwidGV4dExlbmd0aCIsImdldEJsb2NrRm9yS2V5IiwiZ2V0TGVuZ3RoIiwic2V0IiwibWVyZ2UiLCJhbmNob3JLZXkiLCJhbmNob3JPZmZzZXQiLCJmb2N1c0tleSIsImZvY3VzT2Zmc2V0IiwiaXNCYWNrd2FyZCIsImZvcmNlU2VsZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js":
/*!****************************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\n/**\n * Collapse selection at the start of the first selected block. This is used\n * for Firefox versions that attempt to navigate forward/backward instead of\n * moving the cursor. Other browsers are able to move the cursor natively.\n */ function keyCommandMoveSelectionToStartOfBlock(editorState) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    return EditorState.set(editorState, {\n        selection: selection.merge({\n            anchorKey: startKey,\n            anchorOffset: 0,\n            focusKey: startKey,\n            focusOffset: 0,\n            isBackward: false\n        }),\n        forceSelection: true\n    });\n}\nmodule.exports = keyCommandMoveSelectionToStartOfBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyx1RUFBZTtBQUN6Qzs7OztDQUlDLEdBR0QsU0FBU0Msc0NBQXNDQyxXQUFXO0lBQ3hELElBQUlDLFlBQVlELFlBQVlFLFlBQVk7SUFDeEMsSUFBSUMsV0FBV0YsVUFBVUcsV0FBVztJQUNwQyxPQUFPUCxZQUFZUSxHQUFHLENBQUNMLGFBQWE7UUFDbENDLFdBQVdBLFVBQVVLLEtBQUssQ0FBQztZQUN6QkMsV0FBV0o7WUFDWEssY0FBYztZQUNkQyxVQUFVTjtZQUNWTyxhQUFhO1lBQ2JDLFlBQVk7UUFDZDtRQUNBQyxnQkFBZ0I7SUFDbEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvU3RhcnRPZkJsb2NrLmpzP2IyOTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG4vKipcbiAqIENvbGxhcHNlIHNlbGVjdGlvbiBhdCB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IHNlbGVjdGVkIGJsb2NrLiBUaGlzIGlzIHVzZWRcbiAqIGZvciBGaXJlZm94IHZlcnNpb25zIHRoYXQgYXR0ZW1wdCB0byBuYXZpZ2F0ZSBmb3J3YXJkL2JhY2t3YXJkIGluc3RlYWQgb2ZcbiAqIG1vdmluZyB0aGUgY3Vyc29yLiBPdGhlciBicm93c2VycyBhcmUgYWJsZSB0byBtb3ZlIHRoZSBjdXJzb3IgbmF0aXZlbHkuXG4gKi9cblxuXG5mdW5jdGlvbiBrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvU3RhcnRPZkJsb2NrKGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHtcbiAgICBzZWxlY3Rpb246IHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgICBhbmNob3JLZXk6IHN0YXJ0S2V5LFxuICAgICAgYW5jaG9yT2Zmc2V0OiAwLFxuICAgICAgZm9jdXNLZXk6IHN0YXJ0S2V5LFxuICAgICAgZm9jdXNPZmZzZXQ6IDAsXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pLFxuICAgIGZvcmNlU2VsZWN0aW9uOiB0cnVlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2s7Il0sIm5hbWVzIjpbIkVkaXRvclN0YXRlIiwicmVxdWlyZSIsImtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2siLCJlZGl0b3JTdGF0ZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInN0YXJ0S2V5IiwiZ2V0U3RhcnRLZXkiLCJzZXQiLCJtZXJnZSIsImFuY2hvcktleSIsImFuY2hvck9mZnNldCIsImZvY3VzS2V5IiwiZm9jdXNPZmZzZXQiLCJpc0JhY2t3YXJkIiwiZm9yY2VTZWxlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandPlainBackspace.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar moveSelectionBackward = __webpack_require__(/*! ./moveSelectionBackward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Remove the selected range. If the cursor is collapsed, remove the preceding\n * character. This operation is Unicode-aware, so removing a single character\n * will remove a surrogate pair properly as well.\n */ function keyCommandPlainBackspace(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var content = strategyState.getCurrentContent();\n        var key = selection.getAnchorKey();\n        var offset = selection.getAnchorOffset();\n        var charBehind = content.getBlockForKey(key).getText()[offset - 1];\n        return moveSelectionBackward(strategyState, charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1);\n    }, \"backward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    var selection = editorState.getSelection();\n    return EditorState.push(editorState, afterRemoval.set(\"selectionBefore\", selection), selection.isCollapsed() ? \"backspace-character\" : \"remove-range\");\n}\nmodule.exports = keyCommandPlainBackspace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRQbGFpbkJhY2tzcGFjZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJRSx3QkFBd0JGLG1CQUFPQSxDQUFDLDJGQUF5QjtBQUU3RCxJQUFJRyx5QkFBeUJILG1CQUFPQSxDQUFDLDZGQUEwQjtBQUMvRDs7OztDQUlDLEdBR0QsU0FBU0kseUJBQXlCQyxXQUFXO0lBQzNDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsVUFBVUgsY0FBY0ksaUJBQWlCO1FBQzdDLElBQUlDLE1BQU1KLFVBQVVLLFlBQVk7UUFDaEMsSUFBSUMsU0FBU04sVUFBVU8sZUFBZTtRQUN0QyxJQUFJQyxhQUFhTixRQUFRTyxjQUFjLENBQUNMLEtBQUtNLE9BQU8sRUFBRSxDQUFDSixTQUFTLEVBQUU7UUFDbEUsT0FBT1osc0JBQXNCSyxlQUFlUyxhQUFhZixhQUFha0IsY0FBYyxDQUFDSCxZQUFZLEtBQUs7SUFDeEcsR0FBRztJQUVILElBQUlWLGlCQUFpQkQsWUFBWU0saUJBQWlCLElBQUk7UUFDcEQsT0FBT047SUFDVDtJQUVBLElBQUlHLFlBQVlILFlBQVlJLFlBQVk7SUFDeEMsT0FBT1YsWUFBWXFCLElBQUksQ0FBQ2YsYUFBYUMsYUFBYWUsR0FBRyxDQUFDLG1CQUFtQmIsWUFBWUEsVUFBVWMsV0FBVyxLQUFLLHdCQUF3QjtBQUN6STtBQUVBQyxPQUFPQyxPQUFPLEdBQUdwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZFBsYWluQmFja3NwYWNlLmpzPzFlYTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZVV0aWxzXCIpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkJhY2t3YXJkID0gcmVxdWlyZShcIi4vbW92ZVNlbGVjdGlvbkJhY2t3YXJkXCIpO1xuXG52YXIgcmVtb3ZlVGV4dFdpdGhTdHJhdGVneSA9IHJlcXVpcmUoXCIuL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3lcIik7XG4vKipcbiAqIFJlbW92ZSB0aGUgc2VsZWN0ZWQgcmFuZ2UuIElmIHRoZSBjdXJzb3IgaXMgY29sbGFwc2VkLCByZW1vdmUgdGhlIHByZWNlZGluZ1xuICogY2hhcmFjdGVyLiBUaGlzIG9wZXJhdGlvbiBpcyBVbmljb2RlLWF3YXJlLCBzbyByZW1vdmluZyBhIHNpbmdsZSBjaGFyYWN0ZXJcbiAqIHdpbGwgcmVtb3ZlIGEgc3Vycm9nYXRlIHBhaXIgcHJvcGVybHkgYXMgd2VsbC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRQbGFpbkJhY2tzcGFjZShlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgY29udGVudCA9IHN0cmF0ZWd5U3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gICAgdmFyIGNoYXJCZWhpbmQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0VGV4dCgpW29mZnNldCAtIDFdO1xuICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoc3RyYXRlZ3lTdGF0ZSwgY2hhckJlaGluZCA/IFVuaWNvZGVVdGlscy5nZXRVVEYxNkxlbmd0aChjaGFyQmVoaW5kLCAwKSA6IDEpO1xuICB9LCAnYmFja3dhcmQnKTtcblxuICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJSZW1vdmFsLnNldCgnc2VsZWN0aW9uQmVmb3JlJywgc2VsZWN0aW9uKSwgc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgPyAnYmFja3NwYWNlLWNoYXJhY3RlcicgOiAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZFBsYWluQmFja3NwYWNlOyJdLCJuYW1lcyI6WyJFZGl0b3JTdGF0ZSIsInJlcXVpcmUiLCJVbmljb2RlVXRpbHMiLCJtb3ZlU2VsZWN0aW9uQmFja3dhcmQiLCJyZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Iiwia2V5Q29tbWFuZFBsYWluQmFja3NwYWNlIiwiZWRpdG9yU3RhdGUiLCJhZnRlclJlbW92YWwiLCJzdHJhdGVneVN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiY29udGVudCIsImdldEN1cnJlbnRDb250ZW50Iiwia2V5IiwiZ2V0QW5jaG9yS2V5Iiwib2Zmc2V0IiwiZ2V0QW5jaG9yT2Zmc2V0IiwiY2hhckJlaGluZCIsImdldEJsb2NrRm9yS2V5IiwiZ2V0VGV4dCIsImdldFVURjE2TGVuZ3RoIiwicHVzaCIsInNldCIsImlzQ29sbGFwc2VkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandPlainDelete.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandPlainDelete.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar moveSelectionForward = __webpack_require__(/*! ./moveSelectionForward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Remove the selected range. If the cursor is collapsed, remove the following\n * character. This operation is Unicode-aware, so removing a single character\n * will remove a surrogate pair properly as well.\n */ function keyCommandPlainDelete(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var content = strategyState.getCurrentContent();\n        var key = selection.getAnchorKey();\n        var offset = selection.getAnchorOffset();\n        var charAhead = content.getBlockForKey(key).getText()[offset];\n        return moveSelectionForward(strategyState, charAhead ? UnicodeUtils.getUTF16Length(charAhead, 0) : 1);\n    }, \"forward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    var selection = editorState.getSelection();\n    return EditorState.push(editorState, afterRemoval.set(\"selectionBefore\", selection), selection.isCollapsed() ? \"delete-character\" : \"remove-range\");\n}\nmodule.exports = keyCommandPlainDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRQbGFpbkRlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJRSx1QkFBdUJGLG1CQUFPQSxDQUFDLHlGQUF3QjtBQUUzRCxJQUFJRyx5QkFBeUJILG1CQUFPQSxDQUFDLDZGQUEwQjtBQUMvRDs7OztDQUlDLEdBR0QsU0FBU0ksc0JBQXNCQyxXQUFXO0lBQ3hDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsVUFBVUgsY0FBY0ksaUJBQWlCO1FBQzdDLElBQUlDLE1BQU1KLFVBQVVLLFlBQVk7UUFDaEMsSUFBSUMsU0FBU04sVUFBVU8sZUFBZTtRQUN0QyxJQUFJQyxZQUFZTixRQUFRTyxjQUFjLENBQUNMLEtBQUtNLE9BQU8sRUFBRSxDQUFDSixPQUFPO1FBQzdELE9BQU9aLHFCQUFxQkssZUFBZVMsWUFBWWYsYUFBYWtCLGNBQWMsQ0FBQ0gsV0FBVyxLQUFLO0lBQ3JHLEdBQUc7SUFFSCxJQUFJVixpQkFBaUJELFlBQVlNLGlCQUFpQixJQUFJO1FBQ3BELE9BQU9OO0lBQ1Q7SUFFQSxJQUFJRyxZQUFZSCxZQUFZSSxZQUFZO0lBQ3hDLE9BQU9WLFlBQVlxQixJQUFJLENBQUNmLGFBQWFDLGFBQWFlLEdBQUcsQ0FBQyxtQkFBbUJiLFlBQVlBLFVBQVVjLFdBQVcsS0FBSyxxQkFBcUI7QUFDdEk7QUFFQUMsT0FBT0MsT0FBTyxHQUFHcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRQbGFpbkRlbGV0ZS5qcz84YTA0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgVW5pY29kZVV0aWxzID0gcmVxdWlyZShcImZianMvbGliL1VuaWNvZGVVdGlsc1wiKTtcblxudmFyIG1vdmVTZWxlY3Rpb25Gb3J3YXJkID0gcmVxdWlyZShcIi4vbW92ZVNlbGVjdGlvbkZvcndhcmRcIik7XG5cbnZhciByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5ID0gcmVxdWlyZShcIi4vcmVtb3ZlVGV4dFdpdGhTdHJhdGVneVwiKTtcbi8qKlxuICogUmVtb3ZlIHRoZSBzZWxlY3RlZCByYW5nZS4gSWYgdGhlIGN1cnNvciBpcyBjb2xsYXBzZWQsIHJlbW92ZSB0aGUgZm9sbG93aW5nXG4gKiBjaGFyYWN0ZXIuIFRoaXMgb3BlcmF0aW9uIGlzIFVuaWNvZGUtYXdhcmUsIHNvIHJlbW92aW5nIGEgc2luZ2xlIGNoYXJhY3RlclxuICogd2lsbCByZW1vdmUgYSBzdXJyb2dhdGUgcGFpciBwcm9wZXJseSBhcyB3ZWxsLlxuICovXG5cblxuZnVuY3Rpb24ga2V5Q29tbWFuZFBsYWluRGVsZXRlKGVkaXRvclN0YXRlKSB7XG4gIHZhciBhZnRlclJlbW92YWwgPSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBmdW5jdGlvbiAoc3RyYXRlZ3lTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdHJhdGVneVN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBjb250ZW50ID0gc3RyYXRlZ3lTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBrZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gICAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKTtcbiAgICB2YXIgY2hhckFoZWFkID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpLmdldFRleHQoKVtvZmZzZXRdO1xuICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uRm9yd2FyZChzdHJhdGVneVN0YXRlLCBjaGFyQWhlYWQgPyBVbmljb2RlVXRpbHMuZ2V0VVRGMTZMZW5ndGgoY2hhckFoZWFkLCAwKSA6IDEpO1xuICB9LCAnZm9yd2FyZCcpO1xuXG4gIGlmIChhZnRlclJlbW92YWwgPT09IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwuc2V0KCdzZWxlY3Rpb25CZWZvcmUnLCBzZWxlY3Rpb24pLCBzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSA/ICdkZWxldGUtY2hhcmFjdGVyJyA6ICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kUGxhaW5EZWxldGU7Il0sIm5hbWVzIjpbIkVkaXRvclN0YXRlIiwicmVxdWlyZSIsIlVuaWNvZGVVdGlscyIsIm1vdmVTZWxlY3Rpb25Gb3J3YXJkIiwicmVtb3ZlVGV4dFdpdGhTdHJhdGVneSIsImtleUNvbW1hbmRQbGFpbkRlbGV0ZSIsImVkaXRvclN0YXRlIiwiYWZ0ZXJSZW1vdmFsIiwic3RyYXRlZ3lTdGF0ZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsImtleSIsImdldEFuY2hvcktleSIsIm9mZnNldCIsImdldEFuY2hvck9mZnNldCIsImNoYXJBaGVhZCIsImdldEJsb2NrRm9yS2V5IiwiZ2V0VGV4dCIsImdldFVURjE2TGVuZ3RoIiwicHVzaCIsInNldCIsImlzQ29sbGFwc2VkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandPlainDelete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandTransposeCharacters.js":
/*!********************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandTransposeCharacters.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\n/**\n * Transpose the characters on either side of a collapsed cursor, or\n * if the cursor is at the end of the block, transpose the last two\n * characters.\n */ function keyCommandTransposeCharacters(editorState) {\n    var selection = editorState.getSelection();\n    if (!selection.isCollapsed()) {\n        return editorState;\n    }\n    var offset = selection.getAnchorOffset();\n    if (offset === 0) {\n        return editorState;\n    }\n    var blockKey = selection.getAnchorKey();\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(blockKey);\n    var length = block.getLength(); // Nothing to transpose if there aren't two characters.\n    if (length <= 1) {\n        return editorState;\n    }\n    var removalRange;\n    var finalSelection;\n    if (offset === length) {\n        // The cursor is at the end of the block. Swap the last two characters.\n        removalRange = selection.set(\"anchorOffset\", offset - 1);\n        finalSelection = selection;\n    } else {\n        removalRange = selection.set(\"focusOffset\", offset + 1);\n        finalSelection = removalRange.set(\"anchorOffset\", offset + 1);\n    } // Extract the character to move as a fragment. This preserves its\n    // styling and entity, if any.\n    var movedFragment = getContentStateFragment(content, removalRange);\n    var afterRemoval = DraftModifier.removeRange(content, removalRange, \"backward\"); // After the removal, the insertion target is one character back.\n    var selectionAfter = afterRemoval.getSelectionAfter();\n    var targetOffset = selectionAfter.getAnchorOffset() - 1;\n    var targetRange = selectionAfter.merge({\n        anchorOffset: targetOffset,\n        focusOffset: targetOffset\n    });\n    var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n    var newEditorState = EditorState.push(editorState, afterInsert, \"insert-fragment\");\n    return EditorState.acceptSelection(newEditorState, finalSelection);\n}\nmodule.exports = keyCommandTransposeCharacters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQywyRUFBaUI7QUFFN0MsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUUsMEJBQTBCRixtQkFBT0EsQ0FBQywrRkFBMkI7QUFDakU7Ozs7Q0FJQyxHQUdELFNBQVNHLDhCQUE4QkMsV0FBVztJQUNoRCxJQUFJQyxZQUFZRCxZQUFZRSxZQUFZO0lBRXhDLElBQUksQ0FBQ0QsVUFBVUUsV0FBVyxJQUFJO1FBQzVCLE9BQU9IO0lBQ1Q7SUFFQSxJQUFJSSxTQUFTSCxVQUFVSSxlQUFlO0lBRXRDLElBQUlELFdBQVcsR0FBRztRQUNoQixPQUFPSjtJQUNUO0lBRUEsSUFBSU0sV0FBV0wsVUFBVU0sWUFBWTtJQUNyQyxJQUFJQyxVQUFVUixZQUFZUyxpQkFBaUI7SUFDM0MsSUFBSUMsUUFBUUYsUUFBUUcsY0FBYyxDQUFDTDtJQUNuQyxJQUFJTSxTQUFTRixNQUFNRyxTQUFTLElBQUksdURBQXVEO0lBRXZGLElBQUlELFVBQVUsR0FBRztRQUNmLE9BQU9aO0lBQ1Q7SUFFQSxJQUFJYztJQUNKLElBQUlDO0lBRUosSUFBSVgsV0FBV1EsUUFBUTtRQUNyQix1RUFBdUU7UUFDdkVFLGVBQWViLFVBQVVlLEdBQUcsQ0FBQyxnQkFBZ0JaLFNBQVM7UUFDdERXLGlCQUFpQmQ7SUFDbkIsT0FBTztRQUNMYSxlQUFlYixVQUFVZSxHQUFHLENBQUMsZUFBZVosU0FBUztRQUNyRFcsaUJBQWlCRCxhQUFhRSxHQUFHLENBQUMsZ0JBQWdCWixTQUFTO0lBQzdELEVBQUUsa0VBQWtFO0lBQ3BFLDhCQUE4QjtJQUc5QixJQUFJYSxnQkFBZ0JuQix3QkFBd0JVLFNBQVNNO0lBQ3JELElBQUlJLGVBQWV2QixjQUFjd0IsV0FBVyxDQUFDWCxTQUFTTSxjQUFjLGFBQWEsaUVBQWlFO0lBRWxKLElBQUlNLGlCQUFpQkYsYUFBYUcsaUJBQWlCO0lBQ25ELElBQUlDLGVBQWVGLGVBQWVmLGVBQWUsS0FBSztJQUN0RCxJQUFJa0IsY0FBY0gsZUFBZUksS0FBSyxDQUFDO1FBQ3JDQyxjQUFjSDtRQUNkSSxhQUFhSjtJQUNmO0lBQ0EsSUFBSUssY0FBY2hDLGNBQWNpQyxtQkFBbUIsQ0FBQ1YsY0FBY0ssYUFBYU47SUFDL0UsSUFBSVksaUJBQWlCaEMsWUFBWWlDLElBQUksQ0FBQzlCLGFBQWEyQixhQUFhO0lBQ2hFLE9BQU85QixZQUFZa0MsZUFBZSxDQUFDRixnQkFBZ0JkO0FBQ3JEO0FBRUFpQixPQUFPQyxPQUFPLEdBQUdsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnMuanM/M2JkOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoXCIuL0RyYWZ0TW9kaWZpZXJcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQgPSByZXF1aXJlKFwiLi9nZXRDb250ZW50U3RhdGVGcmFnbWVudFwiKTtcbi8qKlxuICogVHJhbnNwb3NlIHRoZSBjaGFyYWN0ZXJzIG9uIGVpdGhlciBzaWRlIG9mIGEgY29sbGFwc2VkIGN1cnNvciwgb3JcbiAqIGlmIHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBvZiB0aGUgYmxvY2ssIHRyYW5zcG9zZSB0aGUgbGFzdCB0d29cbiAqIGNoYXJhY3RlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBrZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycyhlZGl0b3JTdGF0ZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG5cbiAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHZhciBibG9ja0tleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICB2YXIgYmxvY2sgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGJsb2NrS2V5KTtcbiAgdmFyIGxlbmd0aCA9IGJsb2NrLmdldExlbmd0aCgpOyAvLyBOb3RoaW5nIHRvIHRyYW5zcG9zZSBpZiB0aGVyZSBhcmVuJ3QgdHdvIGNoYXJhY3RlcnMuXG5cbiAgaWYgKGxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgdmFyIHJlbW92YWxSYW5nZTtcbiAgdmFyIGZpbmFsU2VsZWN0aW9uO1xuXG4gIGlmIChvZmZzZXQgPT09IGxlbmd0aCkge1xuICAgIC8vIFRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBvZiB0aGUgYmxvY2suIFN3YXAgdGhlIGxhc3QgdHdvIGNoYXJhY3RlcnMuXG4gICAgcmVtb3ZhbFJhbmdlID0gc2VsZWN0aW9uLnNldCgnYW5jaG9yT2Zmc2V0Jywgb2Zmc2V0IC0gMSk7XG4gICAgZmluYWxTZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZhbFJhbmdlID0gc2VsZWN0aW9uLnNldCgnZm9jdXNPZmZzZXQnLCBvZmZzZXQgKyAxKTtcbiAgICBmaW5hbFNlbGVjdGlvbiA9IHJlbW92YWxSYW5nZS5zZXQoJ2FuY2hvck9mZnNldCcsIG9mZnNldCArIDEpO1xuICB9IC8vIEV4dHJhY3QgdGhlIGNoYXJhY3RlciB0byBtb3ZlIGFzIGEgZnJhZ21lbnQuIFRoaXMgcHJlc2VydmVzIGl0c1xuICAvLyBzdHlsaW5nIGFuZCBlbnRpdHksIGlmIGFueS5cblxuXG4gIHZhciBtb3ZlZEZyYWdtZW50ID0gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQoY29udGVudCwgcmVtb3ZhbFJhbmdlKTtcbiAgdmFyIGFmdGVyUmVtb3ZhbCA9IERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoY29udGVudCwgcmVtb3ZhbFJhbmdlLCAnYmFja3dhcmQnKTsgLy8gQWZ0ZXIgdGhlIHJlbW92YWwsIHRoZSBpbnNlcnRpb24gdGFyZ2V0IGlzIG9uZSBjaGFyYWN0ZXIgYmFjay5cblxuICB2YXIgc2VsZWN0aW9uQWZ0ZXIgPSBhZnRlclJlbW92YWwuZ2V0U2VsZWN0aW9uQWZ0ZXIoKTtcbiAgdmFyIHRhcmdldE9mZnNldCA9IHNlbGVjdGlvbkFmdGVyLmdldEFuY2hvck9mZnNldCgpIC0gMTtcbiAgdmFyIHRhcmdldFJhbmdlID0gc2VsZWN0aW9uQWZ0ZXIubWVyZ2Uoe1xuICAgIGFuY2hvck9mZnNldDogdGFyZ2V0T2Zmc2V0LFxuICAgIGZvY3VzT2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSk7XG4gIHZhciBhZnRlckluc2VydCA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVdpdGhGcmFnbWVudChhZnRlclJlbW92YWwsIHRhcmdldFJhbmdlLCBtb3ZlZEZyYWdtZW50KTtcbiAgdmFyIG5ld0VkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJJbnNlcnQsICdpbnNlcnQtZnJhZ21lbnQnKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLmFjY2VwdFNlbGVjdGlvbihuZXdFZGl0b3JTdGF0ZSwgZmluYWxTZWxlY3Rpb24pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzOyJdLCJuYW1lcyI6WyJEcmFmdE1vZGlmaWVyIiwicmVxdWlyZSIsIkVkaXRvclN0YXRlIiwiZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQiLCJrZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycyIsImVkaXRvclN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiLCJvZmZzZXQiLCJnZXRBbmNob3JPZmZzZXQiLCJibG9ja0tleSIsImdldEFuY2hvcktleSIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsImJsb2NrIiwiZ2V0QmxvY2tGb3JLZXkiLCJsZW5ndGgiLCJnZXRMZW5ndGgiLCJyZW1vdmFsUmFuZ2UiLCJmaW5hbFNlbGVjdGlvbiIsInNldCIsIm1vdmVkRnJhZ21lbnQiLCJhZnRlclJlbW92YWwiLCJyZW1vdmVSYW5nZSIsInNlbGVjdGlvbkFmdGVyIiwiZ2V0U2VsZWN0aW9uQWZ0ZXIiLCJ0YXJnZXRPZmZzZXQiLCJ0YXJnZXRSYW5nZSIsIm1lcmdlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNPZmZzZXQiLCJhZnRlckluc2VydCIsInJlcGxhY2VXaXRoRnJhZ21lbnQiLCJuZXdFZGl0b3JTdGF0ZSIsInB1c2giLCJhY2NlcHRTZWxlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandTransposeCharacters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandUndo.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandUndo.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nfunction keyCommandUndo(e, editorState, updateFn) {\n    var undoneState = EditorState.undo(editorState); // If the last change to occur was a spellcheck change, allow the undo\n    // event to fall through to the browser. This allows the browser to record\n    // the unwanted change, which should soon lead it to learn not to suggest\n    // the correction again.\n    if (editorState.getLastChangeType() === \"spellcheck-change\") {\n        var nativelyRenderedContent = undoneState.getCurrentContent();\n        updateFn(EditorState.set(undoneState, {\n            nativelyRenderedContent: nativelyRenderedContent\n        }));\n        return;\n    } // Otheriwse, manage the undo behavior manually.\n    e.preventDefault();\n    if (!editorState.getNativelyRenderedContent()) {\n        updateFn(undoneState);\n        return;\n    } // Trigger a re-render with the current content state to ensure that the\n    // component tree has up-to-date props for comparison.\n    updateFn(EditorState.set(editorState, {\n        nativelyRenderedContent: null\n    })); // Wait to ensure that the re-render has occurred before performing\n    // the undo action.\n    setTimeout(function() {\n        updateFn(undoneState);\n    }, 0);\n}\nmodule.exports = keyCommandUndo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRVbmRvLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsU0FBU0MsZUFBZUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLFFBQVE7SUFDOUMsSUFBSUMsY0FBY04sWUFBWU8sSUFBSSxDQUFDSCxjQUFjLHNFQUFzRTtJQUN2SCwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLHdCQUF3QjtJQUV4QixJQUFJQSxZQUFZSSxpQkFBaUIsT0FBTyxxQkFBcUI7UUFDM0QsSUFBSUMsMEJBQTBCSCxZQUFZSSxpQkFBaUI7UUFDM0RMLFNBQVNMLFlBQVlXLEdBQUcsQ0FBQ0wsYUFBYTtZQUNwQ0cseUJBQXlCQTtRQUMzQjtRQUNBO0lBQ0YsRUFBRSxnREFBZ0Q7SUFHbEROLEVBQUVTLGNBQWM7SUFFaEIsSUFBSSxDQUFDUixZQUFZUywwQkFBMEIsSUFBSTtRQUM3Q1IsU0FBU0M7UUFDVDtJQUNGLEVBQUUsd0VBQXdFO0lBQzFFLHNEQUFzRDtJQUd0REQsU0FBU0wsWUFBWVcsR0FBRyxDQUFDUCxhQUFhO1FBQ3BDSyx5QkFBeUI7SUFDM0IsS0FBSyxtRUFBbUU7SUFDeEUsbUJBQW1CO0lBRW5CSyxXQUFXO1FBQ1RULFNBQVNDO0lBQ1gsR0FBRztBQUNMO0FBRUFTLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRVbmRvLmpzPzgwNDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRVbmRvKGUsIGVkaXRvclN0YXRlLCB1cGRhdGVGbikge1xuICB2YXIgdW5kb25lU3RhdGUgPSBFZGl0b3JTdGF0ZS51bmRvKGVkaXRvclN0YXRlKTsgLy8gSWYgdGhlIGxhc3QgY2hhbmdlIHRvIG9jY3VyIHdhcyBhIHNwZWxsY2hlY2sgY2hhbmdlLCBhbGxvdyB0aGUgdW5kb1xuICAvLyBldmVudCB0byBmYWxsIHRocm91Z2ggdG8gdGhlIGJyb3dzZXIuIFRoaXMgYWxsb3dzIHRoZSBicm93c2VyIHRvIHJlY29yZFxuICAvLyB0aGUgdW53YW50ZWQgY2hhbmdlLCB3aGljaCBzaG91bGQgc29vbiBsZWFkIGl0IHRvIGxlYXJuIG5vdCB0byBzdWdnZXN0XG4gIC8vIHRoZSBjb3JyZWN0aW9uIGFnYWluLlxuXG4gIGlmIChlZGl0b3JTdGF0ZS5nZXRMYXN0Q2hhbmdlVHlwZSgpID09PSAnc3BlbGxjaGVjay1jaGFuZ2UnKSB7XG4gICAgdmFyIG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50ID0gdW5kb25lU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB1cGRhdGVGbihFZGl0b3JTdGF0ZS5zZXQodW5kb25lU3RhdGUsIHtcbiAgICAgIG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50OiBuYXRpdmVseVJlbmRlcmVkQ29udGVudFxuICAgIH0pKTtcbiAgICByZXR1cm47XG4gIH0gLy8gT3RoZXJpd3NlLCBtYW5hZ2UgdGhlIHVuZG8gYmVoYXZpb3IgbWFudWFsbHkuXG5cblxuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgaWYgKCFlZGl0b3JTdGF0ZS5nZXROYXRpdmVseVJlbmRlcmVkQ29udGVudCgpKSB7XG4gICAgdXBkYXRlRm4odW5kb25lU3RhdGUpO1xuICAgIHJldHVybjtcbiAgfSAvLyBUcmlnZ2VyIGEgcmUtcmVuZGVyIHdpdGggdGhlIGN1cnJlbnQgY29udGVudCBzdGF0ZSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgLy8gY29tcG9uZW50IHRyZWUgaGFzIHVwLXRvLWRhdGUgcHJvcHMgZm9yIGNvbXBhcmlzb24uXG5cblxuICB1cGRhdGVGbihFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHtcbiAgICBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbnVsbFxuICB9KSk7IC8vIFdhaXQgdG8gZW5zdXJlIHRoYXQgdGhlIHJlLXJlbmRlciBoYXMgb2NjdXJyZWQgYmVmb3JlIHBlcmZvcm1pbmdcbiAgLy8gdGhlIHVuZG8gYWN0aW9uLlxuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHVwZGF0ZUZuKHVuZG9uZVN0YXRlKTtcbiAgfSwgMCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZFVuZG87Il0sIm5hbWVzIjpbIkVkaXRvclN0YXRlIiwicmVxdWlyZSIsImtleUNvbW1hbmRVbmRvIiwiZSIsImVkaXRvclN0YXRlIiwidXBkYXRlRm4iLCJ1bmRvbmVTdGF0ZSIsInVuZG8iLCJnZXRMYXN0Q2hhbmdlVHlwZSIsIm5hdGl2ZWx5UmVuZGVyZWRDb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJzZXQiLCJwcmV2ZW50RGVmYXVsdCIsImdldE5hdGl2ZWx5UmVuZGVyZWRDb250ZW50Iiwic2V0VGltZW91dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandUndo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/modifyBlockForContentState.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar Map = Immutable.Map;\nfunction modifyBlockForContentState(contentState, selectionState, operation) {\n    var startKey = selectionState.getStartKey();\n    var endKey = selectionState.getEndKey();\n    var blockMap = contentState.getBlockMap();\n    var newBlocks = blockMap.toSeq().skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).concat(Map([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ])).map(operation);\n    return contentState.merge({\n        blockMap: blockMap.merge(newBlocks),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = modifyBlockForContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUMsTUFBTUYsVUFBVUUsR0FBRztBQUV2QixTQUFTQywyQkFBMkJDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxTQUFTO0lBQ3pFLElBQUlDLFdBQVdGLGVBQWVHLFdBQVc7SUFDekMsSUFBSUMsU0FBU0osZUFBZUssU0FBUztJQUNyQyxJQUFJQyxXQUFXUCxhQUFhUSxXQUFXO0lBQ3ZDLElBQUlDLFlBQVlGLFNBQVNHLEtBQUssR0FBR0MsU0FBUyxDQUFDLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUN2RCxPQUFPQSxNQUFNVjtJQUNmLEdBQUdXLFNBQVMsQ0FBQyxTQUFVRixDQUFDLEVBQUVDLENBQUM7UUFDekIsT0FBT0EsTUFBTVI7SUFDZixHQUFHVSxNQUFNLENBQUNqQixJQUFJO1FBQUM7WUFBQ087WUFBUUUsU0FBU1MsR0FBRyxDQUFDWDtTQUFRO0tBQUMsR0FBR1ksR0FBRyxDQUFDZjtJQUNyRCxPQUFPRixhQUFha0IsS0FBSyxDQUFDO1FBQ3hCWCxVQUFVQSxTQUFTVyxLQUFLLENBQUNUO1FBQ3pCVSxpQkFBaUJsQjtRQUNqQm1CLGdCQUFnQm5CO0lBQ2xCO0FBQ0Y7QUFFQW9CLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9tb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZS5qcz82MzJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG52YXIgTWFwID0gSW1tdXRhYmxlLk1hcDtcblxuZnVuY3Rpb24gbW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgb3BlcmF0aW9uKSB7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRLZXkoKTtcbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBuZXdCbG9ja3MgPSBibG9ja01hcC50b1NlcSgpLnNraXBVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBzdGFydEtleTtcbiAgfSkudGFrZVVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IGVuZEtleTtcbiAgfSkuY29uY2F0KE1hcChbW2VuZEtleSwgYmxvY2tNYXAuZ2V0KGVuZEtleSldXSkpLm1hcChvcGVyYXRpb24pO1xuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAubWVyZ2UobmV3QmxvY2tzKSxcbiAgICBzZWxlY3Rpb25CZWZvcmU6IHNlbGVjdGlvblN0YXRlLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25TdGF0ZVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZTsiXSwibmFtZXMiOlsiSW1tdXRhYmxlIiwicmVxdWlyZSIsIk1hcCIsIm1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlIiwiY29udGVudFN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJvcGVyYXRpb24iLCJzdGFydEtleSIsImdldFN0YXJ0S2V5IiwiZW5kS2V5IiwiZ2V0RW5kS2V5IiwiYmxvY2tNYXAiLCJnZXRCbG9ja01hcCIsIm5ld0Jsb2NrcyIsInRvU2VxIiwic2tpcFVudGlsIiwiXyIsImsiLCJ0YWtlVW50aWwiLCJjb25jYXQiLCJnZXQiLCJtYXAiLCJtZXJnZSIsInNlbGVjdGlvbkJlZm9yZSIsInNlbGVjdGlvbkFmdGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/moveBlockInContentState.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/moveBlockInContentState.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar getNextDelimiterBlockKey = __webpack_require__(/*! ./getNextDelimiterBlockKey */ \"(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar OrderedMap = Immutable.OrderedMap, List = Immutable.List;\nvar transformBlock = function transformBlock(key, blockMap, func) {\n    if (!key) {\n        return;\n    }\n    var block = blockMap.get(key);\n    if (!block) {\n        return;\n    }\n    blockMap.set(key, func(block));\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, originalBlockToBeMoved, originalTargetBlock, insertionMode, isExperimentalTreeBlock) {\n    if (!isExperimentalTreeBlock) {\n        return blockMap;\n    } // possible values of 'insertionMode' are: 'after', 'before'\n    var isInsertedAfterTarget = insertionMode === \"after\";\n    var originalBlockKey = originalBlockToBeMoved.getKey();\n    var originalTargetKey = originalTargetBlock.getKey();\n    var originalParentKey = originalBlockToBeMoved.getParentKey();\n    var originalNextSiblingKey = originalBlockToBeMoved.getNextSiblingKey();\n    var originalPrevSiblingKey = originalBlockToBeMoved.getPrevSiblingKey();\n    var newParentKey = originalTargetBlock.getParentKey();\n    var newNextSiblingKey = isInsertedAfterTarget ? originalTargetBlock.getNextSiblingKey() : originalTargetKey;\n    var newPrevSiblingKey = isInsertedAfterTarget ? originalTargetKey : originalTargetBlock.getPrevSiblingKey();\n    return blockMap.withMutations(function(blocks) {\n        // update old parent\n        transformBlock(originalParentKey, blocks, function(block) {\n            var parentChildrenList = block.getChildKeys();\n            return block.merge({\n                children: parentChildrenList[\"delete\"](parentChildrenList.indexOf(originalBlockKey))\n            });\n        }); // update old prev\n        transformBlock(originalPrevSiblingKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: originalNextSiblingKey\n            });\n        }); // update old next\n        transformBlock(originalNextSiblingKey, blocks, function(block) {\n            return block.merge({\n                prevSibling: originalPrevSiblingKey\n            });\n        }); // update new next\n        transformBlock(newNextSiblingKey, blocks, function(block) {\n            return block.merge({\n                prevSibling: originalBlockKey\n            });\n        }); // update new prev\n        transformBlock(newPrevSiblingKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: originalBlockKey\n            });\n        }); // update new parent\n        transformBlock(newParentKey, blocks, function(block) {\n            var newParentChildrenList = block.getChildKeys();\n            var targetBlockIndex = newParentChildrenList.indexOf(originalTargetKey);\n            var insertionIndex = isInsertedAfterTarget ? targetBlockIndex + 1 : targetBlockIndex !== 0 ? targetBlockIndex - 1 : 0;\n            var newChildrenArray = newParentChildrenList.toArray();\n            newChildrenArray.splice(insertionIndex, 0, originalBlockKey);\n            return block.merge({\n                children: List(newChildrenArray)\n            });\n        }); // update block\n        transformBlock(originalBlockKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: newNextSiblingKey,\n                prevSibling: newPrevSiblingKey,\n                parent: newParentKey\n            });\n        });\n    });\n};\nvar moveBlockInContentState = function moveBlockInContentState(contentState, blockToBeMoved, targetBlock, insertionMode) {\n    !(insertionMode !== \"replace\") ?  true ? invariant(false, \"Replacing blocks is not supported.\") : 0 : void 0;\n    var targetKey = targetBlock.getKey();\n    var blockKey = blockToBeMoved.getKey();\n    !(blockKey !== targetKey) ?  true ? invariant(false, \"Block cannot be moved next to itself.\") : 0 : void 0;\n    var blockMap = contentState.getBlockMap();\n    var isExperimentalTreeBlock = blockToBeMoved instanceof ContentBlockNode;\n    var blocksToBeMoved = [\n        blockToBeMoved\n    ];\n    var blockMapWithoutBlocksToBeMoved = blockMap[\"delete\"](blockKey);\n    if (isExperimentalTreeBlock) {\n        blocksToBeMoved = [];\n        blockMapWithoutBlocksToBeMoved = blockMap.withMutations(function(blocks) {\n            var nextSiblingKey = blockToBeMoved.getNextSiblingKey();\n            var nextDelimiterBlockKey = getNextDelimiterBlockKey(blockToBeMoved, blocks);\n            blocks.toSeq().skipUntil(function(block) {\n                return block.getKey() === blockKey;\n            }).takeWhile(function(block) {\n                var key = block.getKey();\n                var isBlockToBeMoved = key === blockKey;\n                var hasNextSiblingAndIsNotNextSibling = nextSiblingKey && key !== nextSiblingKey;\n                var doesNotHaveNextSiblingAndIsNotDelimiter = !nextSiblingKey && block.getParentKey() && (!nextDelimiterBlockKey || key !== nextDelimiterBlockKey);\n                return !!(isBlockToBeMoved || hasNextSiblingAndIsNotNextSibling || doesNotHaveNextSiblingAndIsNotDelimiter);\n            }).forEach(function(block) {\n                blocksToBeMoved.push(block);\n                blocks[\"delete\"](block.getKey());\n            });\n        });\n    }\n    var blocksBefore = blockMapWithoutBlocksToBeMoved.toSeq().takeUntil(function(v) {\n        return v === targetBlock;\n    });\n    var blocksAfter = blockMapWithoutBlocksToBeMoved.toSeq().skipUntil(function(v) {\n        return v === targetBlock;\n    }).skip(1);\n    var slicedBlocks = blocksToBeMoved.map(function(block) {\n        return [\n            block.getKey(),\n            block\n        ];\n    });\n    var newBlocks = OrderedMap();\n    if (insertionMode === \"before\") {\n        var blockBefore = contentState.getBlockBefore(targetKey);\n        !(!blockBefore || blockBefore.getKey() !== blockToBeMoved.getKey()) ?  true ? invariant(false, \"Block cannot be moved next to itself.\") : 0 : void 0;\n        newBlocks = blocksBefore.concat([].concat(slicedBlocks, [\n            [\n                targetKey,\n                targetBlock\n            ]\n        ]), blocksAfter).toOrderedMap();\n    } else if (insertionMode === \"after\") {\n        var blockAfter = contentState.getBlockAfter(targetKey);\n        !(!blockAfter || blockAfter.getKey() !== blockKey) ?  true ? invariant(false, \"Block cannot be moved next to itself.\") : 0 : void 0;\n        newBlocks = blocksBefore.concat([\n            [\n                targetKey,\n                targetBlock\n            ]\n        ].concat(slicedBlocks), blocksAfter).toOrderedMap();\n    }\n    return contentState.merge({\n        blockMap: updateBlockMapLinks(newBlocks, blockToBeMoved, targetBlock, insertionMode, isExperimentalTreeBlock),\n        selectionBefore: contentState.getSelectionAfter(),\n        selectionAfter: contentState.getSelectionAfter().merge({\n            anchorKey: blockKey,\n            focusKey: blockKey\n        })\n    });\n};\nmodule.exports = moveBlockInContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/moveBlockInContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/moveSelectionBackward.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar warning = __webpack_require__(/*! fbjs/lib/warning */ \"(ssr)/./node_modules/fbjs/lib/warning.js\");\n/**\n * Given a collapsed selection, move the focus `maxDistance` backward within\n * the selected block. If the selection will go beyond the start of the block,\n * move focus to the end of the previous block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */ function moveSelectionBackward(editorState, maxDistance) {\n    var selection = editorState.getSelection(); // Should eventually make this an invariant\n     true ? warning(selection.isCollapsed(), \"moveSelectionBackward should only be called with a collapsed SelectionState\") : 0;\n    var content = editorState.getCurrentContent();\n    var key = selection.getStartKey();\n    var offset = selection.getStartOffset();\n    var focusKey = key;\n    var focusOffset = 0;\n    if (maxDistance > offset) {\n        var keyBefore = content.getKeyBefore(key);\n        if (keyBefore == null) {\n            focusKey = key;\n        } else {\n            focusKey = keyBefore;\n            var blockBefore = content.getBlockForKey(keyBefore);\n            focusOffset = blockBefore.getText().length;\n        }\n    } else {\n        focusOffset = offset - maxDistance;\n    }\n    return selection.merge({\n        focusKey: focusKey,\n        focusOffset: focusOffset,\n        isBackward: true\n    });\n}\nmodule.exports = moveSelectionBackward;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vdmVTZWxlY3Rpb25CYWNrd2FyZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFVBQVVDLG1CQUFPQSxDQUFDLGtFQUFrQjtBQUN4Qzs7Ozs7OztDQU9DLEdBR0QsU0FBU0Msc0JBQXNCQyxXQUFXLEVBQUVDLFdBQVc7SUFDckQsSUFBSUMsWUFBWUYsWUFBWUcsWUFBWSxJQUFJLDJDQUEyQztJQXhCekYsS0EwQnVDLEdBQUdOLFFBQVFLLFVBQVVFLFdBQVcsSUFBSSxpRkFBaUYsQ0FBTTtJQUNoSyxJQUFJQyxVQUFVTCxZQUFZTSxpQkFBaUI7SUFDM0MsSUFBSUMsTUFBTUwsVUFBVU0sV0FBVztJQUMvQixJQUFJQyxTQUFTUCxVQUFVUSxjQUFjO0lBQ3JDLElBQUlDLFdBQVdKO0lBQ2YsSUFBSUssY0FBYztJQUVsQixJQUFJWCxjQUFjUSxRQUFRO1FBQ3hCLElBQUlJLFlBQVlSLFFBQVFTLFlBQVksQ0FBQ1A7UUFFckMsSUFBSU0sYUFBYSxNQUFNO1lBQ3JCRixXQUFXSjtRQUNiLE9BQU87WUFDTEksV0FBV0U7WUFDWCxJQUFJRSxjQUFjVixRQUFRVyxjQUFjLENBQUNIO1lBQ3pDRCxjQUFjRyxZQUFZRSxPQUFPLEdBQUdDLE1BQU07UUFDNUM7SUFDRixPQUFPO1FBQ0xOLGNBQWNILFNBQVNSO0lBQ3pCO0lBRUEsT0FBT0MsVUFBVWlCLEtBQUssQ0FBQztRQUNyQlIsVUFBVUE7UUFDVkMsYUFBYUE7UUFDYlEsWUFBWTtJQUNkO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vdmVTZWxlY3Rpb25CYWNrd2FyZC5qcz9jOTFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG4vKipcbiAqIEdpdmVuIGEgY29sbGFwc2VkIHNlbGVjdGlvbiwgbW92ZSB0aGUgZm9jdXMgYG1heERpc3RhbmNlYCBiYWNrd2FyZCB3aXRoaW5cbiAqIHRoZSBzZWxlY3RlZCBibG9jay4gSWYgdGhlIHNlbGVjdGlvbiB3aWxsIGdvIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhlIGJsb2NrLFxuICogbW92ZSBmb2N1cyB0byB0aGUgZW5kIG9mIHRoZSBwcmV2aW91cyBibG9jaywgYnV0IG5vIGZ1cnRoZXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBub3QgVW5pY29kZS1hd2FyZSwgc28gc3Vycm9nYXRlIHBhaXJzIHdpbGwgYmUgdHJlYXRlZFxuICogYXMgaGF2aW5nIGxlbmd0aCAyLlxuICovXG5cblxuZnVuY3Rpb24gbW92ZVNlbGVjdGlvbkJhY2t3YXJkKGVkaXRvclN0YXRlLCBtYXhEaXN0YW5jZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7IC8vIFNob3VsZCBldmVudHVhbGx5IG1ha2UgdGhpcyBhbiBpbnZhcmlhbnRcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpLCAnbW92ZVNlbGVjdGlvbkJhY2t3YXJkIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgY29sbGFwc2VkIFNlbGVjdGlvblN0YXRlJykgOiB2b2lkIDA7XG4gIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBmb2N1c0tleSA9IGtleTtcbiAgdmFyIGZvY3VzT2Zmc2V0ID0gMDtcblxuICBpZiAobWF4RGlzdGFuY2UgPiBvZmZzZXQpIHtcbiAgICB2YXIga2V5QmVmb3JlID0gY29udGVudC5nZXRLZXlCZWZvcmUoa2V5KTtcblxuICAgIGlmIChrZXlCZWZvcmUgPT0gbnVsbCkge1xuICAgICAgZm9jdXNLZXkgPSBrZXk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvY3VzS2V5ID0ga2V5QmVmb3JlO1xuICAgICAgdmFyIGJsb2NrQmVmb3JlID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXlCZWZvcmUpO1xuICAgICAgZm9jdXNPZmZzZXQgPSBibG9ja0JlZm9yZS5nZXRUZXh0KCkubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb2N1c09mZnNldCA9IG9mZnNldCAtIG1heERpc3RhbmNlO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgZm9jdXNLZXk6IGZvY3VzS2V5LFxuICAgIGZvY3VzT2Zmc2V0OiBmb2N1c09mZnNldCxcbiAgICBpc0JhY2t3YXJkOiB0cnVlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vdmVTZWxlY3Rpb25CYWNrd2FyZDsiXSwibmFtZXMiOlsid2FybmluZyIsInJlcXVpcmUiLCJtb3ZlU2VsZWN0aW9uQmFja3dhcmQiLCJlZGl0b3JTdGF0ZSIsIm1heERpc3RhbmNlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiLCJjb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJrZXkiLCJnZXRTdGFydEtleSIsIm9mZnNldCIsImdldFN0YXJ0T2Zmc2V0IiwiZm9jdXNLZXkiLCJmb2N1c09mZnNldCIsImtleUJlZm9yZSIsImdldEtleUJlZm9yZSIsImJsb2NrQmVmb3JlIiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRUZXh0IiwibGVuZ3RoIiwibWVyZ2UiLCJpc0JhY2t3YXJkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/moveSelectionForward.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar warning = __webpack_require__(/*! fbjs/lib/warning */ \"(ssr)/./node_modules/fbjs/lib/warning.js\");\n/**\n * Given a collapsed selection, move the focus `maxDistance` forward within\n * the selected block. If the selection will go beyond the end of the block,\n * move focus to the start of the next block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */ function moveSelectionForward(editorState, maxDistance) {\n    var selection = editorState.getSelection(); // Should eventually make this an invariant\n     true ? warning(selection.isCollapsed(), \"moveSelectionForward should only be called with a collapsed SelectionState\") : 0;\n    var key = selection.getStartKey();\n    var offset = selection.getStartOffset();\n    var content = editorState.getCurrentContent();\n    var focusKey = key;\n    var focusOffset;\n    var block = content.getBlockForKey(key);\n    if (maxDistance > block.getText().length - offset) {\n        focusKey = content.getKeyAfter(key);\n        focusOffset = 0;\n    } else {\n        focusOffset = offset + maxDistance;\n    }\n    return selection.merge({\n        focusKey: focusKey,\n        focusOffset: focusOffset\n    });\n}\nmodule.exports = moveSelectionForward;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vdmVTZWxlY3Rpb25Gb3J3YXJkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUMsa0VBQWtCO0FBQ3hDOzs7Ozs7O0NBT0MsR0FHRCxTQUFTQyxxQkFBcUJDLFdBQVcsRUFBRUMsV0FBVztJQUNwRCxJQUFJQyxZQUFZRixZQUFZRyxZQUFZLElBQUksMkNBQTJDO0lBeEJ6RixLQTBCdUMsR0FBR04sUUFBUUssVUFBVUUsV0FBVyxJQUFJLGdGQUFnRixDQUFNO0lBQy9KLElBQUlDLE1BQU1ILFVBQVVJLFdBQVc7SUFDL0IsSUFBSUMsU0FBU0wsVUFBVU0sY0FBYztJQUNyQyxJQUFJQyxVQUFVVCxZQUFZVSxpQkFBaUI7SUFDM0MsSUFBSUMsV0FBV047SUFDZixJQUFJTztJQUNKLElBQUlDLFFBQVFKLFFBQVFLLGNBQWMsQ0FBQ1Q7SUFFbkMsSUFBSUosY0FBY1ksTUFBTUUsT0FBTyxHQUFHQyxNQUFNLEdBQUdULFFBQVE7UUFDakRJLFdBQVdGLFFBQVFRLFdBQVcsQ0FBQ1o7UUFDL0JPLGNBQWM7SUFDaEIsT0FBTztRQUNMQSxjQUFjTCxTQUFTTjtJQUN6QjtJQUVBLE9BQU9DLFVBQVVnQixLQUFLLENBQUM7UUFDckJQLFVBQVVBO1FBQ1ZDLGFBQWFBO0lBQ2Y7QUFDRjtBQUVBTyxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvbW92ZVNlbGVjdGlvbkZvcndhcmQuanM/ZTFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuLyoqXG4gKiBHaXZlbiBhIGNvbGxhcHNlZCBzZWxlY3Rpb24sIG1vdmUgdGhlIGZvY3VzIGBtYXhEaXN0YW5jZWAgZm9yd2FyZCB3aXRoaW5cbiAqIHRoZSBzZWxlY3RlZCBibG9jay4gSWYgdGhlIHNlbGVjdGlvbiB3aWxsIGdvIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBibG9jayxcbiAqIG1vdmUgZm9jdXMgdG8gdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IGJsb2NrLCBidXQgbm8gZnVydGhlci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBVbmljb2RlLWF3YXJlLCBzbyBzdXJyb2dhdGUgcGFpcnMgd2lsbCBiZSB0cmVhdGVkXG4gKiBhcyBoYXZpbmcgbGVuZ3RoIDIuXG4gKi9cblxuXG5mdW5jdGlvbiBtb3ZlU2VsZWN0aW9uRm9yd2FyZChlZGl0b3JTdGF0ZSwgbWF4RGlzdGFuY2UpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpOyAvLyBTaG91bGQgZXZlbnR1YWxseSBtYWtlIHRoaXMgYW4gaW52YXJpYW50XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSwgJ21vdmVTZWxlY3Rpb25Gb3J3YXJkIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgY29sbGFwc2VkIFNlbGVjdGlvblN0YXRlJykgOiB2b2lkIDA7XG4gIHZhciBrZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gIHZhciBmb2N1c0tleSA9IGtleTtcbiAgdmFyIGZvY3VzT2Zmc2V0O1xuICB2YXIgYmxvY2sgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSk7XG5cbiAgaWYgKG1heERpc3RhbmNlID4gYmxvY2suZ2V0VGV4dCgpLmxlbmd0aCAtIG9mZnNldCkge1xuICAgIGZvY3VzS2V5ID0gY29udGVudC5nZXRLZXlBZnRlcihrZXkpO1xuICAgIGZvY3VzT2Zmc2V0ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBmb2N1c09mZnNldCA9IG9mZnNldCArIG1heERpc3RhbmNlO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgZm9jdXNLZXk6IGZvY3VzS2V5LFxuICAgIGZvY3VzT2Zmc2V0OiBmb2N1c09mZnNldFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb3ZlU2VsZWN0aW9uRm9yd2FyZDsiXSwibmFtZXMiOlsid2FybmluZyIsInJlcXVpcmUiLCJtb3ZlU2VsZWN0aW9uRm9yd2FyZCIsImVkaXRvclN0YXRlIiwibWF4RGlzdGFuY2UiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJpc0NvbGxhcHNlZCIsImtleSIsImdldFN0YXJ0S2V5Iiwib2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJjb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJmb2N1c0tleSIsImZvY3VzT2Zmc2V0IiwiYmxvY2siLCJnZXRCbG9ja0ZvcktleSIsImdldFRleHQiLCJsZW5ndGgiLCJnZXRLZXlBZnRlciIsIm1lcmdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/randomizeBlockMapKeys.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar OrderedMap = Immutable.OrderedMap;\nvar randomizeContentBlockNodeKeys = function randomizeContentBlockNodeKeys(blockMap) {\n    var newKeysRef = {}; // we keep track of root blocks in order to update subsequent sibling links\n    var lastRootBlock;\n    return OrderedMap(blockMap.withMutations(function(blockMapState) {\n        blockMapState.forEach(function(block, index) {\n            var oldKey = block.getKey();\n            var nextKey = block.getNextSiblingKey();\n            var prevKey = block.getPrevSiblingKey();\n            var childrenKeys = block.getChildKeys();\n            var parentKey = block.getParentKey(); // new key that we will use to build linking\n            var key = generateRandomKey(); // we will add it here to re-use it later\n            newKeysRef[oldKey] = key;\n            if (nextKey) {\n                var nextBlock = blockMapState.get(nextKey);\n                if (nextBlock) {\n                    blockMapState.setIn([\n                        nextKey,\n                        \"prevSibling\"\n                    ], key);\n                } else {\n                    // this can happen when generating random keys for fragments\n                    blockMapState.setIn([\n                        oldKey,\n                        \"nextSibling\"\n                    ], null);\n                }\n            }\n            if (prevKey) {\n                var prevBlock = blockMapState.get(prevKey);\n                if (prevBlock) {\n                    blockMapState.setIn([\n                        prevKey,\n                        \"nextSibling\"\n                    ], key);\n                } else {\n                    // this can happen when generating random keys for fragments\n                    blockMapState.setIn([\n                        oldKey,\n                        \"prevSibling\"\n                    ], null);\n                }\n            }\n            if (parentKey && blockMapState.get(parentKey)) {\n                var parentBlock = blockMapState.get(parentKey);\n                var parentChildrenList = parentBlock.getChildKeys();\n                blockMapState.setIn([\n                    parentKey,\n                    \"children\"\n                ], parentChildrenList.set(parentChildrenList.indexOf(block.getKey()), key));\n            } else {\n                // blocks will then be treated as root block nodes\n                blockMapState.setIn([\n                    oldKey,\n                    \"parent\"\n                ], null);\n                if (lastRootBlock) {\n                    blockMapState.setIn([\n                        lastRootBlock.getKey(),\n                        \"nextSibling\"\n                    ], key);\n                    blockMapState.setIn([\n                        oldKey,\n                        \"prevSibling\"\n                    ], newKeysRef[lastRootBlock.getKey()]);\n                }\n                lastRootBlock = blockMapState.get(oldKey);\n            }\n            childrenKeys.forEach(function(childKey) {\n                var childBlock = blockMapState.get(childKey);\n                if (childBlock) {\n                    blockMapState.setIn([\n                        childKey,\n                        \"parent\"\n                    ], key);\n                } else {\n                    blockMapState.setIn([\n                        oldKey,\n                        \"children\"\n                    ], block.getChildKeys().filter(function(child) {\n                        return child !== childKey;\n                    }));\n                }\n            });\n        });\n    }).toArray().map(function(block) {\n        return [\n            newKeysRef[block.getKey()],\n            block.set(\"key\", newKeysRef[block.getKey()])\n        ];\n    }));\n};\nvar randomizeContentBlockKeys = function randomizeContentBlockKeys(blockMap) {\n    return OrderedMap(blockMap.toArray().map(function(block) {\n        var key = generateRandomKey();\n        return [\n            key,\n            block.set(\"key\", key)\n        ];\n    }));\n};\nvar randomizeBlockMapKeys = function randomizeBlockMapKeys(blockMap) {\n    var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\n    if (!isTreeBasedBlockMap) {\n        return randomizeContentBlockKeys(blockMap);\n    }\n    return randomizeContentBlockNodeKeys(blockMap);\n};\nmodule.exports = randomizeBlockMapKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/removeEntitiesAtEdges.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nfunction removeEntitiesAtEdges(contentState, selectionState) {\n    var blockMap = contentState.getBlockMap();\n    var entityMap = contentState.getEntityMap();\n    var updatedBlocks = {};\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var startBlock = blockMap.get(startKey);\n    var updatedStart = removeForBlock(entityMap, startBlock, startOffset);\n    if (updatedStart !== startBlock) {\n        updatedBlocks[startKey] = updatedStart;\n    }\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var endBlock = blockMap.get(endKey);\n    if (startKey === endKey) {\n        endBlock = updatedStart;\n    }\n    var updatedEnd = removeForBlock(entityMap, endBlock, endOffset);\n    if (updatedEnd !== endBlock) {\n        updatedBlocks[endKey] = updatedEnd;\n    }\n    if (!Object.keys(updatedBlocks).length) {\n        return contentState.set(\"selectionAfter\", selectionState);\n    }\n    return contentState.merge({\n        blockMap: blockMap.merge(updatedBlocks),\n        selectionAfter: selectionState\n    });\n}\n/**\n * Given a list of characters and an offset that is in the middle of an entity,\n * returns the start and end of the entity that is overlapping the offset.\n * Note: This method requires that the offset be in an entity range.\n */ function getRemovalRange(characters, entityKey, offset) {\n    var removalRange; // Iterates through a list looking for ranges of matching items\n    // based on the 'isEqual' callback.\n    // Then instead of returning the result, call the 'found' callback\n    // with each range.\n    // Then filters those ranges based on the 'filter' callback\n    //\n    // Here we use it to find ranges of characters with the same entity key.\n    findRangesImmutable(characters, function(a, b) {\n        return a.getEntity() === b.getEntity();\n    }, function(element) {\n        return element.getEntity() === entityKey;\n    }, function(start, end) {\n        // 'found' callback\n        if (start <= offset && end >= offset) {\n            // this entity overlaps the offset index\n            removalRange = {\n                start: start,\n                end: end\n            };\n        }\n    });\n    !(typeof removalRange === \"object\") ?  true ? invariant(false, \"Removal range must exist within character list.\") : 0 : void 0;\n    return removalRange;\n}\nfunction removeForBlock(entityMap, block, offset) {\n    var chars = block.getCharacterList();\n    var charBefore = offset > 0 ? chars.get(offset - 1) : undefined;\n    var charAfter = offset < chars.count() ? chars.get(offset) : undefined;\n    var entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;\n    var entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;\n    if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {\n        var entity = entityMap.__get(entityAfterCursor);\n        if (entity.getMutability() !== \"MUTABLE\") {\n            var _getRemovalRange = getRemovalRange(chars, entityAfterCursor, offset), start = _getRemovalRange.start, end = _getRemovalRange.end;\n            var current;\n            while(start < end){\n                current = chars.get(start);\n                chars = chars.set(start, CharacterMetadata.applyEntity(current, null));\n                start++;\n            }\n            return block.set(\"characterList\", chars);\n        }\n    }\n    return block;\n}\nmodule.exports = removeEntitiesAtEdges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/removeRangeFromContentState.js":
/*!******************************************************************!*\
  !*** ./node_modules/draft-js/lib/removeRangeFromContentState.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar getNextDelimiterBlockKey = __webpack_require__(/*! ./getNextDelimiterBlockKey */ \"(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Map = Immutable.Map;\nvar transformBlock = function transformBlock(key, blockMap, func) {\n    if (!key) {\n        return;\n    }\n    var block = blockMap.get(key);\n    if (!block) {\n        return;\n    }\n    blockMap.set(key, func(block));\n};\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */ var getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n    var parents = [];\n    if (!blockKey) {\n        return parents;\n    }\n    var blockNode = blockMap.get(blockKey);\n    while(blockNode && blockNode.getParentKey()){\n        var parentKey = blockNode.getParentKey();\n        if (parentKey) {\n            parents.push(parentKey);\n        }\n        blockNode = parentKey ? blockMap.get(parentKey) : null;\n    }\n    return parents;\n};\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */ var getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n    var nextDelimiters = [];\n    if (!block) {\n        return nextDelimiters;\n    }\n    var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n    while(nextDelimiter && blockMap.get(nextDelimiter)){\n        var _block = blockMap.get(nextDelimiter);\n        nextDelimiters.push(nextDelimiter); // we do not need to keep checking all root node siblings, just the first occurance\n        nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n    }\n    return nextDelimiters;\n};\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n    if (!block) {\n        return null;\n    } // note that we need to make sure we refer to the original block since this\n    // function is called within a withMutations\n    var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n    while(nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)){\n        nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n    }\n    return nextValidSiblingKey;\n};\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n    if (!block) {\n        return null;\n    } // note that we need to make sure we refer to the original block since this\n    // function is called within a withMutations\n    var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n    while(prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)){\n        prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n    }\n    return prevValidSiblingKey;\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n    return blockMap.withMutations(function(blocks) {\n        // update start block if its retained\n        transformBlock(startBlock.getKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update endblock if its retained\n        transformBlock(endBlock.getKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update start block parent ancestors\n        getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function(parentKey) {\n            return transformBlock(parentKey, blocks, function(block) {\n                return block.merge({\n                    children: block.getChildKeys().filter(function(key) {\n                        return blocks.get(key);\n                    }),\n                    nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                    prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n                });\n            });\n        }); // update start block next - can only happen if startBlock == endBlock\n        transformBlock(startBlock.getNextSiblingKey(), blocks, function(block) {\n            return block.merge({\n                prevSibling: startBlock.getPrevSiblingKey()\n            });\n        }); // update start block prev\n        transformBlock(startBlock.getPrevSiblingKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: getNextValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update end block next\n        transformBlock(endBlock.getNextSiblingKey(), blocks, function(block) {\n            return block.merge({\n                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update end block prev\n        transformBlock(endBlock.getPrevSiblingKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: endBlock.getNextSiblingKey()\n            });\n        }); // update end block parent ancestors\n        getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function(parentKey) {\n            transformBlock(parentKey, blocks, function(block) {\n                return block.merge({\n                    children: block.getChildKeys().filter(function(key) {\n                        return blocks.get(key);\n                    }),\n                    nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                    prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n                });\n            });\n        }); // update next delimiters all the way to a root delimiter\n        getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function(delimiterKey) {\n            return transformBlock(delimiterKey, blocks, function(block) {\n                return block.merge({\n                    nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                    prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n                });\n            });\n        }); // if parent (startBlock) was deleted\n        if (blockMap.get(startBlock.getKey()) == null && blockMap.get(endBlock.getKey()) != null && endBlock.getParentKey() === startBlock.getKey() && endBlock.getPrevSiblingKey() == null) {\n            var prevSiblingKey = startBlock.getPrevSiblingKey(); // endBlock becomes next sibling of parent's prevSibling\n            transformBlock(endBlock.getKey(), blocks, function(block) {\n                return block.merge({\n                    prevSibling: prevSiblingKey\n                });\n            });\n            transformBlock(prevSiblingKey, blocks, function(block) {\n                return block.merge({\n                    nextSibling: endBlock.getKey()\n                });\n            }); // Update parent for previous parent's children, and children for that parent\n            var prevSibling = prevSiblingKey ? blockMap.get(prevSiblingKey) : null;\n            var newParentKey = prevSibling ? prevSibling.getParentKey() : null;\n            startBlock.getChildKeys().forEach(function(childKey) {\n                transformBlock(childKey, blocks, function(block) {\n                    return block.merge({\n                        parent: newParentKey // set to null if there is no parent\n                    });\n                });\n            });\n            if (newParentKey != null) {\n                var newParent = blockMap.get(newParentKey);\n                transformBlock(newParentKey, blocks, function(block) {\n                    return block.merge({\n                        children: newParent.getChildKeys().concat(startBlock.getChildKeys())\n                    });\n                });\n            } // last child of deleted parent should point to next sibling\n            transformBlock(startBlock.getChildKeys().find(function(key) {\n                var block = blockMap.get(key);\n                return block.getNextSiblingKey() === null;\n            }), blocks, function(block) {\n                return block.merge({\n                    nextSibling: startBlock.getNextSiblingKey()\n                });\n            });\n        }\n    });\n};\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n    if (selectionState.isCollapsed()) {\n        return contentState;\n    }\n    var blockMap = contentState.getBlockMap();\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var startBlock = blockMap.get(startKey);\n    var endBlock = blockMap.get(endKey); // we assume that ContentBlockNode and ContentBlocks are not mixed together\n    var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode; // used to retain blocks that should not be deleted to avoid orphan children\n    var parentAncestors = [];\n    if (isExperimentalTreeBlock) {\n        var endBlockchildrenKeys = endBlock.getChildKeys();\n        var endBlockAncestors = getAncestorsKeys(endKey, blockMap); // endBlock has unselected siblings so we can not remove its ancestors parents\n        if (endBlock.getNextSiblingKey()) {\n            parentAncestors = parentAncestors.concat(endBlockAncestors);\n        } // endBlock has children so can not remove this block or any of its ancestors\n        if (!endBlockchildrenKeys.isEmpty()) {\n            parentAncestors = parentAncestors.concat(endBlockAncestors.concat([\n                endKey\n            ]));\n        } // we need to retain all ancestors of the next delimiter block\n        parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n    }\n    var characterList;\n    if (startBlock === endBlock) {\n        characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n    } else {\n        characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n    }\n    var modifiedStart = startBlock.merge({\n        text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n        characterList: characterList\n    }); // If cursor (collapsed) is at the start of the first child, delete parent\n    // instead of child\n    var shouldDeleteParent = isExperimentalTreeBlock && startOffset === 0 && endOffset === 0 && endBlock.getParentKey() === startKey && endBlock.getPrevSiblingKey() == null;\n    var newBlocks = shouldDeleteParent ? Map([\n        [\n            startKey,\n            null\n        ]\n    ]) : blockMap.toSeq().skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).filter(function(_, k) {\n        return parentAncestors.indexOf(k) === -1;\n    }).concat(Map([\n        [\n            endKey,\n            null\n        ]\n    ])).map(function(_, k) {\n        return k === startKey ? modifiedStart : null;\n    });\n    var updatedBlockMap = blockMap.merge(newBlocks).filter(function(block) {\n        return !!block;\n    }); // Only update tree block pointers if the range is across blocks\n    if (isExperimentalTreeBlock && startBlock !== endBlock) {\n        updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n    }\n    return contentState.merge({\n        blockMap: updatedBlockMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: startKey,\n            anchorOffset: startOffset,\n            focusKey: startKey,\n            focusOffset: startOffset,\n            isBackward: false\n        })\n    });\n};\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */ var removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n    if (startOffset === 0) {\n        while(startOffset < endOffset){\n            targetList = targetList.shift();\n            startOffset++;\n        }\n    } else if (endOffset === targetList.count()) {\n        while(endOffset > startOffset){\n            targetList = targetList.pop();\n            endOffset--;\n        }\n    } else {\n        var head = targetList.slice(0, startOffset);\n        var tail = targetList.slice(endOffset);\n        targetList = head.concat(tail).toList();\n    }\n    return targetList;\n};\nmodule.exports = removeRangeFromContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/removeRangeFromContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/removeTextWithStrategy.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\n/**\n * For a collapsed selection state, remove text based on the specified strategy.\n * If the selection state is not collapsed, remove the entire selected range.\n */ function removeTextWithStrategy(editorState, strategy, direction) {\n    var selection = editorState.getSelection();\n    var content = editorState.getCurrentContent();\n    var target = selection;\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n    var anchorBlock = content.getBlockForKey(anchorKey);\n    if (experimentalTreeDataSupport) {\n        if (direction === \"forward\") {\n            if (anchorKey !== focusKey) {\n                // For now we ignore forward delete across blocks,\n                // if there is demand for this we will implement it.\n                return content;\n            }\n        }\n    }\n    if (selection.isCollapsed()) {\n        if (direction === \"forward\") {\n            if (editorState.isSelectionAtEndOfContent()) {\n                return content;\n            }\n            if (experimentalTreeDataSupport) {\n                var isAtEndOfBlock = selection.getAnchorOffset() === content.getBlockForKey(anchorKey).getLength();\n                if (isAtEndOfBlock) {\n                    var anchorBlockSibling = content.getBlockForKey(anchorBlock.nextSibling);\n                    if (!anchorBlockSibling || anchorBlockSibling.getLength() === 0) {\n                        // For now we ignore forward delete at the end of a block,\n                        // if there is demand for this we will implement it.\n                        return content;\n                    }\n                }\n            }\n        } else if (editorState.isSelectionAtStartOfContent()) {\n            return content;\n        }\n        target = strategy(editorState);\n        if (target === selection) {\n            return content;\n        }\n    }\n    return DraftModifier.removeRange(content, target, direction);\n}\nmodule.exports = removeTextWithStrategy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3kuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxnQkFBZ0JDLG1CQUFPQSxDQUFDLDJFQUFpQjtBQUU3QyxJQUFJQyxNQUFNRCxtQkFBT0EsQ0FBQyx1REFBTztBQUV6QixJQUFJRSw4QkFBOEJELElBQUk7QUFDdEM7OztDQUdDLEdBRUQsU0FBU0UsdUJBQXVCQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsU0FBUztJQUM5RCxJQUFJQyxZQUFZSCxZQUFZSSxZQUFZO0lBQ3hDLElBQUlDLFVBQVVMLFlBQVlNLGlCQUFpQjtJQUMzQyxJQUFJQyxTQUFTSjtJQUNiLElBQUlLLFlBQVlMLFVBQVVNLFlBQVk7SUFDdEMsSUFBSUMsV0FBV1AsVUFBVVEsV0FBVztJQUNwQyxJQUFJQyxjQUFjUCxRQUFRUSxjQUFjLENBQUNMO0lBRXpDLElBQUlWLDZCQUE2QjtRQUMvQixJQUFJSSxjQUFjLFdBQVc7WUFDM0IsSUFBSU0sY0FBY0UsVUFBVTtnQkFDMUIsa0RBQWtEO2dCQUNsRCxvREFBb0Q7Z0JBQ3BELE9BQU9MO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsSUFBSUYsVUFBVVcsV0FBVyxJQUFJO1FBQzNCLElBQUlaLGNBQWMsV0FBVztZQUMzQixJQUFJRixZQUFZZSx5QkFBeUIsSUFBSTtnQkFDM0MsT0FBT1Y7WUFDVDtZQUVBLElBQUlQLDZCQUE2QjtnQkFDL0IsSUFBSWtCLGlCQUFpQmIsVUFBVWMsZUFBZSxPQUFPWixRQUFRUSxjQUFjLENBQUNMLFdBQVdVLFNBQVM7Z0JBRWhHLElBQUlGLGdCQUFnQjtvQkFDbEIsSUFBSUcscUJBQXFCZCxRQUFRUSxjQUFjLENBQUNELFlBQVlRLFdBQVc7b0JBRXZFLElBQUksQ0FBQ0Qsc0JBQXNCQSxtQkFBbUJELFNBQVMsT0FBTyxHQUFHO3dCQUMvRCwwREFBMEQ7d0JBQzFELG9EQUFvRDt3QkFDcEQsT0FBT2I7b0JBQ1Q7Z0JBQ0Y7WUFDRjtRQUNGLE9BQU8sSUFBSUwsWUFBWXFCLDJCQUEyQixJQUFJO1lBQ3BELE9BQU9oQjtRQUNUO1FBRUFFLFNBQVNOLFNBQVNEO1FBRWxCLElBQUlPLFdBQVdKLFdBQVc7WUFDeEIsT0FBT0U7UUFDVDtJQUNGO0lBRUEsT0FBT1YsY0FBYzJCLFdBQVcsQ0FBQ2pCLFNBQVNFLFFBQVFMO0FBQ3BEO0FBRUFxQixPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvcmVtb3ZlVGV4dFdpdGhTdHJhdGVneS5qcz81MmRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZShcIi4vRHJhZnRNb2RpZmllclwiKTtcblxudmFyIGdreCA9IHJlcXVpcmUoXCIuL2dreFwiKTtcblxudmFyIGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA9IGdreCgnZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQnKTtcbi8qKlxuICogRm9yIGEgY29sbGFwc2VkIHNlbGVjdGlvbiBzdGF0ZSwgcmVtb3ZlIHRleHQgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBzdHJhdGVneS5cbiAqIElmIHRoZSBzZWxlY3Rpb24gc3RhdGUgaXMgbm90IGNvbGxhcHNlZCwgcmVtb3ZlIHRoZSBlbnRpcmUgc2VsZWN0ZWQgcmFuZ2UuXG4gKi9cblxuZnVuY3Rpb24gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgc3RyYXRlZ3ksIGRpcmVjdGlvbikge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIHRhcmdldCA9IHNlbGVjdGlvbjtcbiAgdmFyIGFuY2hvcktleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgdmFyIGZvY3VzS2V5ID0gc2VsZWN0aW9uLmdldEZvY3VzS2V5KCk7XG4gIHZhciBhbmNob3JCbG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoYW5jaG9yS2V5KTtcblxuICBpZiAoZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0KSB7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICBpZiAoYW5jaG9yS2V5ICE9PSBmb2N1c0tleSkge1xuICAgICAgICAvLyBGb3Igbm93IHdlIGlnbm9yZSBmb3J3YXJkIGRlbGV0ZSBhY3Jvc3MgYmxvY2tzLFxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBkZW1hbmQgZm9yIHRoaXMgd2Ugd2lsbCBpbXBsZW1lbnQgaXQuXG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgaWYgKGVkaXRvclN0YXRlLmlzU2VsZWN0aW9uQXRFbmRPZkNvbnRlbnQoKSkge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCkge1xuICAgICAgICB2YXIgaXNBdEVuZE9mQmxvY2sgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCkgPT09IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoYW5jaG9yS2V5KS5nZXRMZW5ndGgoKTtcblxuICAgICAgICBpZiAoaXNBdEVuZE9mQmxvY2spIHtcbiAgICAgICAgICB2YXIgYW5jaG9yQmxvY2tTaWJsaW5nID0gY29udGVudC5nZXRCbG9ja0ZvcktleShhbmNob3JCbG9jay5uZXh0U2libGluZyk7XG5cbiAgICAgICAgICBpZiAoIWFuY2hvckJsb2NrU2libGluZyB8fCBhbmNob3JCbG9ja1NpYmxpbmcuZ2V0TGVuZ3RoKCkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIEZvciBub3cgd2UgaWdub3JlIGZvcndhcmQgZGVsZXRlIGF0IHRoZSBlbmQgb2YgYSBibG9jayxcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGRlbWFuZCBmb3IgdGhpcyB3ZSB3aWxsIGltcGxlbWVudCBpdC5cbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWRpdG9yU3RhdGUuaXNTZWxlY3Rpb25BdFN0YXJ0T2ZDb250ZW50KCkpIHtcbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHN0cmF0ZWd5KGVkaXRvclN0YXRlKTtcblxuICAgIGlmICh0YXJnZXQgPT09IHNlbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoY29udGVudCwgdGFyZ2V0LCBkaXJlY3Rpb24pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVRleHRXaXRoU3RyYXRlZ3k7Il0sIm5hbWVzIjpbIkRyYWZ0TW9kaWZpZXIiLCJyZXF1aXJlIiwiZ2t4IiwiZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0IiwicmVtb3ZlVGV4dFdpdGhTdHJhdGVneSIsImVkaXRvclN0YXRlIiwic3RyYXRlZ3kiLCJkaXJlY3Rpb24iLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJjb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJ0YXJnZXQiLCJhbmNob3JLZXkiLCJnZXRBbmNob3JLZXkiLCJmb2N1c0tleSIsImdldEZvY3VzS2V5IiwiYW5jaG9yQmxvY2siLCJnZXRCbG9ja0ZvcktleSIsImlzQ29sbGFwc2VkIiwiaXNTZWxlY3Rpb25BdEVuZE9mQ29udGVudCIsImlzQXRFbmRPZkJsb2NrIiwiZ2V0QW5jaG9yT2Zmc2V0IiwiZ2V0TGVuZ3RoIiwiYW5jaG9yQmxvY2tTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJpc1NlbGVjdGlvbkF0U3RhcnRPZkNvbnRlbnQiLCJyZW1vdmVSYW5nZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/sanitizeDraftText.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar REGEX_BLOCK_DELIMITER = new RegExp(\"\\r\", \"g\");\nfunction sanitizeDraftText(input) {\n    return input.replace(REGEX_BLOCK_DELIMITER, \"\");\n}\nmodule.exports = sanitizeDraftText;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3Nhbml0aXplRHJhZnRUZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsd0JBQXdCLElBQUlDLE9BQU8sTUFBTTtBQUU3QyxTQUFTQyxrQkFBa0JDLEtBQUs7SUFDOUIsT0FBT0EsTUFBTUMsT0FBTyxDQUFDSix1QkFBdUI7QUFDOUM7QUFFQUssT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvc2FuaXRpemVEcmFmdFRleHQuanM/Y2EwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUkVHRVhfQkxPQ0tfREVMSU1JVEVSID0gbmV3IFJlZ0V4cCgnXFxyJywgJ2cnKTtcblxuZnVuY3Rpb24gc2FuaXRpemVEcmFmdFRleHQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoUkVHRVhfQkxPQ0tfREVMSU1JVEVSLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FuaXRpemVEcmFmdFRleHQ7Il0sIm5hbWVzIjpbIlJFR0VYX0JMT0NLX0RFTElNSVRFUiIsIlJlZ0V4cCIsInNhbml0aXplRHJhZnRUZXh0IiwiaW5wdXQiLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/setDraftEditorSelection.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/setDraftEditorSelection.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftEffects = __webpack_require__(/*! ./DraftEffects */ \"(ssr)/./node_modules/draft-js/lib/DraftEffects.js\");\nvar DraftJsDebugLogging = __webpack_require__(/*! ./DraftJsDebugLogging */ \"(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar containsNode = __webpack_require__(/*! fbjs/lib/containsNode */ \"(ssr)/./node_modules/fbjs/lib/containsNode.js\");\nvar getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ \"(ssr)/./node_modules/fbjs/lib/getActiveElement.js\");\nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nvar isIE = UserAgent.isBrowser(\"IE\");\nfunction getAnonymizedDOM(node, getNodeLabels) {\n    if (!node) {\n        return \"[empty]\";\n    }\n    var anonymized = anonymizeTextWithin(node, getNodeLabels);\n    if (anonymized.nodeType === Node.TEXT_NODE) {\n        return anonymized.textContent;\n    }\n    !isElement(anonymized) ?  true ? invariant(false, \"Node must be an Element if it is not a text node.\") : 0 : void 0;\n    var castedElement = anonymized;\n    return castedElement.outerHTML;\n}\nfunction anonymizeTextWithin(node, getNodeLabels) {\n    var labels = getNodeLabels !== undefined ? getNodeLabels(node) : [];\n    if (node.nodeType === Node.TEXT_NODE) {\n        var length = node.textContent.length;\n        return getCorrectDocumentFromNode(node).createTextNode(\"[text \" + length + (labels.length ? \" | \" + labels.join(\", \") : \"\") + \"]\");\n    }\n    var clone = node.cloneNode();\n    if (clone.nodeType === 1 && labels.length) {\n        clone.setAttribute(\"data-labels\", labels.join(\", \"));\n    }\n    var childNodes = node.childNodes;\n    for(var ii = 0; ii < childNodes.length; ii++){\n        clone.appendChild(anonymizeTextWithin(childNodes[ii], getNodeLabels));\n    }\n    return clone;\n}\nfunction getAnonymizedEditorDOM(node, getNodeLabels) {\n    // grabbing the DOM content of the Draft editor\n    var currentNode = node; // this should only be used after checking with isElement\n    var castedNode = currentNode;\n    while(currentNode){\n        if (isElement(currentNode) && castedNode.hasAttribute(\"contenteditable\")) {\n            // found the Draft editor container\n            return getAnonymizedDOM(currentNode, getNodeLabels);\n        } else {\n            currentNode = currentNode.parentNode;\n            castedNode = currentNode;\n        }\n    }\n    return \"Could not find contentEditable parent of node\";\n}\nfunction getNodeLength(node) {\n    return node.nodeValue === null ? node.childNodes.length : node.nodeValue.length;\n}\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n */ function setDraftEditorSelection(selectionState, node, blockKey, nodeStart, nodeEnd) {\n    // It's possible that the editor has been removed from the DOM but\n    // our selection code doesn't know it yet. Forcing selection in\n    // this case may lead to errors, so just bail now.\n    var documentObject = getCorrectDocumentFromNode(node);\n    if (!containsNode(documentObject.documentElement, node)) {\n        return;\n    }\n    var selection = documentObject.defaultView.getSelection();\n    var anchorKey = selectionState.getAnchorKey();\n    var anchorOffset = selectionState.getAnchorOffset();\n    var focusKey = selectionState.getFocusKey();\n    var focusOffset = selectionState.getFocusOffset();\n    var isBackward = selectionState.getIsBackward(); // IE doesn't support backward selection. Swap key/offset pairs.\n    if (!selection.extend && isBackward) {\n        var tempKey = anchorKey;\n        var tempOffset = anchorOffset;\n        anchorKey = focusKey;\n        anchorOffset = focusOffset;\n        focusKey = tempKey;\n        focusOffset = tempOffset;\n        isBackward = false;\n    }\n    var hasAnchor = anchorKey === blockKey && nodeStart <= anchorOffset && nodeEnd >= anchorOffset;\n    var hasFocus = focusKey === blockKey && nodeStart <= focusOffset && nodeEnd >= focusOffset; // If the selection is entirely bound within this node, set the selection\n    // and be done.\n    if (hasAnchor && hasFocus) {\n        selection.removeAllRanges();\n        addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);\n        addFocusToSelection(selection, node, focusOffset - nodeStart, selectionState);\n        return;\n    }\n    if (!isBackward) {\n        // If the anchor is within this node, set the range start.\n        if (hasAnchor) {\n            selection.removeAllRanges();\n            addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);\n        } // If the focus is within this node, we can assume that we have\n        // already set the appropriate start range on the selection, and\n        // can simply extend the selection.\n        if (hasFocus) {\n            addFocusToSelection(selection, node, focusOffset - nodeStart, selectionState);\n        }\n    } else {\n        // If this node has the focus, set the selection range to be a\n        // collapsed range beginning here. Later, when we encounter the anchor,\n        // we'll use this information to extend the selection.\n        if (hasFocus) {\n            selection.removeAllRanges();\n            addPointToSelection(selection, node, focusOffset - nodeStart, selectionState);\n        } // If this node has the anchor, we may assume that the correct\n        // focus information is already stored on the selection object.\n        // We keep track of it, reset the selection range, and extend it\n        // back to the focus point.\n        if (hasAnchor) {\n            var storedFocusNode = selection.focusNode;\n            var storedFocusOffset = selection.focusOffset;\n            selection.removeAllRanges();\n            addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);\n            addFocusToSelection(selection, storedFocusNode, storedFocusOffset, selectionState);\n        }\n    }\n}\n/**\n * Extend selection towards focus point.\n */ function addFocusToSelection(selection, node, offset, selectionState) {\n    var activeElement = getActiveElement();\n    var extend = selection.extend; // containsNode returns false if node is null.\n    // Let's refine the type of this value out here so flow knows.\n    if (extend && node != null && containsNode(activeElement, node)) {\n        // If `extend` is called while another element has focus, an error is\n        // thrown. We therefore disable `extend` if the active element is somewhere\n        // other than the node we are selecting. This should only occur in Firefox,\n        // since it is the only browser to support multiple selections.\n        // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.\n        // logging to catch bug that is being reported in t16250795\n        if (offset > getNodeLength(node)) {\n            // the call to 'selection.extend' is about to throw\n            DraftJsDebugLogging.logSelectionStateFailure({\n                anonymizedDom: getAnonymizedEditorDOM(node),\n                extraParams: JSON.stringify({\n                    offset: offset\n                }),\n                selectionState: JSON.stringify(selectionState.toJS())\n            });\n        } // logging to catch bug that is being reported in t18110632\n        var nodeWasFocus = node === selection.focusNode;\n        try {\n            // Fixes some reports of \"InvalidStateError: Failed to execute 'extend' on\n            // 'Selection': This Selection object doesn't have any Ranges.\"\n            // Note: selection.extend does not exist in IE.\n            if (selection.rangeCount > 0 && selection.extend) {\n                selection.extend(node, offset);\n            }\n        } catch (e) {\n            DraftJsDebugLogging.logSelectionStateFailure({\n                anonymizedDom: getAnonymizedEditorDOM(node, function(n) {\n                    var labels = [];\n                    if (n === activeElement) {\n                        labels.push(\"active element\");\n                    }\n                    if (n === selection.anchorNode) {\n                        labels.push(\"selection anchor node\");\n                    }\n                    if (n === selection.focusNode) {\n                        labels.push(\"selection focus node\");\n                    }\n                    return labels;\n                }),\n                extraParams: JSON.stringify({\n                    activeElementName: activeElement ? activeElement.nodeName : null,\n                    nodeIsFocus: node === selection.focusNode,\n                    nodeWasFocus: nodeWasFocus,\n                    selectionRangeCount: selection.rangeCount,\n                    selectionAnchorNodeName: selection.anchorNode ? selection.anchorNode.nodeName : null,\n                    selectionAnchorOffset: selection.anchorOffset,\n                    selectionFocusNodeName: selection.focusNode ? selection.focusNode.nodeName : null,\n                    selectionFocusOffset: selection.focusOffset,\n                    message: e ? \"\" + e : null,\n                    offset: offset\n                }, null, 2),\n                selectionState: JSON.stringify(selectionState.toJS(), null, 2)\n            }); // allow the error to be thrown -\n            // better than continuing in a broken state\n            throw e;\n        }\n    } else {\n        // IE doesn't support extend. This will mean no backward selection.\n        // Extract the existing selection range and add focus to it.\n        // Additionally, clone the selection range. IE11 throws an\n        // InvalidStateError when attempting to access selection properties\n        // after the range is detached.\n        if (node && selection.rangeCount > 0) {\n            var range = selection.getRangeAt(0);\n            range.setEnd(node, offset);\n            selection.addRange(range.cloneRange());\n        }\n    }\n}\nfunction addPointToSelection(selection, node, offset, selectionState) {\n    var range = getCorrectDocumentFromNode(node).createRange(); // logging to catch bug that is being reported in t16250795\n    if (offset > getNodeLength(node)) {\n        // in this case we know that the call to 'range.setStart' is about to throw\n        DraftJsDebugLogging.logSelectionStateFailure({\n            anonymizedDom: getAnonymizedEditorDOM(node),\n            extraParams: JSON.stringify({\n                offset: offset\n            }),\n            selectionState: JSON.stringify(selectionState.toJS())\n        });\n        DraftEffects.handleExtensionCausedError();\n    }\n    range.setStart(node, offset); // IE sometimes throws Unspecified Error when trying to addRange\n    if (isIE) {\n        try {\n            selection.addRange(range);\n        } catch (e) {\n            if (true) {\n                /* eslint-disable-next-line no-console */ console.warn(\"Call to selection.addRange() threw exception: \", e);\n            }\n        }\n    } else {\n        selection.addRange(range);\n    }\n}\nmodule.exports = {\n    setDraftEditorSelection: setDraftEditorSelection,\n    addFocusToSelection: addFocusToSelection\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/setDraftEditorSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/splitBlockInContentState.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/splitBlockInContentState.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar modifyBlockForContentState = __webpack_require__(/*! ./modifyBlockForContentState */ \"(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js\");\nvar List = Immutable.List, Map = Immutable.Map;\nvar transformBlock = function transformBlock(key, blockMap, func) {\n    if (!key) {\n        return;\n    }\n    var block = blockMap.get(key);\n    if (!block) {\n        return;\n    }\n    blockMap.set(key, func(block));\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, originalBlock, belowBlock) {\n    return blockMap.withMutations(function(blocks) {\n        var originalBlockKey = originalBlock.getKey();\n        var belowBlockKey = belowBlock.getKey(); // update block parent\n        transformBlock(originalBlock.getParentKey(), blocks, function(block) {\n            var parentChildrenList = block.getChildKeys();\n            var insertionIndex = parentChildrenList.indexOf(originalBlockKey) + 1;\n            var newChildrenArray = parentChildrenList.toArray();\n            newChildrenArray.splice(insertionIndex, 0, belowBlockKey);\n            return block.merge({\n                children: List(newChildrenArray)\n            });\n        }); // update original next block\n        transformBlock(originalBlock.getNextSiblingKey(), blocks, function(block) {\n            return block.merge({\n                prevSibling: belowBlockKey\n            });\n        }); // update original block\n        transformBlock(originalBlockKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: belowBlockKey\n            });\n        }); // update below block\n        transformBlock(belowBlockKey, blocks, function(block) {\n            return block.merge({\n                prevSibling: originalBlockKey\n            });\n        });\n    });\n};\nvar splitBlockInContentState = function splitBlockInContentState(contentState, selectionState) {\n    !selectionState.isCollapsed() ?  true ? invariant(false, \"Selection range must be collapsed.\") : 0 : void 0;\n    var key = selectionState.getAnchorKey();\n    var blockMap = contentState.getBlockMap();\n    var blockToSplit = blockMap.get(key);\n    var text = blockToSplit.getText();\n    if (!text) {\n        var blockType = blockToSplit.getType();\n        if (blockType === \"unordered-list-item\" || blockType === \"ordered-list-item\") {\n            return modifyBlockForContentState(contentState, selectionState, function(block) {\n                return block.merge({\n                    type: \"unstyled\",\n                    depth: 0\n                });\n            });\n        }\n    }\n    var offset = selectionState.getAnchorOffset();\n    var chars = blockToSplit.getCharacterList();\n    var keyBelow = generateRandomKey();\n    var isExperimentalTreeBlock = blockToSplit instanceof ContentBlockNode;\n    var blockAbove = blockToSplit.merge({\n        text: text.slice(0, offset),\n        characterList: chars.slice(0, offset)\n    });\n    var blockBelow = blockAbove.merge({\n        key: keyBelow,\n        text: text.slice(offset),\n        characterList: chars.slice(offset),\n        data: Map()\n    });\n    var blocksBefore = blockMap.toSeq().takeUntil(function(v) {\n        return v === blockToSplit;\n    });\n    var blocksAfter = blockMap.toSeq().skipUntil(function(v) {\n        return v === blockToSplit;\n    }).rest();\n    var newBlocks = blocksBefore.concat([\n        [\n            key,\n            blockAbove\n        ],\n        [\n            keyBelow,\n            blockBelow\n        ]\n    ], blocksAfter).toOrderedMap();\n    if (isExperimentalTreeBlock) {\n        !blockToSplit.getChildKeys().isEmpty() ?  true ? invariant(false, \"ContentBlockNode must not have children\") : 0 : void 0;\n        newBlocks = updateBlockMapLinks(newBlocks, blockAbove, blockBelow);\n    }\n    return contentState.merge({\n        blockMap: newBlocks,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: keyBelow,\n            anchorOffset: 0,\n            focusKey: keyBelow,\n            focusOffset: 0,\n            isBackward: false\n        })\n    });\n};\nmodule.exports = splitBlockInContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/splitBlockInContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/splitTextIntoTextBlocks.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/splitTextIntoTextBlocks.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar NEWLINE_REGEX = /\\r\\n?|\\n/g;\nfunction splitTextIntoTextBlocks(text) {\n    return text.split(NEWLINE_REGEX);\n}\nmodule.exports = splitTextIntoTextBlocks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3NwbGl0VGV4dEludG9UZXh0QmxvY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCO0FBRXBCLFNBQVNDLHdCQUF3QkMsSUFBSTtJQUNuQyxPQUFPQSxLQUFLQyxLQUFLLENBQUNIO0FBQ3BCO0FBRUFJLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3NwbGl0VGV4dEludG9UZXh0QmxvY2tzLmpzPzM3ZTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIE5FV0xJTkVfUkVHRVggPSAvXFxyXFxuP3xcXG4vZztcblxuZnVuY3Rpb24gc3BsaXRUZXh0SW50b1RleHRCbG9ja3ModGV4dCkge1xuICByZXR1cm4gdGV4dC5zcGxpdChORVdMSU5FX1JFR0VYKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzcGxpdFRleHRJbnRvVGV4dEJsb2NrczsiXSwibmFtZXMiOlsiTkVXTElORV9SRUdFWCIsInNwbGl0VGV4dEludG9UZXh0QmxvY2tzIiwidGV4dCIsInNwbGl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/splitTextIntoTextBlocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/uuid.js":
/*!*******************************************!*\
  !*** ./node_modules/draft-js/lib/uuid.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @typechecks\n * \n * @format\n */ /*eslint-disable no-bitwise */ /**\n * Based on the rfc4122-compliant solution posted at\n * http://stackoverflow.com/questions/105034\n */ function uuid() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0;\n        var v = c == \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\nmodule.exports = uuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3V1aWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7O0NBTUMsR0FFRCw0QkFBNEIsR0FFNUI7OztDQUdDLEdBQ0QsU0FBU0E7SUFDUCxPQUFPLHVDQUF1Q0MsT0FBTyxDQUFDLFNBQVMsU0FBVUMsQ0FBQztRQUN4RSxJQUFJQyxJQUFJQyxLQUFLQyxNQUFNLEtBQUssS0FBSztRQUM3QixJQUFJQyxJQUFJSixLQUFLLE1BQU1DLElBQUlBLElBQUksTUFBTTtRQUNqQyxPQUFPRyxFQUFFQyxRQUFRLENBQUM7SUFDcEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXF1aXAtdmVsby1mb3ItbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi91dWlkLmpzP2I3NmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMDQtcHJlc2VudCBGYWNlYm9vay4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQmFzZWQgb24gdGhlIHJmYzQxMjItY29tcGxpYW50IHNvbHV0aW9uIHBvc3RlZCBhdFxuICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzRcbiAqL1xuZnVuY3Rpb24gdXVpZCgpIHtcbiAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDA7XG4gICAgdmFyIHYgPSBjID09ICd4JyA/IHIgOiByICYgMHgzIHwgMHg4O1xuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXVpZDsiXSwibmFtZXMiOlsidXVpZCIsInJlcGxhY2UiLCJjIiwiciIsIk1hdGgiLCJyYW5kb20iLCJ2IiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/uuid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js":
/*!************************************************************************!*\
  !*** ./node_modules/draft-js/node_modules/immutable/dist/immutable.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\n/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */ (function(global, factory) {\n     true ? module.exports = factory() : 0;\n})(void 0, function() {\n    \"use strict\";\n    var SLICE$0 = Array.prototype.slice;\n    function createClass(ctor, superClass) {\n        if (superClass) {\n            ctor.prototype = Object.create(superClass.prototype);\n        }\n        ctor.prototype.constructor = ctor;\n    }\n    function Iterable(value) {\n        return isIterable(value) ? value : Seq(value);\n    }\n    createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n        return isKeyed(value) ? value : KeyedSeq(value);\n    }\n    createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n        return isIndexed(value) ? value : IndexedSeq(value);\n    }\n    createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n        return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n    function isIterable(maybeIterable) {\n        return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n    }\n    function isKeyed(maybeKeyed) {\n        return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n    }\n    function isIndexed(maybeIndexed) {\n        return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n    }\n    function isAssociative(maybeAssociative) {\n        return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n    }\n    function isOrdered(maybeOrdered) {\n        return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n    }\n    Iterable.isIterable = isIterable;\n    Iterable.isKeyed = isKeyed;\n    Iterable.isIndexed = isIndexed;\n    Iterable.isAssociative = isAssociative;\n    Iterable.isOrdered = isOrdered;\n    Iterable.Keyed = KeyedIterable;\n    Iterable.Indexed = IndexedIterable;\n    Iterable.Set = SetIterable;\n    var IS_ITERABLE_SENTINEL = \"@@__IMMUTABLE_ITERABLE__@@\";\n    var IS_KEYED_SENTINEL = \"@@__IMMUTABLE_KEYED__@@\";\n    var IS_INDEXED_SENTINEL = \"@@__IMMUTABLE_INDEXED__@@\";\n    var IS_ORDERED_SENTINEL = \"@@__IMMUTABLE_ORDERED__@@\";\n    // Used for setting prototype methods that IE8 chokes on.\n    var DELETE = \"delete\";\n    // Constants describing the size of trie nodes.\n    var SHIFT = 5; // Resulted in best performance after ______?\n    var SIZE = 1 << SHIFT;\n    var MASK = SIZE - 1;\n    // A consistent shared value representing \"not set\" which equals nothing other\n    // than itself, and nothing that could be provided externally.\n    var NOT_SET = {};\n    // Boolean references, Rough equivalent of `bool &`.\n    var CHANGE_LENGTH = {\n        value: false\n    };\n    var DID_ALTER = {\n        value: false\n    };\n    function MakeRef(ref) {\n        ref.value = false;\n        return ref;\n    }\n    function SetRef(ref) {\n        ref && (ref.value = true);\n    }\n    // A function which returns a value representing an \"owner\" for transient writes\n    // to tries. The return value will only ever equal itself, and will not equal\n    // the return of any subsequent call of this function.\n    function OwnerID() {}\n    // http://jsperf.com/copy-array-inline\n    function arrCopy(arr, offset) {\n        offset = offset || 0;\n        var len = Math.max(0, arr.length - offset);\n        var newArr = new Array(len);\n        for(var ii = 0; ii < len; ii++){\n            newArr[ii] = arr[ii + offset];\n        }\n        return newArr;\n    }\n    function ensureSize(iter) {\n        if (iter.size === undefined) {\n            iter.size = iter.__iterate(returnTrue);\n        }\n        return iter.size;\n    }\n    function wrapIndex(iter, index) {\n        // This implements \"is array index\" which the ECMAString spec defines as:\n        //\n        //     A String property name P is an array index if and only if\n        //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n        //     to 2^32−1.\n        //\n        // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n        if (typeof index !== \"number\") {\n            var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n            if (\"\" + uint32Index !== index || uint32Index === 4294967295) {\n                return NaN;\n            }\n            index = uint32Index;\n        }\n        return index < 0 ? ensureSize(iter) + index : index;\n    }\n    function returnTrue() {\n        return true;\n    }\n    function wholeSlice(begin, end, size) {\n        return (begin === 0 || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);\n    }\n    function resolveBegin(begin, size) {\n        return resolveIndex(begin, size, 0);\n    }\n    function resolveEnd(end, size) {\n        return resolveIndex(end, size, size);\n    }\n    function resolveIndex(index, size, defaultIndex) {\n        return index === undefined ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === undefined ? index : Math.min(size, index);\n    }\n    /* global Symbol */ var ITERATE_KEYS = 0;\n    var ITERATE_VALUES = 1;\n    var ITERATE_ENTRIES = 2;\n    var REAL_ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n    var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n    function Iterator(next) {\n        this.next = next;\n    }\n    Iterator.prototype.toString = function() {\n        return \"[Iterator]\";\n    };\n    Iterator.KEYS = ITERATE_KEYS;\n    Iterator.VALUES = ITERATE_VALUES;\n    Iterator.ENTRIES = ITERATE_ENTRIES;\n    Iterator.prototype.inspect = Iterator.prototype.toSource = function() {\n        return this.toString();\n    };\n    Iterator.prototype[ITERATOR_SYMBOL] = function() {\n        return this;\n    };\n    function iteratorValue(type, k, v, iteratorResult) {\n        var value = type === 0 ? k : type === 1 ? v : [\n            k,\n            v\n        ];\n        iteratorResult ? iteratorResult.value = value : iteratorResult = {\n            value: value,\n            done: false\n        };\n        return iteratorResult;\n    }\n    function iteratorDone() {\n        return {\n            value: undefined,\n            done: true\n        };\n    }\n    function hasIterator(maybeIterable) {\n        return !!getIteratorFn(maybeIterable);\n    }\n    function isIterator(maybeIterator) {\n        return maybeIterator && typeof maybeIterator.next === \"function\";\n    }\n    function getIterator(iterable) {\n        var iteratorFn = getIteratorFn(iterable);\n        return iteratorFn && iteratorFn.call(iterable);\n    }\n    function getIteratorFn(iterable) {\n        var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);\n        if (typeof iteratorFn === \"function\") {\n            return iteratorFn;\n        }\n    }\n    function isArrayLike(value) {\n        return value && typeof value.length === \"number\";\n    }\n    createClass(Seq, Iterable);\n    function Seq(value) {\n        return value === null || value === undefined ? emptySequence() : isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n    Seq.of = function() {\n        return Seq(arguments);\n    };\n    Seq.prototype.toSeq = function() {\n        return this;\n    };\n    Seq.prototype.toString = function() {\n        return this.__toString(\"Seq {\", \"}\");\n    };\n    Seq.prototype.cacheResult = function() {\n        if (!this._cache && this.__iterateUncached) {\n            this._cache = this.entrySeq().toArray();\n            this.size = this._cache.length;\n        }\n        return this;\n    };\n    // abstract __iterateUncached(fn, reverse)\n    Seq.prototype.__iterate = function(fn, reverse) {\n        return seqIterate(this, fn, reverse, true);\n    };\n    // abstract __iteratorUncached(type, reverse)\n    Seq.prototype.__iterator = function(type, reverse) {\n        return seqIterator(this, type, reverse, true);\n    };\n    createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n        return value === null || value === undefined ? emptySequence().toKeyedSeq() : isIterable(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : keyedSeqFromValue(value);\n    }\n    KeyedSeq.prototype.toKeyedSeq = function() {\n        return this;\n    };\n    createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n        return value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n    IndexedSeq.of = function() {\n        return IndexedSeq(arguments);\n    };\n    IndexedSeq.prototype.toIndexedSeq = function() {\n        return this;\n    };\n    IndexedSeq.prototype.toString = function() {\n        return this.__toString(\"Seq [\", \"]\");\n    };\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n        return seqIterate(this, fn, reverse, false);\n    };\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n        return seqIterator(this, type, reverse, false);\n    };\n    createClass(SetSeq, Seq);\n    function SetSeq(value) {\n        return (value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value).toSetSeq();\n    }\n    SetSeq.of = function() {\n        return SetSeq(arguments);\n    };\n    SetSeq.prototype.toSetSeq = function() {\n        return this;\n    };\n    Seq.isSeq = isSeq;\n    Seq.Keyed = KeyedSeq;\n    Seq.Set = SetSeq;\n    Seq.Indexed = IndexedSeq;\n    var IS_SEQ_SENTINEL = \"@@__IMMUTABLE_SEQ__@@\";\n    Seq.prototype[IS_SEQ_SENTINEL] = true;\n    createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n        this._array = array;\n        this.size = array.length;\n    }\n    ArraySeq.prototype.get = function(index, notSetValue) {\n        return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n        var array = this._array;\n        var maxIndex = array.length - 1;\n        for(var ii = 0; ii <= maxIndex; ii++){\n            if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n                return ii + 1;\n            }\n        }\n        return ii;\n    };\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n        var array = this._array;\n        var maxIndex = array.length - 1;\n        var ii = 0;\n        return new Iterator(function() {\n            return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);\n        });\n    };\n    createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n        var keys = Object.keys(object);\n        this._object = object;\n        this._keys = keys;\n        this.size = keys.length;\n    }\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n        if (notSetValue !== undefined && !this.has(key)) {\n            return notSetValue;\n        }\n        return this._object[key];\n    };\n    ObjectSeq.prototype.has = function(key) {\n        return this._object.hasOwnProperty(key);\n    };\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n        var object = this._object;\n        var keys = this._keys;\n        var maxIndex = keys.length - 1;\n        for(var ii = 0; ii <= maxIndex; ii++){\n            var key = keys[reverse ? maxIndex - ii : ii];\n            if (fn(object[key], key, this) === false) {\n                return ii + 1;\n            }\n        }\n        return ii;\n    };\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n        var object = this._object;\n        var keys = this._keys;\n        var maxIndex = keys.length - 1;\n        var ii = 0;\n        return new Iterator(function() {\n            var key = keys[reverse ? maxIndex - ii : ii];\n            return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);\n        });\n    };\n    ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n    createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n        this._iterable = iterable;\n        this.size = iterable.length || iterable.size;\n    }\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var iterable = this._iterable;\n        var iterator = getIterator(iterable);\n        var iterations = 0;\n        if (isIterator(iterator)) {\n            var step;\n            while(!(step = iterator.next()).done){\n                if (fn(step.value, iterations++, this) === false) {\n                    break;\n                }\n            }\n        }\n        return iterations;\n    };\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var iterable = this._iterable;\n        var iterator = getIterator(iterable);\n        if (!isIterator(iterator)) {\n            return new Iterator(iteratorDone);\n        }\n        var iterations = 0;\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, iterations++, step.value);\n        });\n    };\n    createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n        this._iterator = iterator;\n        this._iteratorCache = [];\n    }\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var iterator = this._iterator;\n        var cache = this._iteratorCache;\n        var iterations = 0;\n        while(iterations < cache.length){\n            if (fn(cache[iterations], iterations++, this) === false) {\n                return iterations;\n            }\n        }\n        var step;\n        while(!(step = iterator.next()).done){\n            var val = step.value;\n            cache[iterations] = val;\n            if (fn(val, iterations++, this) === false) {\n                break;\n            }\n        }\n        return iterations;\n    };\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var iterator = this._iterator;\n        var cache = this._iteratorCache;\n        var iterations = 0;\n        return new Iterator(function() {\n            if (iterations >= cache.length) {\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                cache[iterations] = step.value;\n            }\n            return iteratorValue(type, iterations, cache[iterations++]);\n        });\n    };\n    // # pragma Helper functions\n    function isSeq(maybeSeq) {\n        return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n    }\n    var EMPTY_SEQ;\n    function emptySequence() {\n        return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n    }\n    function keyedSeqFromValue(value) {\n        var seq = Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() : isIterator(value) ? new IteratorSeq(value).fromEntrySeq() : hasIterator(value) ? new IterableSeq(value).fromEntrySeq() : typeof value === \"object\" ? new ObjectSeq(value) : undefined;\n        if (!seq) {\n            throw new TypeError(\"Expected Array or iterable object of [k, v] entries, \" + \"or keyed object: \" + value);\n        }\n        return seq;\n    }\n    function indexedSeqFromValue(value) {\n        var seq = maybeIndexedSeqFromValue(value);\n        if (!seq) {\n            throw new TypeError(\"Expected Array or iterable object of values: \" + value);\n        }\n        return seq;\n    }\n    function seqFromValue(value) {\n        var seq = maybeIndexedSeqFromValue(value) || typeof value === \"object\" && new ObjectSeq(value);\n        if (!seq) {\n            throw new TypeError(\"Expected Array or iterable object of values, or keyed object: \" + value);\n        }\n        return seq;\n    }\n    function maybeIndexedSeqFromValue(value) {\n        return isArrayLike(value) ? new ArraySeq(value) : isIterator(value) ? new IteratorSeq(value) : hasIterator(value) ? new IterableSeq(value) : undefined;\n    }\n    function seqIterate(seq, fn, reverse, useKeys) {\n        var cache = seq._cache;\n        if (cache) {\n            var maxIndex = cache.length - 1;\n            for(var ii = 0; ii <= maxIndex; ii++){\n                var entry = cache[reverse ? maxIndex - ii : ii];\n                if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n                    return ii + 1;\n                }\n            }\n            return ii;\n        }\n        return seq.__iterateUncached(fn, reverse);\n    }\n    function seqIterator(seq, type, reverse, useKeys) {\n        var cache = seq._cache;\n        if (cache) {\n            var maxIndex = cache.length - 1;\n            var ii = 0;\n            return new Iterator(function() {\n                var entry = cache[reverse ? maxIndex - ii : ii];\n                return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n            });\n        }\n        return seq.__iteratorUncached(type, reverse);\n    }\n    function fromJS(json, converter) {\n        return converter ? fromJSWith(converter, json, \"\", {\n            \"\": json\n        }) : fromJSDefault(json);\n    }\n    function fromJSWith(converter, json, key, parentJSON) {\n        if (Array.isArray(json)) {\n            return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k) {\n                return fromJSWith(converter, v, k, json);\n            }));\n        }\n        if (isPlainObj(json)) {\n            return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k) {\n                return fromJSWith(converter, v, k, json);\n            }));\n        }\n        return json;\n    }\n    function fromJSDefault(json) {\n        if (Array.isArray(json)) {\n            return IndexedSeq(json).map(fromJSDefault).toList();\n        }\n        if (isPlainObj(json)) {\n            return KeyedSeq(json).map(fromJSDefault).toMap();\n        }\n        return json;\n    }\n    function isPlainObj(value) {\n        return value && (value.constructor === Object || value.constructor === undefined);\n    }\n    /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */ function is(valueA, valueB) {\n        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n            return true;\n        }\n        if (!valueA || !valueB) {\n            return false;\n        }\n        if (typeof valueA.valueOf === \"function\" && typeof valueB.valueOf === \"function\") {\n            valueA = valueA.valueOf();\n            valueB = valueB.valueOf();\n            if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n                return true;\n            }\n            if (!valueA || !valueB) {\n                return false;\n            }\n        }\n        if (typeof valueA.equals === \"function\" && typeof valueB.equals === \"function\" && valueA.equals(valueB)) {\n            return true;\n        }\n        return false;\n    }\n    function deepEqual(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (!isIterable(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {\n            return false;\n        }\n        if (a.size === 0 && b.size === 0) {\n            return true;\n        }\n        var notAssociative = !isAssociative(a);\n        if (isOrdered(a)) {\n            var entries = a.entries();\n            return b.every(function(v, k) {\n                var entry = entries.next().value;\n                return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n            }) && entries.next().done;\n        }\n        var flipped = false;\n        if (a.size === undefined) {\n            if (b.size === undefined) {\n                if (typeof a.cacheResult === \"function\") {\n                    a.cacheResult();\n                }\n            } else {\n                flipped = true;\n                var _ = a;\n                a = b;\n                b = _;\n            }\n        }\n        var allEqual = true;\n        var bSize = b.__iterate(function(v, k) {\n            if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n                allEqual = false;\n                return false;\n            }\n        });\n        return allEqual && a.size === bSize;\n    }\n    createClass(Repeat, IndexedSeq);\n    function Repeat(value, times) {\n        if (!(this instanceof Repeat)) {\n            return new Repeat(value, times);\n        }\n        this._value = value;\n        this.size = times === undefined ? Infinity : Math.max(0, times);\n        if (this.size === 0) {\n            if (EMPTY_REPEAT) {\n                return EMPTY_REPEAT;\n            }\n            EMPTY_REPEAT = this;\n        }\n    }\n    Repeat.prototype.toString = function() {\n        if (this.size === 0) {\n            return \"Repeat []\";\n        }\n        return \"Repeat [ \" + this._value + \" \" + this.size + \" times ]\";\n    };\n    Repeat.prototype.get = function(index, notSetValue) {\n        return this.has(index) ? this._value : notSetValue;\n    };\n    Repeat.prototype.includes = function(searchValue) {\n        return is(this._value, searchValue);\n    };\n    Repeat.prototype.slice = function(begin, end) {\n        var size = this.size;\n        return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n    Repeat.prototype.reverse = function() {\n        return this;\n    };\n    Repeat.prototype.indexOf = function(searchValue) {\n        if (is(this._value, searchValue)) {\n            return 0;\n        }\n        return -1;\n    };\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n        if (is(this._value, searchValue)) {\n            return this.size;\n        }\n        return -1;\n    };\n    Repeat.prototype.__iterate = function(fn, reverse) {\n        for(var ii = 0; ii < this.size; ii++){\n            if (fn(this._value, ii, this) === false) {\n                return ii + 1;\n            }\n        }\n        return ii;\n    };\n    Repeat.prototype.__iterator = function(type, reverse) {\n        var this$0 = this;\n        var ii = 0;\n        return new Iterator(function() {\n            return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();\n        });\n    };\n    Repeat.prototype.equals = function(other) {\n        return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);\n    };\n    var EMPTY_REPEAT;\n    function invariant(condition, error) {\n        if (!condition) throw new Error(error);\n    }\n    createClass(Range, IndexedSeq);\n    function Range(start, end, step) {\n        if (!(this instanceof Range)) {\n            return new Range(start, end, step);\n        }\n        invariant(step !== 0, \"Cannot step a Range by 0\");\n        start = start || 0;\n        if (end === undefined) {\n            end = Infinity;\n        }\n        step = step === undefined ? 1 : Math.abs(step);\n        if (end < start) {\n            step = -step;\n        }\n        this._start = start;\n        this._end = end;\n        this._step = step;\n        this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n        if (this.size === 0) {\n            if (EMPTY_RANGE) {\n                return EMPTY_RANGE;\n            }\n            EMPTY_RANGE = this;\n        }\n    }\n    Range.prototype.toString = function() {\n        if (this.size === 0) {\n            return \"Range []\";\n        }\n        return \"Range [ \" + this._start + \"...\" + this._end + (this._step > 1 ? \" by \" + this._step : \"\") + \" ]\";\n    };\n    Range.prototype.get = function(index, notSetValue) {\n        return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;\n    };\n    Range.prototype.includes = function(searchValue) {\n        var possibleIndex = (searchValue - this._start) / this._step;\n        return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);\n    };\n    Range.prototype.slice = function(begin, end) {\n        if (wholeSlice(begin, end, this.size)) {\n            return this;\n        }\n        begin = resolveBegin(begin, this.size);\n        end = resolveEnd(end, this.size);\n        if (end <= begin) {\n            return new Range(0, 0);\n        }\n        return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n    Range.prototype.indexOf = function(searchValue) {\n        var offsetValue = searchValue - this._start;\n        if (offsetValue % this._step === 0) {\n            var index = offsetValue / this._step;\n            if (index >= 0 && index < this.size) {\n                return index;\n            }\n        }\n        return -1;\n    };\n    Range.prototype.lastIndexOf = function(searchValue) {\n        return this.indexOf(searchValue);\n    };\n    Range.prototype.__iterate = function(fn, reverse) {\n        var maxIndex = this.size - 1;\n        var step = this._step;\n        var value = reverse ? this._start + maxIndex * step : this._start;\n        for(var ii = 0; ii <= maxIndex; ii++){\n            if (fn(value, ii, this) === false) {\n                return ii + 1;\n            }\n            value += reverse ? -step : step;\n        }\n        return ii;\n    };\n    Range.prototype.__iterator = function(type, reverse) {\n        var maxIndex = this.size - 1;\n        var step = this._step;\n        var value = reverse ? this._start + maxIndex * step : this._start;\n        var ii = 0;\n        return new Iterator(function() {\n            var v = value;\n            value += reverse ? -step : step;\n            return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n        });\n    };\n    Range.prototype.equals = function(other) {\n        return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);\n    };\n    var EMPTY_RANGE;\n    createClass(Collection, Iterable);\n    function Collection() {\n        throw TypeError(\"Abstract\");\n    }\n    createClass(KeyedCollection, Collection);\n    function KeyedCollection() {}\n    createClass(IndexedCollection, Collection);\n    function IndexedCollection() {}\n    createClass(SetCollection, Collection);\n    function SetCollection() {}\n    Collection.Keyed = KeyedCollection;\n    Collection.Indexed = IndexedCollection;\n    Collection.Set = SetCollection;\n    var imul = typeof Math.imul === \"function\" && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {\n        a = a | 0; // int\n        b = b | 0; // int\n        var c = a & 0xffff;\n        var d = b & 0xffff;\n        // Shift by 0 fixes the sign on the high part.\n        return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int\n    };\n    // v8 has an optimization for storing 31-bit signed numbers.\n    // Values which have either 00 or 11 as the high order bits qualify.\n    // This function drops the highest order bit in a signed number, maintaining\n    // the sign bit.\n    function smi(i32) {\n        return i32 >>> 1 & 0x40000000 | i32 & 0xBFFFFFFF;\n    }\n    function hash(o) {\n        if (o === false || o === null || o === undefined) {\n            return 0;\n        }\n        if (typeof o.valueOf === \"function\") {\n            o = o.valueOf();\n            if (o === false || o === null || o === undefined) {\n                return 0;\n            }\n        }\n        if (o === true) {\n            return 1;\n        }\n        var type = typeof o;\n        if (type === \"number\") {\n            var h = o | 0;\n            if (h !== o) {\n                h ^= o * 0xFFFFFFFF;\n            }\n            while(o > 0xFFFFFFFF){\n                o /= 0xFFFFFFFF;\n                h ^= o;\n            }\n            return smi(h);\n        }\n        if (type === \"string\") {\n            return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n        }\n        if (typeof o.hashCode === \"function\") {\n            return o.hashCode();\n        }\n        if (type === \"object\") {\n            return hashJSObj(o);\n        }\n        if (typeof o.toString === \"function\") {\n            return hashString(o.toString());\n        }\n        throw new Error(\"Value type \" + type + \" cannot be hashed.\");\n    }\n    function cachedHashString(string) {\n        var hash = stringHashCache[string];\n        if (hash === undefined) {\n            hash = hashString(string);\n            if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n                STRING_HASH_CACHE_SIZE = 0;\n                stringHashCache = {};\n            }\n            STRING_HASH_CACHE_SIZE++;\n            stringHashCache[string] = hash;\n        }\n        return hash;\n    }\n    // http://jsperf.com/hashing-strings\n    function hashString(string) {\n        // This is the hash from JVM\n        // The hash code for a string is computed as\n        // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n        // where s[i] is the ith character of the string and n is the length of\n        // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n        // (exclusive) by dropping high bits.\n        var hash = 0;\n        for(var ii = 0; ii < string.length; ii++){\n            hash = 31 * hash + string.charCodeAt(ii) | 0;\n        }\n        return smi(hash);\n    }\n    function hashJSObj(obj) {\n        var hash;\n        if (usingWeakMap) {\n            hash = weakMap.get(obj);\n            if (hash !== undefined) {\n                return hash;\n            }\n        }\n        hash = obj[UID_HASH_KEY];\n        if (hash !== undefined) {\n            return hash;\n        }\n        if (!canDefineProperty) {\n            hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n            if (hash !== undefined) {\n                return hash;\n            }\n            hash = getIENodeHash(obj);\n            if (hash !== undefined) {\n                return hash;\n            }\n        }\n        hash = ++objHashUID;\n        if (objHashUID & 0x40000000) {\n            objHashUID = 0;\n        }\n        if (usingWeakMap) {\n            weakMap.set(obj, hash);\n        } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n            throw new Error(\"Non-extensible objects are not allowed as keys.\");\n        } else if (canDefineProperty) {\n            Object.defineProperty(obj, UID_HASH_KEY, {\n                \"enumerable\": false,\n                \"configurable\": false,\n                \"writable\": false,\n                \"value\": hash\n            });\n        } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n            // Since we can't define a non-enumerable property on the object\n            // we'll hijack one of the less-used non-enumerable properties to\n            // save our hash on it. Since this is a function it will not show up in\n            // `JSON.stringify` which is what we want.\n            obj.propertyIsEnumerable = function() {\n                return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n            };\n            obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n        } else if (obj.nodeType !== undefined) {\n            // At this point we couldn't get the IE `uniqueID` to use as a hash\n            // and we couldn't use a non-enumerable property to exploit the\n            // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n            // itself.\n            obj[UID_HASH_KEY] = hash;\n        } else {\n            throw new Error(\"Unable to set a non-enumerable property on object.\");\n        }\n        return hash;\n    }\n    // Get references to ES5 object methods.\n    var isExtensible = Object.isExtensible;\n    // True if Object.defineProperty works as expected. IE8 fails this test.\n    var canDefineProperty = function() {\n        try {\n            Object.defineProperty({}, \"@\", {});\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }();\n    // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n    // and avoid memory leaks from the IE cloneNode bug.\n    function getIENodeHash(node) {\n        if (node && node.nodeType > 0) {\n            switch(node.nodeType){\n                case 1:\n                    return node.uniqueID;\n                case 9:\n                    return node.documentElement && node.documentElement.uniqueID;\n            }\n        }\n    }\n    // If possible, use a WeakMap.\n    var usingWeakMap = typeof WeakMap === \"function\";\n    var weakMap;\n    if (usingWeakMap) {\n        weakMap = new WeakMap();\n    }\n    var objHashUID = 0;\n    var UID_HASH_KEY = \"__immutablehash__\";\n    if (typeof Symbol === \"function\") {\n        UID_HASH_KEY = Symbol(UID_HASH_KEY);\n    }\n    var STRING_HASH_CACHE_MIN_STRLEN = 16;\n    var STRING_HASH_CACHE_MAX_SIZE = 255;\n    var STRING_HASH_CACHE_SIZE = 0;\n    var stringHashCache = {};\n    function assertNotInfinite(size) {\n        invariant(size !== Infinity, \"Cannot perform this action with an infinite size.\");\n    }\n    createClass(Map, KeyedCollection);\n    // @pragma Construction\n    function Map(value) {\n        return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map) {\n            var iter = KeyedIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v, k) {\n                return map.set(k, v);\n            });\n        });\n    }\n    Map.prototype.toString = function() {\n        return this.__toString(\"Map {\", \"}\");\n    };\n    // @pragma Access\n    Map.prototype.get = function(k, notSetValue) {\n        return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;\n    };\n    // @pragma Modification\n    Map.prototype.set = function(k, v) {\n        return updateMap(this, k, v);\n    };\n    Map.prototype.setIn = function(keyPath, v) {\n        return this.updateIn(keyPath, NOT_SET, function() {\n            return v;\n        });\n    };\n    Map.prototype.remove = function(k) {\n        return updateMap(this, k, NOT_SET);\n    };\n    Map.prototype.deleteIn = function(keyPath) {\n        return this.updateIn(keyPath, function() {\n            return NOT_SET;\n        });\n    };\n    Map.prototype.update = function(k, notSetValue, updater) {\n        return arguments.length === 1 ? k(this) : this.updateIn([\n            k\n        ], notSetValue, updater);\n    };\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n        if (!updater) {\n            updater = notSetValue;\n            notSetValue = undefined;\n        }\n        var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);\n        return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n    Map.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._root = null;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyMap();\n    };\n    // @pragma Composition\n    Map.prototype.merge = function() {\n        return mergeIntoMapWith(this, undefined, arguments);\n    };\n    Map.prototype.mergeWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoMapWith(this, merger, iters);\n    };\n    Map.prototype.mergeIn = function(keyPath) {\n        var iters = SLICE$0.call(arguments, 1);\n        return this.updateIn(keyPath, emptyMap(), function(m) {\n            return typeof m.merge === \"function\" ? m.merge.apply(m, iters) : iters[iters.length - 1];\n        });\n    };\n    Map.prototype.mergeDeep = function() {\n        return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n    Map.prototype.mergeDeepWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n    Map.prototype.mergeDeepIn = function(keyPath) {\n        var iters = SLICE$0.call(arguments, 1);\n        return this.updateIn(keyPath, emptyMap(), function(m) {\n            return typeof m.mergeDeep === \"function\" ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];\n        });\n    };\n    Map.prototype.sort = function(comparator) {\n        // Late binding\n        return OrderedMap(sortFactory(this, comparator));\n    };\n    Map.prototype.sortBy = function(mapper, comparator) {\n        // Late binding\n        return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n    // @pragma Mutability\n    Map.prototype.withMutations = function(fn) {\n        var mutable = this.asMutable();\n        fn(mutable);\n        return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n    Map.prototype.asMutable = function() {\n        return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n    Map.prototype.asImmutable = function() {\n        return this.__ensureOwner();\n    };\n    Map.prototype.wasAltered = function() {\n        return this.__altered;\n    };\n    Map.prototype.__iterator = function(type, reverse) {\n        return new MapIterator(this, type, reverse);\n    };\n    Map.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        var iterations = 0;\n        this._root && this._root.iterate(function(entry) {\n            iterations++;\n            return fn(entry[1], entry[0], this$0);\n        }, reverse);\n        return iterations;\n    };\n    Map.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            return this;\n        }\n        return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n    function isMap(maybeMap) {\n        return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n    }\n    Map.isMap = isMap;\n    var IS_MAP_SENTINEL = \"@@__IMMUTABLE_MAP__@@\";\n    var MapPrototype = Map.prototype;\n    MapPrototype[IS_MAP_SENTINEL] = true;\n    MapPrototype[DELETE] = MapPrototype.remove;\n    MapPrototype.removeIn = MapPrototype.deleteIn;\n    // #pragma Trie Nodes\n    function ArrayMapNode(ownerID, entries) {\n        this.ownerID = ownerID;\n        this.entries = entries;\n    }\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        var entries = this.entries;\n        for(var ii = 0, len = entries.length; ii < len; ii++){\n            if (is(key, entries[ii][0])) {\n                return entries[ii][1];\n            }\n        }\n        return notSetValue;\n    };\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        var removed = value === NOT_SET;\n        var entries = this.entries;\n        var idx = 0;\n        for(var len = entries.length; idx < len; idx++){\n            if (is(key, entries[idx][0])) {\n                break;\n            }\n        }\n        var exists = idx < len;\n        if (exists ? entries[idx][1] === value : removed) {\n            return this;\n        }\n        SetRef(didAlter);\n        (removed || !exists) && SetRef(didChangeSize);\n        if (removed && entries.length === 1) {\n            return; // undefined\n        }\n        if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n            return createNodes(ownerID, entries, key, value);\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newEntries = isEditable ? entries : arrCopy(entries);\n        if (exists) {\n            if (removed) {\n                idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n            } else {\n                newEntries[idx] = [\n                    key,\n                    value\n                ];\n            }\n        } else {\n            newEntries.push([\n                key,\n                value\n            ]);\n        }\n        if (isEditable) {\n            this.entries = newEntries;\n            return this;\n        }\n        return new ArrayMapNode(ownerID, newEntries);\n    };\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n        this.ownerID = ownerID;\n        this.bitmap = bitmap;\n        this.nodes = nodes;\n    }\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n        var bitmap = this.bitmap;\n        return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var bit = 1 << keyHashFrag;\n        var bitmap = this.bitmap;\n        var exists = (bitmap & bit) !== 0;\n        if (!exists && value === NOT_SET) {\n            return this;\n        }\n        var idx = popCount(bitmap & bit - 1);\n        var nodes = this.nodes;\n        var node = exists ? nodes[idx] : undefined;\n        var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n        if (newNode === node) {\n            return this;\n        }\n        if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n            return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n        }\n        if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n            return nodes[idx ^ 1];\n        }\n        if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n            return newNode;\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n        var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);\n        if (isEditable) {\n            this.bitmap = newBitmap;\n            this.nodes = newNodes;\n            return this;\n        }\n        return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n    function HashArrayMapNode(ownerID, count, nodes) {\n        this.ownerID = ownerID;\n        this.count = count;\n        this.nodes = nodes;\n    }\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var node = this.nodes[idx];\n        return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var removed = value === NOT_SET;\n        var nodes = this.nodes;\n        var node = nodes[idx];\n        if (removed && !node) {\n            return this;\n        }\n        var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n        if (newNode === node) {\n            return this;\n        }\n        var newCount = this.count;\n        if (!node) {\n            newCount++;\n        } else if (!newNode) {\n            newCount--;\n            if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n                return packNodes(ownerID, nodes, newCount, idx);\n            }\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newNodes = setIn(nodes, idx, newNode, isEditable);\n        if (isEditable) {\n            this.count = newCount;\n            this.nodes = newNodes;\n            return this;\n        }\n        return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n    function HashCollisionNode(ownerID, keyHash, entries) {\n        this.ownerID = ownerID;\n        this.keyHash = keyHash;\n        this.entries = entries;\n    }\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        var entries = this.entries;\n        for(var ii = 0, len = entries.length; ii < len; ii++){\n            if (is(key, entries[ii][0])) {\n                return entries[ii][1];\n            }\n        }\n        return notSetValue;\n    };\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var removed = value === NOT_SET;\n        if (keyHash !== this.keyHash) {\n            if (removed) {\n                return this;\n            }\n            SetRef(didAlter);\n            SetRef(didChangeSize);\n            return mergeIntoNode(this, ownerID, shift, keyHash, [\n                key,\n                value\n            ]);\n        }\n        var entries = this.entries;\n        var idx = 0;\n        for(var len = entries.length; idx < len; idx++){\n            if (is(key, entries[idx][0])) {\n                break;\n            }\n        }\n        var exists = idx < len;\n        if (exists ? entries[idx][1] === value : removed) {\n            return this;\n        }\n        SetRef(didAlter);\n        (removed || !exists) && SetRef(didChangeSize);\n        if (removed && len === 2) {\n            return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newEntries = isEditable ? entries : arrCopy(entries);\n        if (exists) {\n            if (removed) {\n                idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n            } else {\n                newEntries[idx] = [\n                    key,\n                    value\n                ];\n            }\n        } else {\n            newEntries.push([\n                key,\n                value\n            ]);\n        }\n        if (isEditable) {\n            this.entries = newEntries;\n            return this;\n        }\n        return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n    function ValueNode(ownerID, keyHash, entry) {\n        this.ownerID = ownerID;\n        this.keyHash = keyHash;\n        this.entry = entry;\n    }\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        var removed = value === NOT_SET;\n        var keyMatch = is(key, this.entry[0]);\n        if (keyMatch ? value === this.entry[1] : removed) {\n            return this;\n        }\n        SetRef(didAlter);\n        if (removed) {\n            SetRef(didChangeSize);\n            return; // undefined\n        }\n        if (keyMatch) {\n            if (ownerID && ownerID === this.ownerID) {\n                this.entry[1] = value;\n                return this;\n            }\n            return new ValueNode(ownerID, this.keyHash, [\n                key,\n                value\n            ]);\n        }\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, hash(key), [\n            key,\n            value\n        ]);\n    };\n    // #pragma Iterators\n    ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {\n        var entries = this.entries;\n        for(var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++){\n            if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n                return false;\n            }\n        }\n    };\n    BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {\n        var nodes = this.nodes;\n        for(var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++){\n            var node = nodes[reverse ? maxIndex - ii : ii];\n            if (node && node.iterate(fn, reverse) === false) {\n                return false;\n            }\n        }\n    };\n    ValueNode.prototype.iterate = function(fn, reverse) {\n        return fn(this.entry);\n    };\n    createClass(MapIterator, Iterator);\n    function MapIterator(map, type, reverse) {\n        this._type = type;\n        this._reverse = reverse;\n        this._stack = map._root && mapIteratorFrame(map._root);\n    }\n    MapIterator.prototype.next = function() {\n        var type = this._type;\n        var stack = this._stack;\n        while(stack){\n            var node = stack.node;\n            var index = stack.index++;\n            var maxIndex;\n            if (node.entry) {\n                if (index === 0) {\n                    return mapIteratorValue(type, node.entry);\n                }\n            } else if (node.entries) {\n                maxIndex = node.entries.length - 1;\n                if (index <= maxIndex) {\n                    return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n                }\n            } else {\n                maxIndex = node.nodes.length - 1;\n                if (index <= maxIndex) {\n                    var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n                    if (subNode) {\n                        if (subNode.entry) {\n                            return mapIteratorValue(type, subNode.entry);\n                        }\n                        stack = this._stack = mapIteratorFrame(subNode, stack);\n                    }\n                    continue;\n                }\n            }\n            stack = this._stack = this._stack.__prev;\n        }\n        return iteratorDone();\n    };\n    function mapIteratorValue(type, entry) {\n        return iteratorValue(type, entry[0], entry[1]);\n    }\n    function mapIteratorFrame(node, prev) {\n        return {\n            node: node,\n            index: 0,\n            __prev: prev\n        };\n    }\n    function makeMap(size, root, ownerID, hash) {\n        var map = Object.create(MapPrototype);\n        map.size = size;\n        map._root = root;\n        map.__ownerID = ownerID;\n        map.__hash = hash;\n        map.__altered = false;\n        return map;\n    }\n    var EMPTY_MAP;\n    function emptyMap() {\n        return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n    }\n    function updateMap(map, k, v) {\n        var newRoot;\n        var newSize;\n        if (!map._root) {\n            if (v === NOT_SET) {\n                return map;\n            }\n            newSize = 1;\n            newRoot = new ArrayMapNode(map.__ownerID, [\n                [\n                    k,\n                    v\n                ]\n            ]);\n        } else {\n            var didChangeSize = MakeRef(CHANGE_LENGTH);\n            var didAlter = MakeRef(DID_ALTER);\n            newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n            if (!didAlter.value) {\n                return map;\n            }\n            newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n        }\n        if (map.__ownerID) {\n            map.size = newSize;\n            map._root = newRoot;\n            map.__hash = undefined;\n            map.__altered = true;\n            return map;\n        }\n        return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n    }\n    function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (!node) {\n            if (value === NOT_SET) {\n                return node;\n            }\n            SetRef(didAlter);\n            SetRef(didChangeSize);\n            return new ValueNode(ownerID, keyHash, [\n                key,\n                value\n            ]);\n        }\n        return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n    }\n    function isLeafNode(node) {\n        return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n    }\n    function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n        if (node.keyHash === keyHash) {\n            return new HashCollisionNode(ownerID, keyHash, [\n                node.entry,\n                entry\n            ]);\n        }\n        var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n        var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var newNode;\n        var nodes = idx1 === idx2 ? [\n            mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)\n        ] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [\n            node,\n            newNode\n        ] : [\n            newNode,\n            node\n        ]);\n        return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);\n    }\n    function createNodes(ownerID, entries, key, value) {\n        if (!ownerID) {\n            ownerID = new OwnerID();\n        }\n        var node = new ValueNode(ownerID, hash(key), [\n            key,\n            value\n        ]);\n        for(var ii = 0; ii < entries.length; ii++){\n            var entry = entries[ii];\n            node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n        }\n        return node;\n    }\n    function packNodes(ownerID, nodes, count, excluding) {\n        var bitmap = 0;\n        var packedII = 0;\n        var packedNodes = new Array(count);\n        for(var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1){\n            var node = nodes[ii];\n            if (node !== undefined && ii !== excluding) {\n                bitmap |= bit;\n                packedNodes[packedII++] = node;\n            }\n        }\n        return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n    }\n    function expandNodes(ownerID, nodes, bitmap, including, node) {\n        var count = 0;\n        var expandedNodes = new Array(SIZE);\n        for(var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1){\n            expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n        }\n        expandedNodes[including] = node;\n        return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n    }\n    function mergeIntoMapWith(map, merger, iterables) {\n        var iters = [];\n        for(var ii = 0; ii < iterables.length; ii++){\n            var value = iterables[ii];\n            var iter = KeyedIterable(value);\n            if (!isIterable(value)) {\n                iter = iter.map(function(v) {\n                    return fromJS(v);\n                });\n            }\n            iters.push(iter);\n        }\n        return mergeIntoCollectionWith(map, merger, iters);\n    }\n    function deepMerger(existing, value, key) {\n        return existing && existing.mergeDeep && isIterable(value) ? existing.mergeDeep(value) : is(existing, value) ? existing : value;\n    }\n    function deepMergerWith(merger) {\n        return function(existing, value, key) {\n            if (existing && existing.mergeDeepWith && isIterable(value)) {\n                return existing.mergeDeepWith(merger, value);\n            }\n            var nextValue = merger(existing, value, key);\n            return is(existing, nextValue) ? existing : nextValue;\n        };\n    }\n    function mergeIntoCollectionWith(collection, merger, iters) {\n        iters = iters.filter(function(x) {\n            return x.size !== 0;\n        });\n        if (iters.length === 0) {\n            return collection;\n        }\n        if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n            return collection.constructor(iters[0]);\n        }\n        return collection.withMutations(function(collection) {\n            var mergeIntoMap = merger ? function(value, key) {\n                collection.update(key, NOT_SET, function(existing) {\n                    return existing === NOT_SET ? value : merger(existing, value, key);\n                });\n            } : function(value, key) {\n                collection.set(key, value);\n            };\n            for(var ii = 0; ii < iters.length; ii++){\n                iters[ii].forEach(mergeIntoMap);\n            }\n        });\n    }\n    function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n        var isNotSet = existing === NOT_SET;\n        var step = keyPathIter.next();\n        if (step.done) {\n            var existingValue = isNotSet ? notSetValue : existing;\n            var newValue = updater(existingValue);\n            return newValue === existingValue ? existing : newValue;\n        }\n        invariant(isNotSet || existing && existing.set, \"invalid keyPath\");\n        var key = step.value;\n        var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n        var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);\n        return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n    }\n    function popCount(x) {\n        x = x - (x >> 1 & 0x55555555);\n        x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n        x = x + (x >> 4) & 0x0f0f0f0f;\n        x = x + (x >> 8);\n        x = x + (x >> 16);\n        return x & 0x7f;\n    }\n    function setIn(array, idx, val, canEdit) {\n        var newArray = canEdit ? array : arrCopy(array);\n        newArray[idx] = val;\n        return newArray;\n    }\n    function spliceIn(array, idx, val, canEdit) {\n        var newLen = array.length + 1;\n        if (canEdit && idx + 1 === newLen) {\n            array[idx] = val;\n            return array;\n        }\n        var newArray = new Array(newLen);\n        var after = 0;\n        for(var ii = 0; ii < newLen; ii++){\n            if (ii === idx) {\n                newArray[ii] = val;\n                after = -1;\n            } else {\n                newArray[ii] = array[ii + after];\n            }\n        }\n        return newArray;\n    }\n    function spliceOut(array, idx, canEdit) {\n        var newLen = array.length - 1;\n        if (canEdit && idx === newLen) {\n            array.pop();\n            return array;\n        }\n        var newArray = new Array(newLen);\n        var after = 0;\n        for(var ii = 0; ii < newLen; ii++){\n            if (ii === idx) {\n                after = 1;\n            }\n            newArray[ii] = array[ii + after];\n        }\n        return newArray;\n    }\n    var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n    var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n    var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n    createClass(List, IndexedCollection);\n    // @pragma Construction\n    function List(value) {\n        var empty = emptyList();\n        if (value === null || value === undefined) {\n            return empty;\n        }\n        if (isList(value)) {\n            return value;\n        }\n        var iter = IndexedIterable(value);\n        var size = iter.size;\n        if (size === 0) {\n            return empty;\n        }\n        assertNotInfinite(size);\n        if (size > 0 && size < SIZE) {\n            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n        }\n        return empty.withMutations(function(list) {\n            list.setSize(size);\n            iter.forEach(function(v, i) {\n                return list.set(i, v);\n            });\n        });\n    }\n    List.of = function() {\n        return this(arguments);\n    };\n    List.prototype.toString = function() {\n        return this.__toString(\"List [\", \"]\");\n    };\n    // @pragma Access\n    List.prototype.get = function(index, notSetValue) {\n        index = wrapIndex(this, index);\n        if (index >= 0 && index < this.size) {\n            index += this._origin;\n            var node = listNodeFor(this, index);\n            return node && node.array[index & MASK];\n        }\n        return notSetValue;\n    };\n    // @pragma Modification\n    List.prototype.set = function(index, value) {\n        return updateList(this, index, value);\n    };\n    List.prototype.remove = function(index) {\n        return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n    };\n    List.prototype.insert = function(index, value) {\n        return this.splice(index, 0, value);\n    };\n    List.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = this._origin = this._capacity = 0;\n            this._level = SHIFT;\n            this._root = this._tail = null;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyList();\n    };\n    List.prototype.push = function() {\n        var values = arguments;\n        var oldSize = this.size;\n        return this.withMutations(function(list) {\n            setListBounds(list, 0, oldSize + values.length);\n            for(var ii = 0; ii < values.length; ii++){\n                list.set(oldSize + ii, values[ii]);\n            }\n        });\n    };\n    List.prototype.pop = function() {\n        return setListBounds(this, 0, -1);\n    };\n    List.prototype.unshift = function() {\n        var values = arguments;\n        return this.withMutations(function(list) {\n            setListBounds(list, -values.length);\n            for(var ii = 0; ii < values.length; ii++){\n                list.set(ii, values[ii]);\n            }\n        });\n    };\n    List.prototype.shift = function() {\n        return setListBounds(this, 1);\n    };\n    // @pragma Composition\n    List.prototype.merge = function() {\n        return mergeIntoListWith(this, undefined, arguments);\n    };\n    List.prototype.mergeWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoListWith(this, merger, iters);\n    };\n    List.prototype.mergeDeep = function() {\n        return mergeIntoListWith(this, deepMerger, arguments);\n    };\n    List.prototype.mergeDeepWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n    List.prototype.setSize = function(size) {\n        return setListBounds(this, 0, size);\n    };\n    // @pragma Iteration\n    List.prototype.slice = function(begin, end) {\n        var size = this.size;\n        if (wholeSlice(begin, end, size)) {\n            return this;\n        }\n        return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));\n    };\n    List.prototype.__iterator = function(type, reverse) {\n        var index = 0;\n        var values = iterateList(this, reverse);\n        return new Iterator(function() {\n            var value = values();\n            return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);\n        });\n    };\n    List.prototype.__iterate = function(fn, reverse) {\n        var index = 0;\n        var values = iterateList(this, reverse);\n        var value;\n        while((value = values()) !== DONE){\n            if (fn(value, index++, this) === false) {\n                break;\n            }\n        }\n        return index;\n    };\n    List.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            return this;\n        }\n        return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n    function isList(maybeList) {\n        return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n    }\n    List.isList = isList;\n    var IS_LIST_SENTINEL = \"@@__IMMUTABLE_LIST__@@\";\n    var ListPrototype = List.prototype;\n    ListPrototype[IS_LIST_SENTINEL] = true;\n    ListPrototype[DELETE] = ListPrototype.remove;\n    ListPrototype.setIn = MapPrototype.setIn;\n    ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;\n    ListPrototype.update = MapPrototype.update;\n    ListPrototype.updateIn = MapPrototype.updateIn;\n    ListPrototype.mergeIn = MapPrototype.mergeIn;\n    ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n    ListPrototype.withMutations = MapPrototype.withMutations;\n    ListPrototype.asMutable = MapPrototype.asMutable;\n    ListPrototype.asImmutable = MapPrototype.asImmutable;\n    ListPrototype.wasAltered = MapPrototype.wasAltered;\n    function VNode(array, ownerID) {\n        this.array = array;\n        this.ownerID = ownerID;\n    }\n    // TODO: seems like these methods are very similar\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n        if (index === level ? 1 << level :  false || this.array.length === 0) {\n            return this;\n        }\n        var originIndex = index >>> level & MASK;\n        if (originIndex >= this.array.length) {\n            return new VNode([], ownerID);\n        }\n        var removingFirst = originIndex === 0;\n        var newChild;\n        if (level > 0) {\n            var oldChild = this.array[originIndex];\n            newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n            if (newChild === oldChild && removingFirst) {\n                return this;\n            }\n        }\n        if (removingFirst && !newChild) {\n            return this;\n        }\n        var editable = editableVNode(this, ownerID);\n        if (!removingFirst) {\n            for(var ii = 0; ii < originIndex; ii++){\n                editable.array[ii] = undefined;\n            }\n        }\n        if (newChild) {\n            editable.array[originIndex] = newChild;\n        }\n        return editable;\n    };\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n        if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n            return this;\n        }\n        var sizeIndex = index - 1 >>> level & MASK;\n        if (sizeIndex >= this.array.length) {\n            return this;\n        }\n        var newChild;\n        if (level > 0) {\n            var oldChild = this.array[sizeIndex];\n            newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n            if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n                return this;\n            }\n        }\n        var editable = editableVNode(this, ownerID);\n        editable.array.splice(sizeIndex + 1);\n        if (newChild) {\n            editable.array[sizeIndex] = newChild;\n        }\n        return editable;\n    };\n    var DONE = {};\n    function iterateList(list, reverse) {\n        var left = list._origin;\n        var right = list._capacity;\n        var tailPos = getTailOffset(right);\n        var tail = list._tail;\n        return iterateNodeOrLeaf(list._root, list._level, 0);\n        function iterateNodeOrLeaf(node, level, offset) {\n            return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);\n        }\n        function iterateLeaf(node, offset) {\n            var array = offset === tailPos ? tail && tail.array : node && node.array;\n            var from = offset > left ? 0 : left - offset;\n            var to = right - offset;\n            if (to > SIZE) {\n                to = SIZE;\n            }\n            return function() {\n                if (from === to) {\n                    return DONE;\n                }\n                var idx = reverse ? --to : from++;\n                return array && array[idx];\n            };\n        }\n        function iterateNode(node, level, offset) {\n            var values;\n            var array = node && node.array;\n            var from = offset > left ? 0 : left - offset >> level;\n            var to = (right - offset >> level) + 1;\n            if (to > SIZE) {\n                to = SIZE;\n            }\n            return function() {\n                do {\n                    if (values) {\n                        var value = values();\n                        if (value !== DONE) {\n                            return value;\n                        }\n                        values = null;\n                    }\n                    if (from === to) {\n                        return DONE;\n                    }\n                    var idx = reverse ? --to : from++;\n                    values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));\n                }while (true);\n            };\n        }\n    }\n    function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n        var list = Object.create(ListPrototype);\n        list.size = capacity - origin;\n        list._origin = origin;\n        list._capacity = capacity;\n        list._level = level;\n        list._root = root;\n        list._tail = tail;\n        list.__ownerID = ownerID;\n        list.__hash = hash;\n        list.__altered = false;\n        return list;\n    }\n    var EMPTY_LIST;\n    function emptyList() {\n        return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n    }\n    function updateList(list, index, value) {\n        index = wrapIndex(list, index);\n        if (index !== index) {\n            return list;\n        }\n        if (index >= list.size || index < 0) {\n            return list.withMutations(function(list) {\n                index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);\n            });\n        }\n        index += list._origin;\n        var newTail = list._tail;\n        var newRoot = list._root;\n        var didAlter = MakeRef(DID_ALTER);\n        if (index >= getTailOffset(list._capacity)) {\n            newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n        } else {\n            newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n        }\n        if (!didAlter.value) {\n            return list;\n        }\n        if (list.__ownerID) {\n            list._root = newRoot;\n            list._tail = newTail;\n            list.__hash = undefined;\n            list.__altered = true;\n            return list;\n        }\n        return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n    }\n    function updateVNode(node, ownerID, level, index, value, didAlter) {\n        var idx = index >>> level & MASK;\n        var nodeHas = node && idx < node.array.length;\n        if (!nodeHas && value === undefined) {\n            return node;\n        }\n        var newNode;\n        if (level > 0) {\n            var lowerNode = node && node.array[idx];\n            var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n            if (newLowerNode === lowerNode) {\n                return node;\n            }\n            newNode = editableVNode(node, ownerID);\n            newNode.array[idx] = newLowerNode;\n            return newNode;\n        }\n        if (nodeHas && node.array[idx] === value) {\n            return node;\n        }\n        SetRef(didAlter);\n        newNode = editableVNode(node, ownerID);\n        if (value === undefined && idx === newNode.array.length - 1) {\n            newNode.array.pop();\n        } else {\n            newNode.array[idx] = value;\n        }\n        return newNode;\n    }\n    function editableVNode(node, ownerID) {\n        if (ownerID && node && ownerID === node.ownerID) {\n            return node;\n        }\n        return new VNode(node ? node.array.slice() : [], ownerID);\n    }\n    function listNodeFor(list, rawIndex) {\n        if (rawIndex >= getTailOffset(list._capacity)) {\n            return list._tail;\n        }\n        if (rawIndex < 1 << list._level + SHIFT) {\n            var node = list._root;\n            var level = list._level;\n            while(node && level > 0){\n                node = node.array[rawIndex >>> level & MASK];\n                level -= SHIFT;\n            }\n            return node;\n        }\n    }\n    function setListBounds(list, begin, end) {\n        // Sanitize begin & end using this shorthand for ToInt32(argument)\n        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n        if (begin !== undefined) {\n            begin = begin | 0;\n        }\n        if (end !== undefined) {\n            end = end | 0;\n        }\n        var owner = list.__ownerID || new OwnerID();\n        var oldOrigin = list._origin;\n        var oldCapacity = list._capacity;\n        var newOrigin = oldOrigin + begin;\n        var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n        if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n            return list;\n        }\n        // If it's going to end after it starts, it's empty.\n        if (newOrigin >= newCapacity) {\n            return list.clear();\n        }\n        var newLevel = list._level;\n        var newRoot = list._root;\n        // New origin might need creating a higher root.\n        var offsetShift = 0;\n        while(newOrigin + offsetShift < 0){\n            newRoot = new VNode(newRoot && newRoot.array.length ? [\n                undefined,\n                newRoot\n            ] : [], owner);\n            newLevel += SHIFT;\n            offsetShift += 1 << newLevel;\n        }\n        if (offsetShift) {\n            newOrigin += offsetShift;\n            oldOrigin += offsetShift;\n            newCapacity += offsetShift;\n            oldCapacity += offsetShift;\n        }\n        var oldTailOffset = getTailOffset(oldCapacity);\n        var newTailOffset = getTailOffset(newCapacity);\n        // New size might need creating a higher root.\n        while(newTailOffset >= 1 << newLevel + SHIFT){\n            newRoot = new VNode(newRoot && newRoot.array.length ? [\n                newRoot\n            ] : [], owner);\n            newLevel += SHIFT;\n        }\n        // Locate or create the new tail.\n        var oldTail = list._tail;\n        var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n        // Merge Tail into tree.\n        if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n            newRoot = editableVNode(newRoot, owner);\n            var node = newRoot;\n            for(var level = newLevel; level > SHIFT; level -= SHIFT){\n                var idx = oldTailOffset >>> level & MASK;\n                node = node.array[idx] = editableVNode(node.array[idx], owner);\n            }\n            node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;\n        }\n        // If the size has been reduced, there's a chance the tail needs to be trimmed.\n        if (newCapacity < oldCapacity) {\n            newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n        }\n        // If the new origin is within the tail, then we do not need a root.\n        if (newOrigin >= newTailOffset) {\n            newOrigin -= newTailOffset;\n            newCapacity -= newTailOffset;\n            newLevel = SHIFT;\n            newRoot = null;\n            newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n        // Otherwise, if the root has been trimmed, garbage collect.\n        } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n            offsetShift = 0;\n            // Identify the new top root node of the subtree of the old root.\n            while(newRoot){\n                var beginIndex = newOrigin >>> newLevel & MASK;\n                if (beginIndex !== newTailOffset >>> newLevel & MASK) {\n                    break;\n                }\n                if (beginIndex) {\n                    offsetShift += (1 << newLevel) * beginIndex;\n                }\n                newLevel -= SHIFT;\n                newRoot = newRoot.array[beginIndex];\n            }\n            // Trim the new sides of the new root.\n            if (newRoot && newOrigin > oldOrigin) {\n                newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n            }\n            if (newRoot && newTailOffset < oldTailOffset) {\n                newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n            }\n            if (offsetShift) {\n                newOrigin -= offsetShift;\n                newCapacity -= offsetShift;\n            }\n        }\n        if (list.__ownerID) {\n            list.size = newCapacity - newOrigin;\n            list._origin = newOrigin;\n            list._capacity = newCapacity;\n            list._level = newLevel;\n            list._root = newRoot;\n            list._tail = newTail;\n            list.__hash = undefined;\n            list.__altered = true;\n            return list;\n        }\n        return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n    }\n    function mergeIntoListWith(list, merger, iterables) {\n        var iters = [];\n        var maxSize = 0;\n        for(var ii = 0; ii < iterables.length; ii++){\n            var value = iterables[ii];\n            var iter = IndexedIterable(value);\n            if (iter.size > maxSize) {\n                maxSize = iter.size;\n            }\n            if (!isIterable(value)) {\n                iter = iter.map(function(v) {\n                    return fromJS(v);\n                });\n            }\n            iters.push(iter);\n        }\n        if (maxSize > list.size) {\n            list = list.setSize(maxSize);\n        }\n        return mergeIntoCollectionWith(list, merger, iters);\n    }\n    function getTailOffset(size) {\n        return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;\n    }\n    createClass(OrderedMap, Map);\n    // @pragma Construction\n    function OrderedMap(value) {\n        return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map) {\n            var iter = KeyedIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v, k) {\n                return map.set(k, v);\n            });\n        });\n    }\n    OrderedMap.of = function() {\n        return this(arguments);\n    };\n    OrderedMap.prototype.toString = function() {\n        return this.__toString(\"OrderedMap {\", \"}\");\n    };\n    // @pragma Access\n    OrderedMap.prototype.get = function(k, notSetValue) {\n        var index = this._map.get(k);\n        return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n    // @pragma Modification\n    OrderedMap.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._map.clear();\n            this._list.clear();\n            return this;\n        }\n        return emptyOrderedMap();\n    };\n    OrderedMap.prototype.set = function(k, v) {\n        return updateOrderedMap(this, k, v);\n    };\n    OrderedMap.prototype.remove = function(k) {\n        return updateOrderedMap(this, k, NOT_SET);\n    };\n    OrderedMap.prototype.wasAltered = function() {\n        return this._map.wasAltered() || this._list.wasAltered();\n    };\n    OrderedMap.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._list.__iterate(function(entry) {\n            return entry && fn(entry[1], entry[0], this$0);\n        }, reverse);\n    };\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n        return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map.__ensureOwner(ownerID);\n        var newList = this._list.__ensureOwner(ownerID);\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this._map = newMap;\n            this._list = newList;\n            return this;\n        }\n        return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n    function isOrderedMap(maybeOrderedMap) {\n        return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n    }\n    OrderedMap.isOrderedMap = isOrderedMap;\n    OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n    OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n    function makeOrderedMap(map, list, ownerID, hash) {\n        var omap = Object.create(OrderedMap.prototype);\n        omap.size = map ? map.size : 0;\n        omap._map = map;\n        omap._list = list;\n        omap.__ownerID = ownerID;\n        omap.__hash = hash;\n        return omap;\n    }\n    var EMPTY_ORDERED_MAP;\n    function emptyOrderedMap() {\n        return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n    }\n    function updateOrderedMap(omap, k, v) {\n        var map = omap._map;\n        var list = omap._list;\n        var i = map.get(k);\n        var has = i !== undefined;\n        var newMap;\n        var newList;\n        if (v === NOT_SET) {\n            if (!has) {\n                return omap;\n            }\n            if (list.size >= SIZE && list.size >= map.size * 2) {\n                newList = list.filter(function(entry, idx) {\n                    return entry !== undefined && i !== idx;\n                });\n                newMap = newList.toKeyedSeq().map(function(entry) {\n                    return entry[0];\n                }).flip().toMap();\n                if (omap.__ownerID) {\n                    newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n                }\n            } else {\n                newMap = map.remove(k);\n                newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n            }\n        } else {\n            if (has) {\n                if (v === list.get(i)[1]) {\n                    return omap;\n                }\n                newMap = map;\n                newList = list.set(i, [\n                    k,\n                    v\n                ]);\n            } else {\n                newMap = map.set(k, list.size);\n                newList = list.set(list.size, [\n                    k,\n                    v\n                ]);\n            }\n        }\n        if (omap.__ownerID) {\n            omap.size = newMap.size;\n            omap._map = newMap;\n            omap._list = newList;\n            omap.__hash = undefined;\n            return omap;\n        }\n        return makeOrderedMap(newMap, newList);\n    }\n    createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n        this._iter = indexed;\n        this._useKeys = useKeys;\n        this.size = indexed.size;\n    }\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n        return this._iter.get(key, notSetValue);\n    };\n    ToKeyedSequence.prototype.has = function(key) {\n        return this._iter.has(key);\n    };\n    ToKeyedSequence.prototype.valueSeq = function() {\n        return this._iter.valueSeq();\n    };\n    ToKeyedSequence.prototype.reverse = function() {\n        var this$0 = this;\n        var reversedSequence = reverseFactory(this, true);\n        if (!this._useKeys) {\n            reversedSequence.valueSeq = function() {\n                return this$0._iter.toSeq().reverse();\n            };\n        }\n        return reversedSequence;\n    };\n    ToKeyedSequence.prototype.map = function(mapper, context) {\n        var this$0 = this;\n        var mappedSequence = mapFactory(this, mapper, context);\n        if (!this._useKeys) {\n            mappedSequence.valueSeq = function() {\n                return this$0._iter.toSeq().map(mapper, context);\n            };\n        }\n        return mappedSequence;\n    };\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        var ii;\n        return this._iter.__iterate(this._useKeys ? function(v, k) {\n            return fn(v, k, this$0);\n        } : (ii = reverse ? resolveSize(this) : 0, function(v) {\n            return fn(v, reverse ? --ii : ii++, this$0);\n        }), reverse);\n    };\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n        if (this._useKeys) {\n            return this._iter.__iterator(type, reverse);\n        }\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        var ii = reverse ? resolveSize(this) : 0;\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n        });\n    };\n    ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n    createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n        this._iter = iter;\n        this.size = iter.size;\n    }\n    ToIndexedSequence.prototype.includes = function(value) {\n        return this._iter.includes(value);\n    };\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        var iterations = 0;\n        return this._iter.__iterate(function(v) {\n            return fn(v, iterations++, this$0);\n        }, reverse);\n    };\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        var iterations = 0;\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, iterations++, step.value, step);\n        });\n    };\n    createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n        this._iter = iter;\n        this.size = iter.size;\n    }\n    ToSetSequence.prototype.has = function(key) {\n        return this._iter.includes(key);\n    };\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._iter.__iterate(function(v) {\n            return fn(v, v, this$0);\n        }, reverse);\n    };\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, step.value, step.value, step);\n        });\n    };\n    createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n        this._iter = entries;\n        this.size = entries.size;\n    }\n    FromEntriesSequence.prototype.entrySeq = function() {\n        return this._iter.toSeq();\n    };\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._iter.__iterate(function(entry) {\n            // Check if entry exists first so array access doesn't throw for holes\n            // in the parent iteration.\n            if (entry) {\n                validateEntry(entry);\n                var indexedIterable = isIterable(entry);\n                return fn(indexedIterable ? entry.get(1) : entry[1], indexedIterable ? entry.get(0) : entry[0], this$0);\n            }\n        }, reverse);\n    };\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        return new Iterator(function() {\n            while(true){\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                // Check if entry exists first so array access doesn't throw for holes\n                // in the parent iteration.\n                if (entry) {\n                    validateEntry(entry);\n                    var indexedIterable = isIterable(entry);\n                    return iteratorValue(type, indexedIterable ? entry.get(0) : entry[0], indexedIterable ? entry.get(1) : entry[1], step);\n                }\n            }\n        });\n    };\n    ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\n    function flipFactory(iterable) {\n        var flipSequence = makeSequence(iterable);\n        flipSequence._iter = iterable;\n        flipSequence.size = iterable.size;\n        flipSequence.flip = function() {\n            return iterable;\n        };\n        flipSequence.reverse = function() {\n            var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n            reversedSequence.flip = function() {\n                return iterable.reverse();\n            };\n            return reversedSequence;\n        };\n        flipSequence.has = function(key) {\n            return iterable.includes(key);\n        };\n        flipSequence.includes = function(key) {\n            return iterable.has(key);\n        };\n        flipSequence.cacheResult = cacheResultThrough;\n        flipSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            return iterable.__iterate(function(v, k) {\n                return fn(k, v, this$0) !== false;\n            }, reverse);\n        };\n        flipSequence.__iteratorUncached = function(type, reverse) {\n            if (type === ITERATE_ENTRIES) {\n                var iterator = iterable.__iterator(type, reverse);\n                return new Iterator(function() {\n                    var step = iterator.next();\n                    if (!step.done) {\n                        var k = step.value[0];\n                        step.value[0] = step.value[1];\n                        step.value[1] = k;\n                    }\n                    return step;\n                });\n            }\n            return iterable.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);\n        };\n        return flipSequence;\n    }\n    function mapFactory(iterable, mapper, context) {\n        var mappedSequence = makeSequence(iterable);\n        mappedSequence.size = iterable.size;\n        mappedSequence.has = function(key) {\n            return iterable.has(key);\n        };\n        mappedSequence.get = function(key, notSetValue) {\n            var v = iterable.get(key, NOT_SET);\n            return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);\n        };\n        mappedSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            return iterable.__iterate(function(v, k, c) {\n                return fn(mapper.call(context, v, k, c), k, this$0) !== false;\n            }, reverse);\n        };\n        mappedSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            return new Iterator(function() {\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                var key = entry[0];\n                return iteratorValue(type, key, mapper.call(context, entry[1], key, iterable), step);\n            });\n        };\n        return mappedSequence;\n    }\n    function reverseFactory(iterable, useKeys) {\n        var reversedSequence = makeSequence(iterable);\n        reversedSequence._iter = iterable;\n        reversedSequence.size = iterable.size;\n        reversedSequence.reverse = function() {\n            return iterable;\n        };\n        if (iterable.flip) {\n            reversedSequence.flip = function() {\n                var flipSequence = flipFactory(iterable);\n                flipSequence.reverse = function() {\n                    return iterable.flip();\n                };\n                return flipSequence;\n            };\n        }\n        reversedSequence.get = function(key, notSetValue) {\n            return iterable.get(useKeys ? key : -1 - key, notSetValue);\n        };\n        reversedSequence.has = function(key) {\n            return iterable.has(useKeys ? key : -1 - key);\n        };\n        reversedSequence.includes = function(value) {\n            return iterable.includes(value);\n        };\n        reversedSequence.cacheResult = cacheResultThrough;\n        reversedSequence.__iterate = function(fn, reverse) {\n            var this$0 = this;\n            return iterable.__iterate(function(v, k) {\n                return fn(v, k, this$0);\n            }, !reverse);\n        };\n        reversedSequence.__iterator = function(type, reverse) {\n            return iterable.__iterator(type, !reverse);\n        };\n        return reversedSequence;\n    }\n    function filterFactory(iterable, predicate, context, useKeys) {\n        var filterSequence = makeSequence(iterable);\n        if (useKeys) {\n            filterSequence.has = function(key) {\n                var v = iterable.get(key, NOT_SET);\n                return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n            };\n            filterSequence.get = function(key, notSetValue) {\n                var v = iterable.get(key, NOT_SET);\n                return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;\n            };\n        }\n        filterSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            var iterations = 0;\n            iterable.__iterate(function(v, k, c) {\n                if (predicate.call(context, v, k, c)) {\n                    iterations++;\n                    return fn(v, useKeys ? k : iterations - 1, this$0);\n                }\n            }, reverse);\n            return iterations;\n        };\n        filterSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            var iterations = 0;\n            return new Iterator(function() {\n                while(true){\n                    var step = iterator.next();\n                    if (step.done) {\n                        return step;\n                    }\n                    var entry = step.value;\n                    var key = entry[0];\n                    var value = entry[1];\n                    if (predicate.call(context, value, key, iterable)) {\n                        return iteratorValue(type, useKeys ? key : iterations++, value, step);\n                    }\n                }\n            });\n        };\n        return filterSequence;\n    }\n    function countByFactory(iterable, grouper, context) {\n        var groups = Map().asMutable();\n        iterable.__iterate(function(v, k) {\n            groups.update(grouper.call(context, v, k, iterable), 0, function(a) {\n                return a + 1;\n            });\n        });\n        return groups.asImmutable();\n    }\n    function groupByFactory(iterable, grouper, context) {\n        var isKeyedIter = isKeyed(iterable);\n        var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n        iterable.__iterate(function(v, k) {\n            groups.update(grouper.call(context, v, k, iterable), function(a) {\n                return a = a || [], a.push(isKeyedIter ? [\n                    k,\n                    v\n                ] : v), a;\n            });\n        });\n        var coerce = iterableClass(iterable);\n        return groups.map(function(arr) {\n            return reify(iterable, coerce(arr));\n        });\n    }\n    function sliceFactory(iterable, begin, end, useKeys) {\n        var originalSize = iterable.size;\n        // Sanitize begin & end using this shorthand for ToInt32(argument)\n        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n        if (begin !== undefined) {\n            begin = begin | 0;\n        }\n        if (end !== undefined) {\n            end = end | 0;\n        }\n        if (wholeSlice(begin, end, originalSize)) {\n            return iterable;\n        }\n        var resolvedBegin = resolveBegin(begin, originalSize);\n        var resolvedEnd = resolveEnd(end, originalSize);\n        // begin or end will be NaN if they were provided as negative numbers and\n        // this iterable's size is unknown. In that case, cache first so there is\n        // a known size and these do not resolve to NaN.\n        if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n            return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n        }\n        // Note: resolvedEnd is undefined when the original sequence's length is\n        // unknown and this slice did not supply an end and should contain all\n        // elements after resolvedBegin.\n        // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n        var resolvedSize = resolvedEnd - resolvedBegin;\n        var sliceSize;\n        if (resolvedSize === resolvedSize) {\n            sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n        }\n        var sliceSeq = makeSequence(iterable);\n        // If iterable.size is undefined, the size of the realized sliceSeq is\n        // unknown at this point unless the number of items to slice is 0\n        sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n        if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n            sliceSeq.get = function(index, notSetValue) {\n                index = wrapIndex(this, index);\n                return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;\n            };\n        }\n        sliceSeq.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            if (sliceSize === 0) {\n                return 0;\n            }\n            if (reverse) {\n                return this.cacheResult().__iterate(fn, reverse);\n            }\n            var skipped = 0;\n            var isSkipping = true;\n            var iterations = 0;\n            iterable.__iterate(function(v, k) {\n                if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n                    iterations++;\n                    return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;\n                }\n            });\n            return iterations;\n        };\n        sliceSeq.__iteratorUncached = function(type, reverse) {\n            if (sliceSize !== 0 && reverse) {\n                return this.cacheResult().__iterator(type, reverse);\n            }\n            // Don't bother instantiating parent iterator if taking 0.\n            var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n            var skipped = 0;\n            var iterations = 0;\n            return new Iterator(function() {\n                while(skipped++ < resolvedBegin){\n                    iterator.next();\n                }\n                if (++iterations > sliceSize) {\n                    return iteratorDone();\n                }\n                var step = iterator.next();\n                if (useKeys || type === ITERATE_VALUES) {\n                    return step;\n                } else if (type === ITERATE_KEYS) {\n                    return iteratorValue(type, iterations - 1, undefined, step);\n                } else {\n                    return iteratorValue(type, iterations - 1, step.value[1], step);\n                }\n            });\n        };\n        return sliceSeq;\n    }\n    function takeWhileFactory(iterable, predicate, context) {\n        var takeSequence = makeSequence(iterable);\n        takeSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterate(fn, reverse);\n            }\n            var iterations = 0;\n            iterable.__iterate(function(v, k, c) {\n                return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);\n            });\n            return iterations;\n        };\n        takeSequence.__iteratorUncached = function(type, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterator(type, reverse);\n            }\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            var iterating = true;\n            return new Iterator(function() {\n                if (!iterating) {\n                    return iteratorDone();\n                }\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                var k = entry[0];\n                var v = entry[1];\n                if (!predicate.call(context, v, k, this$0)) {\n                    iterating = false;\n                    return iteratorDone();\n                }\n                return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n            });\n        };\n        return takeSequence;\n    }\n    function skipWhileFactory(iterable, predicate, context, useKeys) {\n        var skipSequence = makeSequence(iterable);\n        skipSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterate(fn, reverse);\n            }\n            var isSkipping = true;\n            var iterations = 0;\n            iterable.__iterate(function(v, k, c) {\n                if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n                    iterations++;\n                    return fn(v, useKeys ? k : iterations - 1, this$0);\n                }\n            });\n            return iterations;\n        };\n        skipSequence.__iteratorUncached = function(type, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterator(type, reverse);\n            }\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            var skipping = true;\n            var iterations = 0;\n            return new Iterator(function() {\n                var step, k, v;\n                do {\n                    step = iterator.next();\n                    if (step.done) {\n                        if (useKeys || type === ITERATE_VALUES) {\n                            return step;\n                        } else if (type === ITERATE_KEYS) {\n                            return iteratorValue(type, iterations++, undefined, step);\n                        } else {\n                            return iteratorValue(type, iterations++, step.value[1], step);\n                        }\n                    }\n                    var entry = step.value;\n                    k = entry[0];\n                    v = entry[1];\n                    skipping && (skipping = predicate.call(context, v, k, this$0));\n                }while (skipping);\n                return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n            });\n        };\n        return skipSequence;\n    }\n    function concatFactory(iterable, values) {\n        var isKeyedIterable = isKeyed(iterable);\n        var iters = [\n            iterable\n        ].concat(values).map(function(v) {\n            if (!isIterable(v)) {\n                v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [\n                    v\n                ]);\n            } else if (isKeyedIterable) {\n                v = KeyedIterable(v);\n            }\n            return v;\n        }).filter(function(v) {\n            return v.size !== 0;\n        });\n        if (iters.length === 0) {\n            return iterable;\n        }\n        if (iters.length === 1) {\n            var singleton = iters[0];\n            if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {\n                return singleton;\n            }\n        }\n        var concatSeq = new ArraySeq(iters);\n        if (isKeyedIterable) {\n            concatSeq = concatSeq.toKeyedSeq();\n        } else if (!isIndexed(iterable)) {\n            concatSeq = concatSeq.toSetSeq();\n        }\n        concatSeq = concatSeq.flatten(true);\n        concatSeq.size = iters.reduce(function(sum, seq) {\n            if (sum !== undefined) {\n                var size = seq.size;\n                if (size !== undefined) {\n                    return sum + size;\n                }\n            }\n        }, 0);\n        return concatSeq;\n    }\n    function flattenFactory(iterable, depth, useKeys) {\n        var flatSequence = makeSequence(iterable);\n        flatSequence.__iterateUncached = function(fn, reverse) {\n            var iterations = 0;\n            var stopped = false;\n            function flatDeep(iter, currentDepth) {\n                var this$0 = this;\n                iter.__iterate(function(v, k) {\n                    if ((!depth || currentDepth < depth) && isIterable(v)) {\n                        flatDeep(v, currentDepth + 1);\n                    } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n                        stopped = true;\n                    }\n                    return !stopped;\n                }, reverse);\n            }\n            flatDeep(iterable, 0);\n            return iterations;\n        };\n        flatSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(type, reverse);\n            var stack = [];\n            var iterations = 0;\n            return new Iterator(function() {\n                while(iterator){\n                    var step = iterator.next();\n                    if (step.done !== false) {\n                        iterator = stack.pop();\n                        continue;\n                    }\n                    var v = step.value;\n                    if (type === ITERATE_ENTRIES) {\n                        v = v[1];\n                    }\n                    if ((!depth || stack.length < depth) && isIterable(v)) {\n                        stack.push(iterator);\n                        iterator = v.__iterator(type, reverse);\n                    } else {\n                        return useKeys ? step : iteratorValue(type, iterations++, v, step);\n                    }\n                }\n                return iteratorDone();\n            });\n        };\n        return flatSequence;\n    }\n    function flatMapFactory(iterable, mapper, context) {\n        var coerce = iterableClass(iterable);\n        return iterable.toSeq().map(function(v, k) {\n            return coerce(mapper.call(context, v, k, iterable));\n        }).flatten(true);\n    }\n    function interposeFactory(iterable, separator) {\n        var interposedSequence = makeSequence(iterable);\n        interposedSequence.size = iterable.size && iterable.size * 2 - 1;\n        interposedSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            var iterations = 0;\n            iterable.__iterate(function(v, k) {\n                return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;\n            }, reverse);\n            return iterations;\n        };\n        interposedSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n            var iterations = 0;\n            var step;\n            return new Iterator(function() {\n                if (!step || iterations % 2) {\n                    step = iterator.next();\n                    if (step.done) {\n                        return step;\n                    }\n                }\n                return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);\n            });\n        };\n        return interposedSequence;\n    }\n    function sortFactory(iterable, comparator, mapper) {\n        if (!comparator) {\n            comparator = defaultComparator;\n        }\n        var isKeyedIterable = isKeyed(iterable);\n        var index = 0;\n        var entries = iterable.toSeq().map(function(v, k) {\n            return [\n                k,\n                v,\n                index++,\n                mapper ? mapper(v, k, iterable) : v\n            ];\n        }).toArray();\n        entries.sort(function(a, b) {\n            return comparator(a[3], b[3]) || a[2] - b[2];\n        }).forEach(isKeyedIterable ? function(v, i) {\n            entries[i].length = 2;\n        } : function(v, i) {\n            entries[i] = v[1];\n        });\n        return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);\n    }\n    function maxFactory(iterable, comparator, mapper) {\n        if (!comparator) {\n            comparator = defaultComparator;\n        }\n        if (mapper) {\n            var entry = iterable.toSeq().map(function(v, k) {\n                return [\n                    v,\n                    mapper(v, k, iterable)\n                ];\n            }).reduce(function(a, b) {\n                return maxCompare(comparator, a[1], b[1]) ? b : a;\n            });\n            return entry && entry[0];\n        } else {\n            return iterable.reduce(function(a, b) {\n                return maxCompare(comparator, a, b) ? b : a;\n            });\n        }\n    }\n    function maxCompare(comparator, a, b) {\n        var comp = comparator(b, a);\n        // b is considered the new max if the comparator declares them equal, but\n        // they are not equal and b is in fact a nullish value.\n        return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;\n    }\n    function zipWithFactory(keyIter, zipper, iters) {\n        var zipSequence = makeSequence(keyIter);\n        zipSequence.size = new ArraySeq(iters).map(function(i) {\n            return i.size;\n        }).min();\n        // Note: this a generic base implementation of __iterate in terms of\n        // __iterator which may be more generically useful in the future.\n        zipSequence.__iterate = function(fn, reverse) {\n            /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */ // indexed:\n            var iterator = this.__iterator(ITERATE_VALUES, reverse);\n            var step;\n            var iterations = 0;\n            while(!(step = iterator.next()).done){\n                if (fn(step.value, iterations++, this) === false) {\n                    break;\n                }\n            }\n            return iterations;\n        };\n        zipSequence.__iteratorUncached = function(type, reverse) {\n            var iterators = iters.map(function(i) {\n                return i = Iterable(i), getIterator(reverse ? i.reverse() : i);\n            });\n            var iterations = 0;\n            var isDone = false;\n            return new Iterator(function() {\n                var steps;\n                if (!isDone) {\n                    steps = iterators.map(function(i) {\n                        return i.next();\n                    });\n                    isDone = steps.some(function(s) {\n                        return s.done;\n                    });\n                }\n                if (isDone) {\n                    return iteratorDone();\n                }\n                return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function(s) {\n                    return s.value;\n                })));\n            });\n        };\n        return zipSequence;\n    }\n    // #pragma Helper Functions\n    function reify(iter, seq) {\n        return isSeq(iter) ? seq : iter.constructor(seq);\n    }\n    function validateEntry(entry) {\n        if (entry !== Object(entry)) {\n            throw new TypeError(\"Expected [K, V] tuple: \" + entry);\n        }\n    }\n    function resolveSize(iter) {\n        assertNotInfinite(iter.size);\n        return ensureSize(iter);\n    }\n    function iterableClass(iterable) {\n        return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;\n    }\n    function makeSequence(iterable) {\n        return Object.create((isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype);\n    }\n    function cacheResultThrough() {\n        if (this._iter.cacheResult) {\n            this._iter.cacheResult();\n            this.size = this._iter.size;\n            return this;\n        } else {\n            return Seq.prototype.cacheResult.call(this);\n        }\n    }\n    function defaultComparator(a, b) {\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n    function forceIterator(keyPath) {\n        var iter = getIterator(keyPath);\n        if (!iter) {\n            // Array might not be iterable in this environment, so we need a fallback\n            // to our wrapped type.\n            if (!isArrayLike(keyPath)) {\n                throw new TypeError(\"Expected iterable or array-like: \" + keyPath);\n            }\n            iter = getIterator(Iterable(keyPath));\n        }\n        return iter;\n    }\n    createClass(Record, KeyedCollection);\n    function Record(defaultValues, name) {\n        var hasInitialized;\n        var RecordType = function Record(values) {\n            if (values instanceof RecordType) {\n                return values;\n            }\n            if (!(this instanceof RecordType)) {\n                return new RecordType(values);\n            }\n            if (!hasInitialized) {\n                hasInitialized = true;\n                var keys = Object.keys(defaultValues);\n                setProps(RecordTypePrototype, keys);\n                RecordTypePrototype.size = keys.length;\n                RecordTypePrototype._name = name;\n                RecordTypePrototype._keys = keys;\n                RecordTypePrototype._defaultValues = defaultValues;\n            }\n            this._map = Map(values);\n        };\n        var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n        RecordTypePrototype.constructor = RecordType;\n        return RecordType;\n    }\n    Record.prototype.toString = function() {\n        return this.__toString(recordName(this) + \" {\", \"}\");\n    };\n    // @pragma Access\n    Record.prototype.has = function(k) {\n        return this._defaultValues.hasOwnProperty(k);\n    };\n    Record.prototype.get = function(k, notSetValue) {\n        if (!this.has(k)) {\n            return notSetValue;\n        }\n        var defaultVal = this._defaultValues[k];\n        return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n    // @pragma Modification\n    Record.prototype.clear = function() {\n        if (this.__ownerID) {\n            this._map && this._map.clear();\n            return this;\n        }\n        var RecordType = this.constructor;\n        return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n    Record.prototype.set = function(k, v) {\n        if (!this.has(k)) {\n            throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n        }\n        var newMap = this._map && this._map.set(k, v);\n        if (this.__ownerID || newMap === this._map) {\n            return this;\n        }\n        return makeRecord(this, newMap);\n    };\n    Record.prototype.remove = function(k) {\n        if (!this.has(k)) {\n            return this;\n        }\n        var newMap = this._map && this._map.remove(k);\n        if (this.__ownerID || newMap === this._map) {\n            return this;\n        }\n        return makeRecord(this, newMap);\n    };\n    Record.prototype.wasAltered = function() {\n        return this._map.wasAltered();\n    };\n    Record.prototype.__iterator = function(type, reverse) {\n        var this$0 = this;\n        return KeyedIterable(this._defaultValues).map(function(_, k) {\n            return this$0.get(k);\n        }).__iterator(type, reverse);\n    };\n    Record.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return KeyedIterable(this._defaultValues).map(function(_, k) {\n            return this$0.get(k);\n        }).__iterate(fn, reverse);\n    };\n    Record.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map && this._map.__ensureOwner(ownerID);\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this._map = newMap;\n            return this;\n        }\n        return makeRecord(this, newMap, ownerID);\n    };\n    var RecordPrototype = Record.prototype;\n    RecordPrototype[DELETE] = RecordPrototype.remove;\n    RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;\n    RecordPrototype.merge = MapPrototype.merge;\n    RecordPrototype.mergeWith = MapPrototype.mergeWith;\n    RecordPrototype.mergeIn = MapPrototype.mergeIn;\n    RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n    RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n    RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n    RecordPrototype.setIn = MapPrototype.setIn;\n    RecordPrototype.update = MapPrototype.update;\n    RecordPrototype.updateIn = MapPrototype.updateIn;\n    RecordPrototype.withMutations = MapPrototype.withMutations;\n    RecordPrototype.asMutable = MapPrototype.asMutable;\n    RecordPrototype.asImmutable = MapPrototype.asImmutable;\n    function makeRecord(likeRecord, map, ownerID) {\n        var record = Object.create(Object.getPrototypeOf(likeRecord));\n        record._map = map;\n        record.__ownerID = ownerID;\n        return record;\n    }\n    function recordName(record) {\n        return record._name || record.constructor.name || \"Record\";\n    }\n    function setProps(prototype, names) {\n        try {\n            names.forEach(setProp.bind(undefined, prototype));\n        } catch (error) {\n        // Object.defineProperty failed. Probably IE8.\n        }\n    }\n    function setProp(prototype, name) {\n        Object.defineProperty(prototype, name, {\n            get: function() {\n                return this.get(name);\n            },\n            set: function(value) {\n                invariant(this.__ownerID, \"Cannot set on an immutable record.\");\n                this.set(name, value);\n            }\n        });\n    }\n    createClass(Set, SetCollection);\n    // @pragma Construction\n    function Set(value) {\n        return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set) {\n            var iter = SetIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v) {\n                return set.add(v);\n            });\n        });\n    }\n    Set.of = function() {\n        return this(arguments);\n    };\n    Set.fromKeys = function(value) {\n        return this(KeyedIterable(value).keySeq());\n    };\n    Set.prototype.toString = function() {\n        return this.__toString(\"Set {\", \"}\");\n    };\n    // @pragma Access\n    Set.prototype.has = function(value) {\n        return this._map.has(value);\n    };\n    // @pragma Modification\n    Set.prototype.add = function(value) {\n        return updateSet(this, this._map.set(value, true));\n    };\n    Set.prototype.remove = function(value) {\n        return updateSet(this, this._map.remove(value));\n    };\n    Set.prototype.clear = function() {\n        return updateSet(this, this._map.clear());\n    };\n    // @pragma Composition\n    Set.prototype.union = function() {\n        var iters = SLICE$0.call(arguments, 0);\n        iters = iters.filter(function(x) {\n            return x.size !== 0;\n        });\n        if (iters.length === 0) {\n            return this;\n        }\n        if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n            return this.constructor(iters[0]);\n        }\n        return this.withMutations(function(set) {\n            for(var ii = 0; ii < iters.length; ii++){\n                SetIterable(iters[ii]).forEach(function(value) {\n                    return set.add(value);\n                });\n            }\n        });\n    };\n    Set.prototype.intersect = function() {\n        var iters = SLICE$0.call(arguments, 0);\n        if (iters.length === 0) {\n            return this;\n        }\n        iters = iters.map(function(iter) {\n            return SetIterable(iter);\n        });\n        var originalSet = this;\n        return this.withMutations(function(set) {\n            originalSet.forEach(function(value) {\n                if (!iters.every(function(iter) {\n                    return iter.includes(value);\n                })) {\n                    set.remove(value);\n                }\n            });\n        });\n    };\n    Set.prototype.subtract = function() {\n        var iters = SLICE$0.call(arguments, 0);\n        if (iters.length === 0) {\n            return this;\n        }\n        iters = iters.map(function(iter) {\n            return SetIterable(iter);\n        });\n        var originalSet = this;\n        return this.withMutations(function(set) {\n            originalSet.forEach(function(value) {\n                if (iters.some(function(iter) {\n                    return iter.includes(value);\n                })) {\n                    set.remove(value);\n                }\n            });\n        });\n    };\n    Set.prototype.merge = function() {\n        return this.union.apply(this, arguments);\n    };\n    Set.prototype.mergeWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return this.union.apply(this, iters);\n    };\n    Set.prototype.sort = function(comparator) {\n        // Late binding\n        return OrderedSet(sortFactory(this, comparator));\n    };\n    Set.prototype.sortBy = function(mapper, comparator) {\n        // Late binding\n        return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n    Set.prototype.wasAltered = function() {\n        return this._map.wasAltered();\n    };\n    Set.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._map.__iterate(function(_, k) {\n            return fn(k, k, this$0);\n        }, reverse);\n    };\n    Set.prototype.__iterator = function(type, reverse) {\n        return this._map.map(function(_, k) {\n            return k;\n        }).__iterator(type, reverse);\n    };\n    Set.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map.__ensureOwner(ownerID);\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this._map = newMap;\n            return this;\n        }\n        return this.__make(newMap, ownerID);\n    };\n    function isSet(maybeSet) {\n        return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n    }\n    Set.isSet = isSet;\n    var IS_SET_SENTINEL = \"@@__IMMUTABLE_SET__@@\";\n    var SetPrototype = Set.prototype;\n    SetPrototype[IS_SET_SENTINEL] = true;\n    SetPrototype[DELETE] = SetPrototype.remove;\n    SetPrototype.mergeDeep = SetPrototype.merge;\n    SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n    SetPrototype.withMutations = MapPrototype.withMutations;\n    SetPrototype.asMutable = MapPrototype.asMutable;\n    SetPrototype.asImmutable = MapPrototype.asImmutable;\n    SetPrototype.__empty = emptySet;\n    SetPrototype.__make = makeSet;\n    function updateSet(set, newMap) {\n        if (set.__ownerID) {\n            set.size = newMap.size;\n            set._map = newMap;\n            return set;\n        }\n        return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n    }\n    function makeSet(map, ownerID) {\n        var set = Object.create(SetPrototype);\n        set.size = map ? map.size : 0;\n        set._map = map;\n        set.__ownerID = ownerID;\n        return set;\n    }\n    var EMPTY_SET;\n    function emptySet() {\n        return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n    }\n    createClass(OrderedSet, Set);\n    // @pragma Construction\n    function OrderedSet(value) {\n        return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set) {\n            var iter = SetIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v) {\n                return set.add(v);\n            });\n        });\n    }\n    OrderedSet.of = function() {\n        return this(arguments);\n    };\n    OrderedSet.fromKeys = function(value) {\n        return this(KeyedIterable(value).keySeq());\n    };\n    OrderedSet.prototype.toString = function() {\n        return this.__toString(\"OrderedSet {\", \"}\");\n    };\n    function isOrderedSet(maybeOrderedSet) {\n        return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n    }\n    OrderedSet.isOrderedSet = isOrderedSet;\n    var OrderedSetPrototype = OrderedSet.prototype;\n    OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n    OrderedSetPrototype.__empty = emptyOrderedSet;\n    OrderedSetPrototype.__make = makeOrderedSet;\n    function makeOrderedSet(map, ownerID) {\n        var set = Object.create(OrderedSetPrototype);\n        set.size = map ? map.size : 0;\n        set._map = map;\n        set.__ownerID = ownerID;\n        return set;\n    }\n    var EMPTY_ORDERED_SET;\n    function emptyOrderedSet() {\n        return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n    }\n    createClass(Stack, IndexedCollection);\n    // @pragma Construction\n    function Stack(value) {\n        return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().unshiftAll(value);\n    }\n    Stack.of = function() {\n        return this(arguments);\n    };\n    Stack.prototype.toString = function() {\n        return this.__toString(\"Stack [\", \"]\");\n    };\n    // @pragma Access\n    Stack.prototype.get = function(index, notSetValue) {\n        var head = this._head;\n        index = wrapIndex(this, index);\n        while(head && index--){\n            head = head.next;\n        }\n        return head ? head.value : notSetValue;\n    };\n    Stack.prototype.peek = function() {\n        return this._head && this._head.value;\n    };\n    // @pragma Modification\n    Stack.prototype.push = function() {\n        if (arguments.length === 0) {\n            return this;\n        }\n        var newSize = this.size + arguments.length;\n        var head = this._head;\n        for(var ii = arguments.length - 1; ii >= 0; ii--){\n            head = {\n                value: arguments[ii],\n                next: head\n            };\n        }\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    Stack.prototype.pushAll = function(iter) {\n        iter = IndexedIterable(iter);\n        if (iter.size === 0) {\n            return this;\n        }\n        assertNotInfinite(iter.size);\n        var newSize = this.size;\n        var head = this._head;\n        iter.reverse().forEach(function(value) {\n            newSize++;\n            head = {\n                value: value,\n                next: head\n            };\n        });\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    Stack.prototype.pop = function() {\n        return this.slice(1);\n    };\n    Stack.prototype.unshift = function() {\n        return this.push.apply(this, arguments);\n    };\n    Stack.prototype.unshiftAll = function(iter) {\n        return this.pushAll(iter);\n    };\n    Stack.prototype.shift = function() {\n        return this.pop.apply(this, arguments);\n    };\n    Stack.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._head = undefined;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyStack();\n    };\n    Stack.prototype.slice = function(begin, end) {\n        if (wholeSlice(begin, end, this.size)) {\n            return this;\n        }\n        var resolvedBegin = resolveBegin(begin, this.size);\n        var resolvedEnd = resolveEnd(end, this.size);\n        if (resolvedEnd !== this.size) {\n            // super.slice(begin, end);\n            return IndexedCollection.prototype.slice.call(this, begin, end);\n        }\n        var newSize = this.size - resolvedBegin;\n        var head = this._head;\n        while(resolvedBegin--){\n            head = head.next;\n        }\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    // @pragma Mutability\n    Stack.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            return this;\n        }\n        return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n    // @pragma Iteration\n    Stack.prototype.__iterate = function(fn, reverse) {\n        if (reverse) {\n            return this.reverse().__iterate(fn);\n        }\n        var iterations = 0;\n        var node = this._head;\n        while(node){\n            if (fn(node.value, iterations++, this) === false) {\n                break;\n            }\n            node = node.next;\n        }\n        return iterations;\n    };\n    Stack.prototype.__iterator = function(type, reverse) {\n        if (reverse) {\n            return this.reverse().__iterator(type);\n        }\n        var iterations = 0;\n        var node = this._head;\n        return new Iterator(function() {\n            if (node) {\n                var value = node.value;\n                node = node.next;\n                return iteratorValue(type, iterations++, value);\n            }\n            return iteratorDone();\n        });\n    };\n    function isStack(maybeStack) {\n        return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n    }\n    Stack.isStack = isStack;\n    var IS_STACK_SENTINEL = \"@@__IMMUTABLE_STACK__@@\";\n    var StackPrototype = Stack.prototype;\n    StackPrototype[IS_STACK_SENTINEL] = true;\n    StackPrototype.withMutations = MapPrototype.withMutations;\n    StackPrototype.asMutable = MapPrototype.asMutable;\n    StackPrototype.asImmutable = MapPrototype.asImmutable;\n    StackPrototype.wasAltered = MapPrototype.wasAltered;\n    function makeStack(size, head, ownerID, hash) {\n        var map = Object.create(StackPrototype);\n        map.size = size;\n        map._head = head;\n        map.__ownerID = ownerID;\n        map.__hash = hash;\n        map.__altered = false;\n        return map;\n    }\n    var EMPTY_STACK;\n    function emptyStack() {\n        return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n    }\n    /**\n   * Contributes additional methods to a constructor\n   */ function mixin(ctor, methods) {\n        var keyCopier = function(key) {\n            ctor.prototype[key] = methods[key];\n        };\n        Object.keys(methods).forEach(keyCopier);\n        Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n        return ctor;\n    }\n    Iterable.Iterator = Iterator;\n    mixin(Iterable, {\n        // ### Conversion to other types\n        toArray: function() {\n            assertNotInfinite(this.size);\n            var array = new Array(this.size || 0);\n            this.valueSeq().__iterate(function(v, i) {\n                array[i] = v;\n            });\n            return array;\n        },\n        toIndexedSeq: function() {\n            return new ToIndexedSequence(this);\n        },\n        toJS: function() {\n            return this.toSeq().map(function(value) {\n                return value && typeof value.toJS === \"function\" ? value.toJS() : value;\n            }).__toJS();\n        },\n        toJSON: function() {\n            return this.toSeq().map(function(value) {\n                return value && typeof value.toJSON === \"function\" ? value.toJSON() : value;\n            }).__toJS();\n        },\n        toKeyedSeq: function() {\n            return new ToKeyedSequence(this, true);\n        },\n        toMap: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return Map(this.toKeyedSeq());\n        },\n        toObject: function() {\n            assertNotInfinite(this.size);\n            var object = {};\n            this.__iterate(function(v, k) {\n                object[k] = v;\n            });\n            return object;\n        },\n        toOrderedMap: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return OrderedMap(this.toKeyedSeq());\n        },\n        toOrderedSet: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n        },\n        toSet: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return Set(isKeyed(this) ? this.valueSeq() : this);\n        },\n        toSetSeq: function() {\n            return new ToSetSequence(this);\n        },\n        toSeq: function() {\n            return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n        },\n        toStack: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return Stack(isKeyed(this) ? this.valueSeq() : this);\n        },\n        toList: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return List(isKeyed(this) ? this.valueSeq() : this);\n        },\n        // ### Common JavaScript methods and properties\n        toString: function() {\n            return \"[Iterable]\";\n        },\n        __toString: function(head, tail) {\n            if (this.size === 0) {\n                return head + tail;\n            }\n            return head + \" \" + this.toSeq().map(this.__toStringMapper).join(\", \") + \" \" + tail;\n        },\n        // ### ES6 Collection methods (ES6 Array and Map)\n        concat: function() {\n            var values = SLICE$0.call(arguments, 0);\n            return reify(this, concatFactory(this, values));\n        },\n        includes: function(searchValue) {\n            return this.some(function(value) {\n                return is(value, searchValue);\n            });\n        },\n        entries: function() {\n            return this.__iterator(ITERATE_ENTRIES);\n        },\n        every: function(predicate, context) {\n            assertNotInfinite(this.size);\n            var returnValue = true;\n            this.__iterate(function(v, k, c) {\n                if (!predicate.call(context, v, k, c)) {\n                    returnValue = false;\n                    return false;\n                }\n            });\n            return returnValue;\n        },\n        filter: function(predicate, context) {\n            return reify(this, filterFactory(this, predicate, context, true));\n        },\n        find: function(predicate, context, notSetValue) {\n            var entry = this.findEntry(predicate, context);\n            return entry ? entry[1] : notSetValue;\n        },\n        findEntry: function(predicate, context) {\n            var found;\n            this.__iterate(function(v, k, c) {\n                if (predicate.call(context, v, k, c)) {\n                    found = [\n                        k,\n                        v\n                    ];\n                    return false;\n                }\n            });\n            return found;\n        },\n        findLastEntry: function(predicate, context) {\n            return this.toSeq().reverse().findEntry(predicate, context);\n        },\n        forEach: function(sideEffect, context) {\n            assertNotInfinite(this.size);\n            return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n        },\n        join: function(separator) {\n            assertNotInfinite(this.size);\n            separator = separator !== undefined ? \"\" + separator : \",\";\n            var joined = \"\";\n            var isFirst = true;\n            this.__iterate(function(v) {\n                isFirst ? isFirst = false : joined += separator;\n                joined += v !== null && v !== undefined ? v.toString() : \"\";\n            });\n            return joined;\n        },\n        keys: function() {\n            return this.__iterator(ITERATE_KEYS);\n        },\n        map: function(mapper, context) {\n            return reify(this, mapFactory(this, mapper, context));\n        },\n        reduce: function(reducer, initialReduction, context) {\n            assertNotInfinite(this.size);\n            var reduction;\n            var useFirst;\n            if (arguments.length < 2) {\n                useFirst = true;\n            } else {\n                reduction = initialReduction;\n            }\n            this.__iterate(function(v, k, c) {\n                if (useFirst) {\n                    useFirst = false;\n                    reduction = v;\n                } else {\n                    reduction = reducer.call(context, reduction, v, k, c);\n                }\n            });\n            return reduction;\n        },\n        reduceRight: function(reducer, initialReduction, context) {\n            var reversed = this.toKeyedSeq().reverse();\n            return reversed.reduce.apply(reversed, arguments);\n        },\n        reverse: function() {\n            return reify(this, reverseFactory(this, true));\n        },\n        slice: function(begin, end) {\n            return reify(this, sliceFactory(this, begin, end, true));\n        },\n        some: function(predicate, context) {\n            return !this.every(not(predicate), context);\n        },\n        sort: function(comparator) {\n            return reify(this, sortFactory(this, comparator));\n        },\n        values: function() {\n            return this.__iterator(ITERATE_VALUES);\n        },\n        // ### More sequential methods\n        butLast: function() {\n            return this.slice(0, -1);\n        },\n        isEmpty: function() {\n            return this.size !== undefined ? this.size === 0 : !this.some(function() {\n                return true;\n            });\n        },\n        count: function(predicate, context) {\n            return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);\n        },\n        countBy: function(grouper, context) {\n            return countByFactory(this, grouper, context);\n        },\n        equals: function(other) {\n            return deepEqual(this, other);\n        },\n        entrySeq: function() {\n            var iterable = this;\n            if (iterable._cache) {\n                // We cache as an entries array, so we can just return the cache!\n                return new ArraySeq(iterable._cache);\n            }\n            var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n            entriesSequence.fromEntrySeq = function() {\n                return iterable.toSeq();\n            };\n            return entriesSequence;\n        },\n        filterNot: function(predicate, context) {\n            return this.filter(not(predicate), context);\n        },\n        findLast: function(predicate, context, notSetValue) {\n            return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n        },\n        first: function() {\n            return this.find(returnTrue);\n        },\n        flatMap: function(mapper, context) {\n            return reify(this, flatMapFactory(this, mapper, context));\n        },\n        flatten: function(depth) {\n            return reify(this, flattenFactory(this, depth, true));\n        },\n        fromEntrySeq: function() {\n            return new FromEntriesSequence(this);\n        },\n        get: function(searchKey, notSetValue) {\n            return this.find(function(_, key) {\n                return is(key, searchKey);\n            }, undefined, notSetValue);\n        },\n        getIn: function(searchKeyPath, notSetValue) {\n            var nested = this;\n            // Note: in an ES6 environment, we would prefer:\n            // for (var key of searchKeyPath) {\n            var iter = forceIterator(searchKeyPath);\n            var step;\n            while(!(step = iter.next()).done){\n                var key = step.value;\n                nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n                if (nested === NOT_SET) {\n                    return notSetValue;\n                }\n            }\n            return nested;\n        },\n        groupBy: function(grouper, context) {\n            return groupByFactory(this, grouper, context);\n        },\n        has: function(searchKey) {\n            return this.get(searchKey, NOT_SET) !== NOT_SET;\n        },\n        hasIn: function(searchKeyPath) {\n            return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n        },\n        isSubset: function(iter) {\n            iter = typeof iter.includes === \"function\" ? iter : Iterable(iter);\n            return this.every(function(value) {\n                return iter.includes(value);\n            });\n        },\n        isSuperset: function(iter) {\n            iter = typeof iter.isSubset === \"function\" ? iter : Iterable(iter);\n            return iter.isSubset(this);\n        },\n        keySeq: function() {\n            return this.toSeq().map(keyMapper).toIndexedSeq();\n        },\n        last: function() {\n            return this.toSeq().reverse().first();\n        },\n        max: function(comparator) {\n            return maxFactory(this, comparator);\n        },\n        maxBy: function(mapper, comparator) {\n            return maxFactory(this, comparator, mapper);\n        },\n        min: function(comparator) {\n            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n        },\n        minBy: function(mapper, comparator) {\n            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n        },\n        rest: function() {\n            return this.slice(1);\n        },\n        skip: function(amount) {\n            return this.slice(Math.max(0, amount));\n        },\n        skipLast: function(amount) {\n            return reify(this, this.toSeq().reverse().skip(amount).reverse());\n        },\n        skipWhile: function(predicate, context) {\n            return reify(this, skipWhileFactory(this, predicate, context, true));\n        },\n        skipUntil: function(predicate, context) {\n            return this.skipWhile(not(predicate), context);\n        },\n        sortBy: function(mapper, comparator) {\n            return reify(this, sortFactory(this, comparator, mapper));\n        },\n        take: function(amount) {\n            return this.slice(0, Math.max(0, amount));\n        },\n        takeLast: function(amount) {\n            return reify(this, this.toSeq().reverse().take(amount).reverse());\n        },\n        takeWhile: function(predicate, context) {\n            return reify(this, takeWhileFactory(this, predicate, context));\n        },\n        takeUntil: function(predicate, context) {\n            return this.takeWhile(not(predicate), context);\n        },\n        valueSeq: function() {\n            return this.toIndexedSeq();\n        },\n        // ### Hashable Object\n        hashCode: function() {\n            return this.__hash || (this.__hash = hashIterable(this));\n        }\n    });\n    // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n    // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n    // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n    // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n    var IterablePrototype = Iterable.prototype;\n    IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n    IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n    IterablePrototype.__toJS = IterablePrototype.toArray;\n    IterablePrototype.__toStringMapper = quoteString;\n    IterablePrototype.inspect = IterablePrototype.toSource = function() {\n        return this.toString();\n    };\n    IterablePrototype.chain = IterablePrototype.flatMap;\n    IterablePrototype.contains = IterablePrototype.includes;\n    // Temporary warning about using length\n    (function() {\n        try {\n            Object.defineProperty(IterablePrototype, \"length\", {\n                get: function() {\n                    if (!Iterable.noLengthWarning) {\n                        var stack;\n                        try {\n                            throw new Error();\n                        } catch (error) {\n                            stack = error.stack;\n                        }\n                        if (stack.indexOf(\"_wrapObject\") === -1) {\n                            console && console.warn && console.warn(\"iterable.length has been deprecated, \" + \"use iterable.size or iterable.count(). \" + \"This warning will become a silent error in a future version. \" + stack);\n                            return this.size;\n                        }\n                    }\n                }\n            });\n        } catch (e) {}\n    })();\n    mixin(KeyedIterable, {\n        // ### More sequential methods\n        flip: function() {\n            return reify(this, flipFactory(this));\n        },\n        findKey: function(predicate, context) {\n            var entry = this.findEntry(predicate, context);\n            return entry && entry[0];\n        },\n        findLastKey: function(predicate, context) {\n            return this.toSeq().reverse().findKey(predicate, context);\n        },\n        keyOf: function(searchValue) {\n            return this.findKey(function(value) {\n                return is(value, searchValue);\n            });\n        },\n        lastKeyOf: function(searchValue) {\n            return this.findLastKey(function(value) {\n                return is(value, searchValue);\n            });\n        },\n        mapEntries: function(mapper, context) {\n            var this$0 = this;\n            var iterations = 0;\n            return reify(this, this.toSeq().map(function(v, k) {\n                return mapper.call(context, [\n                    k,\n                    v\n                ], iterations++, this$0);\n            }).fromEntrySeq());\n        },\n        mapKeys: function(mapper, context) {\n            var this$0 = this;\n            return reify(this, this.toSeq().flip().map(function(k, v) {\n                return mapper.call(context, k, v, this$0);\n            }).flip());\n        }\n    });\n    var KeyedIterablePrototype = KeyedIterable.prototype;\n    KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n    KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n    KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n    KeyedIterablePrototype.__toStringMapper = function(v, k) {\n        return JSON.stringify(k) + \": \" + quoteString(v);\n    };\n    mixin(IndexedIterable, {\n        // ### Conversion to other types\n        toKeyedSeq: function() {\n            return new ToKeyedSequence(this, false);\n        },\n        // ### ES6 Collection methods (ES6 Array and Map)\n        filter: function(predicate, context) {\n            return reify(this, filterFactory(this, predicate, context, false));\n        },\n        findIndex: function(predicate, context) {\n            var entry = this.findEntry(predicate, context);\n            return entry ? entry[0] : -1;\n        },\n        indexOf: function(searchValue) {\n            var key = this.toKeyedSeq().keyOf(searchValue);\n            return key === undefined ? -1 : key;\n        },\n        lastIndexOf: function(searchValue) {\n            var key = this.toKeyedSeq().reverse().keyOf(searchValue);\n            return key === undefined ? -1 : key;\n        // var index =\n        // return this.toSeq().reverse().indexOf(searchValue);\n        },\n        reverse: function() {\n            return reify(this, reverseFactory(this, false));\n        },\n        slice: function(begin, end) {\n            return reify(this, sliceFactory(this, begin, end, false));\n        },\n        splice: function(index, removeNum /*, ...values*/ ) {\n            var numArgs = arguments.length;\n            removeNum = Math.max(removeNum | 0, 0);\n            if (numArgs === 0 || numArgs === 2 && !removeNum) {\n                return this;\n            }\n            // If index is negative, it should resolve relative to the size of the\n            // collection. However size may be expensive to compute if not cached, so\n            // only call count() if the number is in fact negative.\n            index = resolveBegin(index, index < 0 ? this.count() : this.size);\n            var spliced = this.slice(0, index);\n            return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));\n        },\n        // ### More collection methods\n        findLastIndex: function(predicate, context) {\n            var key = this.toKeyedSeq().findLastKey(predicate, context);\n            return key === undefined ? -1 : key;\n        },\n        first: function() {\n            return this.get(0);\n        },\n        flatten: function(depth) {\n            return reify(this, flattenFactory(this, depth, false));\n        },\n        get: function(index, notSetValue) {\n            index = wrapIndex(this, index);\n            return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function(_, key) {\n                return key === index;\n            }, undefined, notSetValue);\n        },\n        has: function(index) {\n            index = wrapIndex(this, index);\n            return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);\n        },\n        interpose: function(separator) {\n            return reify(this, interposeFactory(this, separator));\n        },\n        interleave: function() {\n            var iterables = [\n                this\n            ].concat(arrCopy(arguments));\n            var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n            var interleaved = zipped.flatten(true);\n            if (zipped.size) {\n                interleaved.size = zipped.size * iterables.length;\n            }\n            return reify(this, interleaved);\n        },\n        last: function() {\n            return this.get(-1);\n        },\n        skipWhile: function(predicate, context) {\n            return reify(this, skipWhileFactory(this, predicate, context, false));\n        },\n        zip: function() {\n            var iterables = [\n                this\n            ].concat(arrCopy(arguments));\n            return reify(this, zipWithFactory(this, defaultZipper, iterables));\n        },\n        zipWith: function(zipper /*, ...iterables */ ) {\n            var iterables = arrCopy(arguments);\n            iterables[0] = this;\n            return reify(this, zipWithFactory(this, zipper, iterables));\n        }\n    });\n    IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n    IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n    mixin(SetIterable, {\n        // ### ES6 Collection methods (ES6 Array and Map)\n        get: function(value, notSetValue) {\n            return this.has(value) ? value : notSetValue;\n        },\n        includes: function(value) {\n            return this.has(value);\n        },\n        // ### More sequential methods\n        keySeq: function() {\n            return this.valueSeq();\n        }\n    });\n    SetIterable.prototype.has = IterablePrototype.includes;\n    // Mixin subclasses\n    mixin(KeyedSeq, KeyedIterable.prototype);\n    mixin(IndexedSeq, IndexedIterable.prototype);\n    mixin(SetSeq, SetIterable.prototype);\n    mixin(KeyedCollection, KeyedIterable.prototype);\n    mixin(IndexedCollection, IndexedIterable.prototype);\n    mixin(SetCollection, SetIterable.prototype);\n    // #pragma Helper functions\n    function keyMapper(v, k) {\n        return k;\n    }\n    function entryMapper(v, k) {\n        return [\n            k,\n            v\n        ];\n    }\n    function not(predicate) {\n        return function() {\n            return !predicate.apply(this, arguments);\n        };\n    }\n    function neg(predicate) {\n        return function() {\n            return -predicate.apply(this, arguments);\n        };\n    }\n    function quoteString(value) {\n        return typeof value === \"string\" ? JSON.stringify(value) : value;\n    }\n    function defaultZipper() {\n        return arrCopy(arguments);\n    }\n    function defaultNegComparator(a, b) {\n        return a < b ? 1 : a > b ? -1 : 0;\n    }\n    function hashIterable(iterable) {\n        if (iterable.size === Infinity) {\n            return 0;\n        }\n        var ordered = isOrdered(iterable);\n        var keyed = isKeyed(iterable);\n        var h = ordered ? 1 : 0;\n        var size = iterable.__iterate(keyed ? ordered ? function(v, k) {\n            h = 31 * h + hashMerge(hash(v), hash(k)) | 0;\n        } : function(v, k) {\n            h = h + hashMerge(hash(v), hash(k)) | 0;\n        } : ordered ? function(v) {\n            h = 31 * h + hash(v) | 0;\n        } : function(v) {\n            h = h + hash(v) | 0;\n        });\n        return murmurHashOfSize(size, h);\n    }\n    function murmurHashOfSize(size, h) {\n        h = imul(h, 0xCC9E2D51);\n        h = imul(h << 15 | h >>> -15, 0x1B873593);\n        h = imul(h << 13 | h >>> -13, 5);\n        h = (h + 0xE6546B64 | 0) ^ size;\n        h = imul(h ^ h >>> 16, 0x85EBCA6B);\n        h = imul(h ^ h >>> 13, 0xC2B2AE35);\n        h = smi(h ^ h >>> 16);\n        return h;\n    }\n    function hashMerge(a, b) {\n        return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n    }\n    var Immutable = {\n        Iterable: Iterable,\n        Seq: Seq,\n        Collection: Collection,\n        Map: Map,\n        OrderedMap: OrderedMap,\n        List: List,\n        Stack: Stack,\n        Set: Set,\n        OrderedSet: OrderedSet,\n        Record: Record,\n        Range: Range,\n        Repeat: Repeat,\n        is: is,\n        fromJS: fromJS\n    };\n    return Immutable;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbm9kZV9tb2R1bGVzL2ltbXV0YWJsZS9kaXN0L2ltbXV0YWJsZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Q0FPQyxHQUVBLFVBQVVBLE1BQU0sRUFBRUMsT0FBTztJQUN4QixLQUFpRCxHQUFjRSxPQUFPRCxPQUFPLEdBQUdELFlBQ2hGLENBQzRCQTtBQUM5QixHQUFFLFFBQU07SUFBYztJQUFhLElBQUlNLFVBQVVDLE1BQU1DLFNBQVMsQ0FBQ0MsS0FBSztJQUVwRSxTQUFTQyxZQUFZQyxJQUFJLEVBQUVDLFVBQVU7UUFDbkMsSUFBSUEsWUFBWTtZQUNkRCxLQUFLSCxTQUFTLEdBQUdLLE9BQU9DLE1BQU0sQ0FBQ0YsV0FBV0osU0FBUztRQUNyRDtRQUNBRyxLQUFLSCxTQUFTLENBQUNPLFdBQVcsR0FBR0o7SUFDL0I7SUFFQSxTQUFTSyxTQUFTQyxLQUFLO1FBQ25CLE9BQU9DLFdBQVdELFNBQVNBLFFBQVFFLElBQUlGO0lBQ3pDO0lBR0ZQLFlBQVlVLGVBQWVKO0lBQ3pCLFNBQVNJLGNBQWNILEtBQUs7UUFDMUIsT0FBT0ksUUFBUUosU0FBU0EsUUFBUUssU0FBU0w7SUFDM0M7SUFHRlAsWUFBWWEsaUJBQWlCUDtJQUMzQixTQUFTTyxnQkFBZ0JOLEtBQUs7UUFDNUIsT0FBT08sVUFBVVAsU0FBU0EsUUFBUVEsV0FBV1I7SUFDL0M7SUFHRlAsWUFBWWdCLGFBQWFWO0lBQ3ZCLFNBQVNVLFlBQVlULEtBQUs7UUFDeEIsT0FBT0MsV0FBV0QsVUFBVSxDQUFDVSxjQUFjVixTQUFTQSxRQUFRVyxPQUFPWDtJQUNyRTtJQUlGLFNBQVNDLFdBQVdXLGFBQWE7UUFDL0IsT0FBTyxDQUFDLENBQUVBLENBQUFBLGlCQUFpQkEsYUFBYSxDQUFDQyxxQkFBcUI7SUFDaEU7SUFFQSxTQUFTVCxRQUFRVSxVQUFVO1FBQ3pCLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxjQUFjQSxVQUFVLENBQUNDLGtCQUFrQjtJQUN2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O1FBQ1pBLElBQUlQLEtBQUtPLEtBQUssS0FBS0EsTUFBTSxDQUFDLElBQUk7UUFDOUJBLElBQUlQLEtBQUtPLEtBQUssS0FBS0EsTUFBTSxDQUFDLElBQUk7UUFDOUJBLElBQUksQ0FBQ0EsSUFBSSxhQUFhLEtBQUt2SztRQUMzQnVLLElBQUlQLEtBQUtPLElBQUlBLE1BQU0sSUFBSTtRQUN2QkEsSUFBSVAsS0FBS08sSUFBSUEsTUFBTSxJQUFJO1FBQ3ZCQSxJQUFJSixJQUFJSSxJQUFJQSxNQUFNO1FBQ2xCLE9BQU9BO0lBQ1Q7SUFFQSxTQUFTZ2QsVUFBVS9mLENBQUMsRUFBRUMsQ0FBQztRQUNyQixPQUFPRCxJQUFJQyxJQUFJLGFBQWNELENBQUFBLEtBQUssS0FBTUEsQ0FBQUEsS0FBSyxLQUFLLEdBQUcsTUFBTTtJQUM3RDtJQUVBLElBQUluTCxZQUFZO1FBRWRXLFVBQVVBO1FBRVZHLEtBQUtBO1FBQ0x5TSxZQUFZQTtRQUNaeUMsS0FBS0E7UUFDTGtDLFlBQVlBO1FBQ1o2RixNQUFNQTtRQUNOeU0sT0FBT0E7UUFDUHBpQixLQUFLQTtRQUNMc2hCLFlBQVlBO1FBRVo5QixRQUFRQTtRQUNSaFYsT0FBT0E7UUFDUGYsUUFBUUE7UUFFUmhCLElBQUlBO1FBQ0pWLFFBQVFBO0lBRVY7SUFFQSxPQUFPbks7QUFFVCIsInNvdXJjZXMiOlsid2VicGFjazovL2VxdWlwLXZlbG8tZm9yLW5leHRqcy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9ub2RlX21vZHVsZXMvaW1tdXRhYmxlL2Rpc3QvaW1tdXRhYmxlLmpzPzUzOGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiAgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiAgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICBnbG9iYWwuSW1tdXRhYmxlID0gZmFjdG9yeSgpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0Jzt2YXIgU0xJQ0UkMCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhjdG9yLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIHtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEtleWVkSXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0tleWVkKHZhbHVlKSA/IHZhbHVlIDogS2V5ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh2YWx1ZSkgPyB2YWx1ZSA6IEluZGV4ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKFNldEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2V0SXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0l0ZXJhYmxlKHZhbHVlKSAmJiAhaXNBc3NvY2lhdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IFNldFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cblxuICBmdW5jdGlvbiBpc0l0ZXJhYmxlKG1heWJlSXRlcmFibGUpIHtcbiAgICByZXR1cm4gISEobWF5YmVJdGVyYWJsZSAmJiBtYXliZUl0ZXJhYmxlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0tleWVkKG1heWJlS2V5ZWQpIHtcbiAgICByZXR1cm4gISEobWF5YmVLZXllZCAmJiBtYXliZUtleWVkW0lTX0tFWUVEX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0luZGV4ZWQobWF5YmVJbmRleGVkKSB7XG4gICAgcmV0dXJuICEhKG1heWJlSW5kZXhlZCAmJiBtYXliZUluZGV4ZWRbSVNfSU5ERVhFRF9TRU5USU5FTF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBc3NvY2lhdGl2ZShtYXliZUFzc29jaWF0aXZlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQobWF5YmVBc3NvY2lhdGl2ZSkgfHwgaXNJbmRleGVkKG1heWJlQXNzb2NpYXRpdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPcmRlcmVkKG1heWJlT3JkZXJlZCkge1xuICAgIHJldHVybiAhIShtYXliZU9yZGVyZWQgJiYgbWF5YmVPcmRlcmVkW0lTX09SREVSRURfU0VOVElORUxdKTtcbiAgfVxuXG4gIEl0ZXJhYmxlLmlzSXRlcmFibGUgPSBpc0l0ZXJhYmxlO1xuICBJdGVyYWJsZS5pc0tleWVkID0gaXNLZXllZDtcbiAgSXRlcmFibGUuaXNJbmRleGVkID0gaXNJbmRleGVkO1xuICBJdGVyYWJsZS5pc0Fzc29jaWF0aXZlID0gaXNBc3NvY2lhdGl2ZTtcbiAgSXRlcmFibGUuaXNPcmRlcmVkID0gaXNPcmRlcmVkO1xuXG4gIEl0ZXJhYmxlLktleWVkID0gS2V5ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuSW5kZXhlZCA9IEluZGV4ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuU2V0ID0gU2V0SXRlcmFibGU7XG5cblxuICB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuICB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuICB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcbiAgdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cbiAgLy8gVXNlZCBmb3Igc2V0dGluZyBwcm90b3R5cGUgbWV0aG9kcyB0aGF0IElFOCBjaG9rZXMgb24uXG4gIHZhciBERUxFVEUgPSAnZGVsZXRlJztcblxuICAvLyBDb25zdGFudHMgZGVzY3JpYmluZyB0aGUgc2l6ZSBvZiB0cmllIG5vZGVzLlxuICB2YXIgU0hJRlQgPSA1OyAvLyBSZXN1bHRlZCBpbiBiZXN0IHBlcmZvcm1hbmNlIGFmdGVyIF9fX19fXz9cbiAgdmFyIFNJWkUgPSAxIDw8IFNISUZUO1xuICB2YXIgTUFTSyA9IFNJWkUgLSAxO1xuXG4gIC8vIEEgY29uc2lzdGVudCBzaGFyZWQgdmFsdWUgcmVwcmVzZW50aW5nIFwibm90IHNldFwiIHdoaWNoIGVxdWFscyBub3RoaW5nIG90aGVyXG4gIC8vIHRoYW4gaXRzZWxmLCBhbmQgbm90aGluZyB0aGF0IGNvdWxkIGJlIHByb3ZpZGVkIGV4dGVybmFsbHkuXG4gIHZhciBOT1RfU0VUID0ge307XG5cbiAgLy8gQm9vbGVhbiByZWZlcmVuY2VzLCBSb3VnaCBlcXVpdmFsZW50IG9mIGBib29sICZgLlxuICB2YXIgQ0hBTkdFX0xFTkdUSCA9IHsgdmFsdWU6IGZhbHNlIH07XG4gIHZhciBESURfQUxURVIgPSB7IHZhbHVlOiBmYWxzZSB9O1xuXG4gIGZ1bmN0aW9uIE1ha2VSZWYocmVmKSB7XG4gICAgcmVmLnZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIHJlZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNldFJlZihyZWYpIHtcbiAgICByZWYgJiYgKHJlZi52YWx1ZSA9IHRydWUpO1xuICB9XG5cbiAgLy8gQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgcmVwcmVzZW50aW5nIGFuIFwib3duZXJcIiBmb3IgdHJhbnNpZW50IHdyaXRlc1xuICAvLyB0byB0cmllcy4gVGhlIHJldHVybiB2YWx1ZSB3aWxsIG9ubHkgZXZlciBlcXVhbCBpdHNlbGYsIGFuZCB3aWxsIG5vdCBlcXVhbFxuICAvLyB0aGUgcmV0dXJuIG9mIGFueSBzdWJzZXF1ZW50IGNhbGwgb2YgdGhpcyBmdW5jdGlvbi5cbiAgZnVuY3Rpb24gT3duZXJJRCgpIHt9XG5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vY29weS1hcnJheS1pbmxpbmVcbiAgZnVuY3Rpb24gYXJyQ29weShhcnIsIG9mZnNldCkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1heCgwLCBhcnIubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgICB2YXIgbmV3QXJyID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbjsgaWkrKykge1xuICAgICAgbmV3QXJyW2lpXSA9IGFycltpaSArIG9mZnNldF07XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnI7XG4gIH1cblxuICBmdW5jdGlvbiBlbnN1cmVTaXplKGl0ZXIpIHtcbiAgICBpZiAoaXRlci5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGl0ZXIuc2l6ZSA9IGl0ZXIuX19pdGVyYXRlKHJldHVyblRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlci5zaXplO1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcEluZGV4KGl0ZXIsIGluZGV4KSB7XG4gICAgLy8gVGhpcyBpbXBsZW1lbnRzIFwiaXMgYXJyYXkgaW5kZXhcIiB3aGljaCB0aGUgRUNNQVN0cmluZyBzcGVjIGRlZmluZXMgYXM6XG4gICAgLy9cbiAgICAvLyAgICAgQSBTdHJpbmcgcHJvcGVydHkgbmFtZSBQIGlzIGFuIGFycmF5IGluZGV4IGlmIGFuZCBvbmx5IGlmXG4gICAgLy8gICAgIFRvU3RyaW5nKFRvVWludDMyKFApKSBpcyBlcXVhbCB0byBQIGFuZCBUb1VpbnQzMihQKSBpcyBub3QgZXF1YWxcbiAgICAvLyAgICAgdG8gMl4zMuKIkjEuXG4gICAgLy9cbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYXJyYXktZXhvdGljLW9iamVjdHNcbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFyIHVpbnQzMkluZGV4ID0gaW5kZXggPj4+IDA7IC8vIE4gPj4+IDAgaXMgc2hvcnRoYW5kIGZvciBUb1VpbnQzMlxuICAgICAgaWYgKCcnICsgdWludDMySW5kZXggIT09IGluZGV4IHx8IHVpbnQzMkluZGV4ID09PSA0Mjk0OTY3Mjk1KSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgICBpbmRleCA9IHVpbnQzMkluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXggPCAwID8gZW5zdXJlU2l6ZShpdGVyKSArIGluZGV4IDogaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIChiZWdpbiA9PT0gMCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGJlZ2luIDw9IC1zaXplKSkgJiZcbiAgICAgIChlbmQgPT09IHVuZGVmaW5lZCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA+PSBzaXplKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGJlZ2luLCBzaXplLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIHJlc29sdmVJbmRleChlbmQsIHNpemUsIHNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUluZGV4KGluZGV4LCBzaXplLCBkZWZhdWx0SW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCA/XG4gICAgICBkZWZhdWx0SW5kZXggOlxuICAgICAgaW5kZXggPCAwID9cbiAgICAgICAgTWF0aC5tYXgoMCwgc2l6ZSArIGluZGV4KSA6XG4gICAgICAgIHNpemUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgaW5kZXggOlxuICAgICAgICAgIE1hdGgubWluKHNpemUsIGluZGV4KTtcbiAgfVxuXG4gIC8qIGdsb2JhbCBTeW1ib2wgKi9cblxuICB2YXIgSVRFUkFURV9LRVlTID0gMDtcbiAgdmFyIElURVJBVEVfVkFMVUVTID0gMTtcbiAgdmFyIElURVJBVEVfRU5UUklFUyA9IDI7XG5cbiAgdmFyIFJFQUxfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcblxuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gUkVBTF9JVEVSQVRPUl9TWU1CT0wgfHwgRkFVWF9JVEVSQVRPUl9TWU1CT0w7XG5cblxuICBmdW5jdGlvbiBJdGVyYXRvcihuZXh0KSB7XG4gICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIH1cblxuICAgIEl0ZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbSXRlcmF0b3JdJztcbiAgICB9O1xuXG5cbiAgSXRlcmF0b3IuS0VZUyA9IElURVJBVEVfS0VZUztcbiAgSXRlcmF0b3IuVkFMVUVTID0gSVRFUkFURV9WQUxVRVM7XG4gIEl0ZXJhdG9yLkVOVFJJRVMgPSBJVEVSQVRFX0VOVFJJRVM7XG5cbiAgSXRlcmF0b3IucHJvdG90eXBlLmluc3BlY3QgPVxuICBJdGVyYXRvci5wcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRvU3RyaW5nKCk7IH1cbiAgSXRlcmF0b3IucHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICBmdW5jdGlvbiBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIGl0ZXJhdG9yUmVzdWx0KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZSA9PT0gMCA/IGsgOiB0eXBlID09PSAxID8gdiA6IFtrLCB2XTtcbiAgICBpdGVyYXRvclJlc3VsdCA/IChpdGVyYXRvclJlc3VsdC52YWx1ZSA9IHZhbHVlKSA6IChpdGVyYXRvclJlc3VsdCA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSwgZG9uZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYXRvckRvbmUoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzSXRlcmF0b3IobWF5YmVJdGVyYWJsZSkge1xuICAgIHJldHVybiAhIWdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0l0ZXJhdG9yKG1heWJlSXRlcmF0b3IpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvciAmJiB0eXBlb2YgbWF5YmVJdGVyYXRvci5uZXh0ID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpO1xuICAgIHJldHVybiBpdGVyYXRvckZuICYmIGl0ZXJhdG9yRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKGl0ZXJhYmxlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBpdGVyYWJsZSAmJiAoXG4gICAgICAoUkVBTF9JVEVSQVRPUl9TWU1CT0wgJiYgaXRlcmFibGVbUkVBTF9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgICAgaXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdXG4gICAgKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvckZuO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2VxLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2VxKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG4gICAgICAgIGlzSXRlcmFibGUodmFsdWUpID8gdmFsdWUudG9TZXEoKSA6IHNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLnRvU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX2NhY2hlICYmIHRoaXMuX19pdGVyYXRlVW5jYWNoZWQpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB0aGlzLmVudHJ5U2VxKCkudG9BcnJheSgpO1xuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLl9jYWNoZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRlVW5jYWNoZWQoZm4sIHJldmVyc2UpXG5cbiAgICBTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0ZSh0aGlzLCBmbiwgcmV2ZXJzZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIC8vIGFic3RyYWN0IF9faXRlcmF0b3JVbmNhY2hlZCh0eXBlLCByZXZlcnNlKVxuXG4gICAgU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHNlcUl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UsIHRydWUpO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEtleWVkU2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIEtleWVkU2VxKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgIGVtcHR5U2VxdWVuY2UoKS50b0tleWVkU2VxKCkgOlxuICAgICAgICBpc0l0ZXJhYmxlKHZhbHVlKSA/XG4gICAgICAgICAgKGlzS2V5ZWQodmFsdWUpID8gdmFsdWUudG9TZXEoKSA6IHZhbHVlLmZyb21FbnRyeVNlcSgpKSA6XG4gICAgICAgICAga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIEtleWVkU2VxLnByb3RvdHlwZS50b0tleWVkU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJbmRleGVkU2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcbiAgICAgICAgIWlzSXRlcmFibGUodmFsdWUpID8gaW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSkgOlxuICAgICAgICBpc0tleWVkKHZhbHVlKSA/IHZhbHVlLmVudHJ5U2VxKCkgOiB2YWx1ZS50b0luZGV4ZWRTZXEoKTtcbiAgICB9XG5cbiAgICBJbmRleGVkU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIEluZGV4ZWRTZXEoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9JbmRleGVkU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NlcSBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIEluZGV4ZWRTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSwgZmFsc2UpO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKFNldFNlcSwgU2VxKTtcbiAgICBmdW5jdGlvbiBTZXRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuICAgICAgICAhaXNJdGVyYWJsZSh2YWx1ZSkgPyBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSA6XG4gICAgICAgIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUuZW50cnlTZXEoKSA6IHZhbHVlXG4gICAgICApLnRvU2V0U2VxKCk7XG4gICAgfVxuXG4gICAgU2V0U2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIFNldFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXRTZXEucHJvdG90eXBlLnRvU2V0U2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5cblxuICBTZXEuaXNTZXEgPSBpc1NlcTtcbiAgU2VxLktleWVkID0gS2V5ZWRTZXE7XG4gIFNlcS5TZXQgPSBTZXRTZXE7XG4gIFNlcS5JbmRleGVkID0gSW5kZXhlZFNlcTtcblxuICB2YXIgSVNfU0VRX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU0VRX19AQCc7XG5cbiAgU2VxLnByb3RvdHlwZVtJU19TRVFfU0VOVElORUxdID0gdHJ1ZTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoQXJyYXlTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEFycmF5U2VxKGFycmF5KSB7XG4gICAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuICAgICAgdGhpcy5zaXplID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cblxuICAgIEFycmF5U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl9hcnJheVt3cmFwSW5kZXgodGhpcywgaW5kZXgpXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaWksIGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpKysgOiBpaSsrXSl9XG4gICAgICApO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKE9iamVjdFNlcSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIE9iamVjdFNlcShvYmplY3QpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgIHRoaXMuX29iamVjdCA9IG9iamVjdDtcbiAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgdGhpcy5zaXplID0ga2V5cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgT2JqZWN0U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSk7XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG4gICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4ob2JqZWN0W2tleV0sIGtleSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBPYmplY3RTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICAgICAgdmFyIG1heEluZGV4ID0ga2V5cy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcbiAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gIE9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cbiAgY3JlYXRlQ2xhc3MoSXRlcmFibGVTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEl0ZXJhYmxlU2VxKGl0ZXJhYmxlKSB7XG4gICAgICB0aGlzLl9pdGVyYWJsZSA9IGl0ZXJhYmxlO1xuICAgICAgdGhpcy5zaXplID0gaXRlcmFibGUubGVuZ3RoIHx8IGl0ZXJhYmxlLnNpemU7XG4gICAgfVxuXG4gICAgSXRlcmFibGVTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXMuX2l0ZXJhYmxlO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBJdGVyYWJsZVNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICBpZiAoIWlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJdGVyYXRvclNlcSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gSXRlcmF0b3JTZXEoaXRlcmF0b3IpIHtcbiAgICAgIHRoaXMuX2l0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICB0aGlzLl9pdGVyYXRvckNhY2hlID0gW107XG4gICAgfVxuXG4gICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5faXRlcmF0b3JDYWNoZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlIChpdGVyYXRpb25zIDwgY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmbihjYWNoZVtpdGVyYXRpb25zXSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0ZXA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciB2YWwgPSBzdGVwLnZhbHVlO1xuICAgICAgICBjYWNoZVtpdGVyYXRpb25zXSA9IHZhbDtcbiAgICAgICAgaWYgKGZuKHZhbCwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIEl0ZXJhdG9yU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICAgIHZhciBjYWNoZSA9IHRoaXMuX2l0ZXJhdG9yQ2FjaGU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPj0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhY2hlW2l0ZXJhdGlvbnNdID0gc3RlcC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zLCBjYWNoZVtpdGVyYXRpb25zKytdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG5cbiAgLy8gIyBwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXG4gIGZ1bmN0aW9uIGlzU2VxKG1heWJlU2VxKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU2VxICYmIG1heWJlU2VxW0lTX1NFUV9TRU5USU5FTF0pO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFUTtcblxuICBmdW5jdGlvbiBlbXB0eVNlcXVlbmNlKCkge1xuICAgIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID1cbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkuZnJvbUVudHJ5U2VxKCkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gbmV3IE9iamVjdFNlcSh2YWx1ZSkgOlxuICAgICAgdW5kZWZpbmVkO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIFtrLCB2XSBlbnRyaWVzLCAnK1xuICAgICAgICAnb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgdmFsdWVzOiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB8fFxuICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgbmV3IE9iamVjdFNlcSh2YWx1ZSkpO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlcywgb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgaXNBcnJheUxpa2UodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKSA6XG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VxSXRlcmF0ZShzZXEsIGZuLCByZXZlcnNlLCB1c2VLZXlzKSB7XG4gICAgdmFyIGNhY2hlID0gc2VxLl9jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IGNhY2hlLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGNhY2hlW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4oZW50cnlbMV0sIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpLCBzZXEpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBpaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpaTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcS5fX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFJdGVyYXRvcihzZXEsIHR5cGUsIHJldmVyc2UsIHVzZUtleXMpIHtcbiAgICB2YXIgY2FjaGUgPSBzZXEuX2NhY2hlO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICAgIHJldHVybiBpaSsrID4gbWF4SW5kZXggP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpIC0gMSwgZW50cnlbMV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZXEuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTKGpzb24sIGNvbnZlcnRlcikge1xuICAgIHJldHVybiBjb252ZXJ0ZXIgP1xuICAgICAgZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sICcnLCB7Jyc6IGpzb259KSA6XG4gICAgICBmcm9tSlNEZWZhdWx0KGpzb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sIGtleSwgcGFyZW50SlNPTikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG4gICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBJbmRleGVkU2VxKGpzb24pLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBmcm9tSlNXaXRoKGNvbnZlcnRlciwgdiwgaywganNvbil9KSk7XG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqKGpzb24pKSB7XG4gICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBLZXllZFNlcShqc29uKS5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIHYsIGssIGpzb24pfSkpO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyb21KU0RlZmF1bHQoanNvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG4gICAgICByZXR1cm4gSW5kZXhlZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9MaXN0KCk7XG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqKGpzb24pKSB7XG4gICAgICByZXR1cm4gS2V5ZWRTZXEoanNvbikubWFwKGZyb21KU0RlZmF1bHQpLnRvTWFwKCk7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQbGFpbk9iaih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiAodmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuICAgKiBhbmQgU2V0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXAjS2V5X2VxdWFsaXR5KVxuICAgKlxuICAgKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAgICogdmFsdWUsIHdoaWNoIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhbGdvcml0aG0gZGVzY3JpYmVkIGJ5XG4gICAqIFtgT2JqZWN0LmlzYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzKS5cbiAgICpcbiAgICogVGhpcyBpcyBleHRlbmRlZCBmdXJ0aGVyIHRvIGFsbG93IE9iamVjdHMgdG8gZGVzY3JpYmUgdGhlIHZhbHVlcyB0aGV5XG4gICAqIHJlcHJlc2VudCwgYnkgd2F5IG9mIGB2YWx1ZU9mYCBvciBgZXF1YWxzYCAoYW5kIGBoYXNoQ29kZWApLlxuICAgKlxuICAgKiBOb3RlOiBiZWNhdXNlIG9mIHRoaXMgZXh0ZW5zaW9uLCB0aGUga2V5IGVxdWFsaXR5IG9mIEltbXV0YWJsZS5NYXAgYW5kIHRoZVxuICAgKiB2YWx1ZSBlcXVhbGl0eSBvZiBJbW11dGFibGUuU2V0IHdpbGwgZGlmZmVyIGZyb20gRVM2IE1hcCBhbmQgU2V0LlxuICAgKlxuICAgKiAjIyMgRGVmaW5pbmcgY3VzdG9tIHZhbHVlc1xuICAgKlxuICAgKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuICAgKiBgdmFsdWVPZmAuIEZvciBleGFtcGxlLCBgRGF0ZWAgcmVwcmVzZW50cyBhIHZhbHVlIGJ5IHJldHVybmluZyBhIHVuaXhcbiAgICogdGltZXN0YW1wIGZvciBgdmFsdWVPZmA6XG4gICAqXG4gICAqICAgICB2YXIgZGF0ZTEgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTsgLy8gRnJpIEZlYiAxMyAyMDA5IC4uLlxuICAgKiAgICAgdmFyIGRhdGUyID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7XG4gICAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcbiAgICogICAgIGFzc2VydCggZGF0ZTEgIT09IGRhdGUyICk7XG4gICAqICAgICBhc3NlcnQoIEltbXV0YWJsZS5pcyggZGF0ZTEsIGRhdGUyICkgKTtcbiAgICpcbiAgICogTm90ZTogb3ZlcnJpZGluZyBgdmFsdWVPZmAgbWF5IGhhdmUgb3RoZXIgaW1wbGljYXRpb25zIGlmIHlvdSB1c2UgdGhpcyBvYmplY3RcbiAgICogd2hlcmUgSmF2YVNjcmlwdCBleHBlY3RzIGEgcHJpbWl0aXZlLCBzdWNoIGFzIGltcGxpY2l0IHN0cmluZyBjb2VyY2lvbi5cbiAgICpcbiAgICogRm9yIG1vcmUgY29tcGxleCB0eXBlcywgZXNwZWNpYWxseSBjb2xsZWN0aW9ucywgaW1wbGVtZW50aW5nIGB2YWx1ZU9mYCBtYXlcbiAgICogbm90IGJlIHBlcmZvcm1hbnQuIEFuIGFsdGVybmF0aXZlIGlzIHRvIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICogYGVxdWFsc2AgdGFrZXMgYW5vdGhlciBvYmplY3QsIHByZXN1bWFibHkgb2Ygc2ltaWxhciB0eXBlLCBhbmQgcmV0dXJucyB0cnVlXG4gICAqIGlmIHRoZSBpdCBpcyBlcXVhbC4gRXF1YWxpdHkgaXMgc3ltbWV0cmljYWwsIHNvIHRoZSBzYW1lIHJlc3VsdCBzaG91bGQgYmVcbiAgICogcmV0dXJuZWQgaWYgdGhpcyBhbmQgdGhlIGFyZ3VtZW50IGFyZSBmbGlwcGVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0KCBhLmVxdWFscyhiKSA9PT0gYi5lcXVhbHMoYSkgKTtcbiAgICpcbiAgICogYGhhc2hDb2RlYCByZXR1cm5zIGEgMzJiaXQgaW50ZWdlciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgd2hpY2ggd2lsbFxuICAgKiBiZSB1c2VkIHRvIGRldGVybWluZSBob3cgdG8gc3RvcmUgdGhlIHZhbHVlIG9iamVjdCBpbiBhIE1hcCBvciBTZXQuIFlvdSBtdXN0XG4gICAqIHByb3ZpZGUgYm90aCBvciBuZWl0aGVyIG1ldGhvZHMsIG9uZSBtdXN0IG5vdCBleGlzdCB3aXRob3V0IHRoZSBvdGhlci5cbiAgICpcbiAgICogQWxzbywgYW4gaW1wb3J0YW50IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZXNlIG1ldGhvZHMgbXVzdCBiZSB1cGhlbGQ6IGlmIHR3b1xuICAgKiB2YWx1ZXMgYXJlIGVxdWFsLCB0aGV5ICptdXN0KiByZXR1cm4gdGhlIHNhbWUgaGFzaENvZGUuIElmIHRoZSB2YWx1ZXMgYXJlIG5vdFxuICAgKiBlcXVhbCwgdGhleSBtaWdodCBoYXZlIHRoZSBzYW1lIGhhc2hDb2RlOyB0aGlzIGlzIGNhbGxlZCBhIGhhc2ggY29sbGlzaW9uLFxuICAgKiBhbmQgd2hpbGUgdW5kZXNpcmFibGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0IGlzIGFjY2VwdGFibGUuXG4gICAqXG4gICAqICAgICBpZiAoYS5lcXVhbHMoYikpIHtcbiAgICogICAgICAgYXNzZXJ0KCBhLmhhc2hDb2RlKCkgPT09IGIuaGFzaENvZGUoKSApO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiBBbGwgSW1tdXRhYmxlIGNvbGxlY3Rpb25zIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIGlzKHZhbHVlQSwgdmFsdWVCKSB7XG4gICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlQi52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZUEgPSB2YWx1ZUEudmFsdWVPZigpO1xuICAgICAgdmFsdWVCID0gdmFsdWVCLnZhbHVlT2YoKTtcbiAgICAgIGlmICh2YWx1ZUEgPT09IHZhbHVlQiB8fCAodmFsdWVBICE9PSB2YWx1ZUEgJiYgdmFsdWVCICE9PSB2YWx1ZUIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZUEgfHwgIXZhbHVlQikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWVCLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB2YWx1ZUEuZXF1YWxzKHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhaXNJdGVyYWJsZShiKSB8fFxuICAgICAgYS5zaXplICE9PSB1bmRlZmluZWQgJiYgYi5zaXplICE9PSB1bmRlZmluZWQgJiYgYS5zaXplICE9PSBiLnNpemUgfHxcbiAgICAgIGEuX19oYXNoICE9PSB1bmRlZmluZWQgJiYgYi5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBhLl9faGFzaCAhPT0gYi5fX2hhc2ggfHxcbiAgICAgIGlzS2V5ZWQoYSkgIT09IGlzS2V5ZWQoYikgfHxcbiAgICAgIGlzSW5kZXhlZChhKSAhPT0gaXNJbmRleGVkKGIpIHx8XG4gICAgICBpc09yZGVyZWQoYSkgIT09IGlzT3JkZXJlZChiKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChhLnNpemUgPT09IDAgJiYgYi5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbm90QXNzb2NpYXRpdmUgPSAhaXNBc3NvY2lhdGl2ZShhKTtcblxuICAgIGlmIChpc09yZGVyZWQoYSkpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gYS5lbnRyaWVzKCk7XG4gICAgICByZXR1cm4gYi5ldmVyeShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzLm5leHQoKS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGlzKGVudHJ5WzFdLCB2KSAmJiAobm90QXNzb2NpYXRpdmUgfHwgaXMoZW50cnlbMF0sIGspKTtcbiAgICAgIH0pICYmIGVudHJpZXMubmV4dCgpLmRvbmU7XG4gICAgfVxuXG4gICAgdmFyIGZsaXBwZWQgPSBmYWxzZTtcblxuICAgIGlmIChhLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGIuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYS5jYWNoZVJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGEuY2FjaGVSZXN1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxpcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBfID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSBfO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhbGxFcXVhbCA9IHRydWU7XG4gICAgdmFyIGJTaXplID0gYi5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGlmIChub3RBc3NvY2lhdGl2ZSA/ICFhLmhhcyh2KSA6XG4gICAgICAgICAgZmxpcHBlZCA/ICFpcyh2LCBhLmdldChrLCBOT1RfU0VUKSkgOiAhaXMoYS5nZXQoaywgTk9UX1NFVCksIHYpKSB7XG4gICAgICAgIGFsbEVxdWFsID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhbGxFcXVhbCAmJiBhLnNpemUgPT09IGJTaXplO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmVwZWF0LCBJbmRleGVkU2VxKTtcblxuICAgIGZ1bmN0aW9uIFJlcGVhdCh2YWx1ZSwgdGltZXMpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXBlYXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVwZWF0KHZhbHVlLCB0aW1lcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zaXplID0gdGltZXMgPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogTWF0aC5tYXgoMCwgdGltZXMpO1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBpZiAoRU1QVFlfUkVQRUFUKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JFUEVBVDtcbiAgICAgICAgfVxuICAgICAgICBFTVBUWV9SRVBFQVQgPSB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIFJlcGVhdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSZXBlYXQgW10nO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdSZXBlYXQgWyAnICsgdGhpcy5fdmFsdWUgKyAnICcgKyB0aGlzLnNpemUgKyAnIHRpbWVzIF0nO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/IHRoaXMuX3ZhbHVlIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpID8gdGhpcyA6XG4gICAgICAgIG5ldyBSZXBlYXQodGhpcy5fdmFsdWUsIHJlc29sdmVFbmQoZW5kLCBzaXplKSAtIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSkpO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHRoaXMuc2l6ZTsgaWkrKykge1xuICAgICAgICBpZiAoZm4odGhpcy5fdmFsdWUsIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaWk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPCB0aGlzJDAuc2l6ZSA/IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdGhpcyQwLl92YWx1ZSkgOiBpdGVyYXRvckRvbmUoKX1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJlcGVhdCA/XG4gICAgICAgIGlzKHRoaXMuX3ZhbHVlLCBvdGhlci5fdmFsdWUpIDpcbiAgICAgICAgZGVlcEVxdWFsKG90aGVyKTtcbiAgICB9O1xuXG5cbiAgdmFyIEVNUFRZX1JFUEVBVDtcblxuICBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBlcnJvcikge1xuICAgIGlmICghY29uZGl0aW9uKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmFuZ2UsIEluZGV4ZWRTZXEpO1xuXG4gICAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApO1xuICAgICAgfVxuICAgICAgaW52YXJpYW50KHN0ZXAgIT09IDAsICdDYW5ub3Qgc3RlcCBhIFJhbmdlIGJ5IDAnKTtcbiAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG4gICAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgc3RlcCA9IC1zdGVwO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChlbmQgLSBzdGFydCkgLyBzdGVwIC0gMSkgKyAxKTtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JBTkdFO1xuICAgICAgICB9XG4gICAgICAgIEVNUFRZX1JBTkdFID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSYW5nZSBbXSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1JhbmdlIFsgJyArXG4gICAgICAgIHRoaXMuX3N0YXJ0ICsgJy4uLicgKyB0aGlzLl9lbmQgK1xuICAgICAgICAodGhpcy5fc3RlcCA+IDEgPyAnIGJ5ICcgKyB0aGlzLl9zdGVwIDogJycpICtcbiAgICAgICcgXSc7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgP1xuICAgICAgICB0aGlzLl9zdGFydCArIHdyYXBJbmRleCh0aGlzLCBpbmRleCkgKiB0aGlzLl9zdGVwIDpcbiAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgcG9zc2libGVJbmRleCA9IChzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0KSAvIHRoaXMuX3N0ZXA7XG4gICAgICByZXR1cm4gcG9zc2libGVJbmRleCA+PSAwICYmXG4gICAgICAgIHBvc3NpYmxlSW5kZXggPCB0aGlzLnNpemUgJiZcbiAgICAgICAgcG9zc2libGVJbmRleCA9PT0gTWF0aC5mbG9vcihwb3NzaWJsZUluZGV4KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgICAgZW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG4gICAgICBpZiAoZW5kIDw9IGJlZ2luKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UoMCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHRoaXMuZ2V0KGJlZ2luLCB0aGlzLl9lbmQpLCB0aGlzLmdldChlbmQsIHRoaXMuX2VuZCksIHRoaXMuX3N0ZXApO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgb2Zmc2V0VmFsdWUgPSBzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgaWYgKG9mZnNldFZhbHVlICUgdGhpcy5fc3RlcCA9PT0gMCkge1xuICAgICAgICB2YXIgaW5kZXggPSBvZmZzZXRWYWx1ZSAvIHRoaXMuX3N0ZXA7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKHZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHYgPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgKz0gcmV2ZXJzZSA/IC1zdGVwIDogc3RlcDtcbiAgICAgICAgcmV0dXJuIGlpID4gbWF4SW5kZXggPyBpdGVyYXRvckRvbmUoKSA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdik7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSYW5nZSA/XG4gICAgICAgIHRoaXMuX3N0YXJ0ID09PSBvdGhlci5fc3RhcnQgJiZcbiAgICAgICAgdGhpcy5fZW5kID09PSBvdGhlci5fZW5kICYmXG4gICAgICAgIHRoaXMuX3N0ZXAgPT09IG90aGVyLl9zdGVwIDpcbiAgICAgICAgZGVlcEVxdWFsKHRoaXMsIG90aGVyKTtcbiAgICB9O1xuXG5cbiAgdmFyIEVNUFRZX1JBTkdFO1xuXG4gIGNyZWF0ZUNsYXNzKENvbGxlY3Rpb24sIEl0ZXJhYmxlKTtcbiAgICBmdW5jdGlvbiBDb2xsZWN0aW9uKCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdBYnN0cmFjdCcpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKEtleWVkQ29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gS2V5ZWRDb2xsZWN0aW9uKCkge31cblxuICBjcmVhdGVDbGFzcyhJbmRleGVkQ29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gSW5kZXhlZENvbGxlY3Rpb24oKSB7fVxuXG4gIGNyZWF0ZUNsYXNzKFNldENvbGxlY3Rpb24sIENvbGxlY3Rpb24pO2Z1bmN0aW9uIFNldENvbGxlY3Rpb24oKSB7fVxuXG5cbiAgQ29sbGVjdGlvbi5LZXllZCA9IEtleWVkQ29sbGVjdGlvbjtcbiAgQ29sbGVjdGlvbi5JbmRleGVkID0gSW5kZXhlZENvbGxlY3Rpb247XG4gIENvbGxlY3Rpb24uU2V0ID0gU2V0Q29sbGVjdGlvbjtcblxuICB2YXIgaW11bCA9XG4gICAgdHlwZW9mIE1hdGguaW11bCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXRoLmltdWwoMHhmZmZmZmZmZiwgMikgPT09IC0yID9cbiAgICBNYXRoLmltdWwgOlxuICAgIGZ1bmN0aW9uIGltdWwoYSwgYikge1xuICAgICAgYSA9IGEgfCAwOyAvLyBpbnRcbiAgICAgIGIgPSBiIHwgMDsgLy8gaW50XG4gICAgICB2YXIgYyA9IGEgJiAweGZmZmY7XG4gICAgICB2YXIgZCA9IGIgJiAweGZmZmY7XG4gICAgICAvLyBTaGlmdCBieSAwIGZpeGVzIHRoZSBzaWduIG9uIHRoZSBoaWdoIHBhcnQuXG4gICAgICByZXR1cm4gKGMgKiBkKSArICgoKChhID4+PiAxNikgKiBkICsgYyAqIChiID4+PiAxNikpIDw8IDE2KSA+Pj4gMCkgfCAwOyAvLyBpbnRcbiAgICB9O1xuXG4gIC8vIHY4IGhhcyBhbiBvcHRpbWl6YXRpb24gZm9yIHN0b3JpbmcgMzEtYml0IHNpZ25lZCBudW1iZXJzLlxuICAvLyBWYWx1ZXMgd2hpY2ggaGF2ZSBlaXRoZXIgMDAgb3IgMTEgYXMgdGhlIGhpZ2ggb3JkZXIgYml0cyBxdWFsaWZ5LlxuICAvLyBUaGlzIGZ1bmN0aW9uIGRyb3BzIHRoZSBoaWdoZXN0IG9yZGVyIGJpdCBpbiBhIHNpZ25lZCBudW1iZXIsIG1haW50YWluaW5nXG4gIC8vIHRoZSBzaWduIGJpdC5cbiAgZnVuY3Rpb24gc21pKGkzMikge1xuICAgIHJldHVybiAoKGkzMiA+Pj4gMSkgJiAweDQwMDAwMDAwKSB8IChpMzIgJiAweEJGRkZGRkZGKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2gobykge1xuICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvID0gby52YWx1ZU9mKCk7XG4gICAgICBpZiAobyA9PT0gZmFsc2UgfHwgbyA9PT0gbnVsbCB8fCBvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgbztcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhciBoID0gbyB8IDA7XG4gICAgICBpZiAoaCAhPT0gbykge1xuICAgICAgICBoIF49IG8gKiAweEZGRkZGRkZGO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG8gPiAweEZGRkZGRkZGKSB7XG4gICAgICAgIG8gLz0gMHhGRkZGRkZGRjtcbiAgICAgICAgaCBePSBvO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNtaShoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gby5sZW5ndGggPiBTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOID8gY2FjaGVkSGFzaFN0cmluZyhvKSA6IGhhc2hTdHJpbmcobyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby5oYXNoQ29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG8uaGFzaENvZGUoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaGFzaEpTT2JqKG8pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG8udG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBoYXNoU3RyaW5nKG8udG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgdHlwZSAnICsgdHlwZSArICcgY2Fubm90IGJlIGhhc2hlZC4nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZEhhc2hTdHJpbmcoc3RyaW5nKSB7XG4gICAgdmFyIGhhc2ggPSBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXTtcbiAgICBpZiAoaGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNoID0gaGFzaFN0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPT09IFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFKSB7XG4gICAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPSAwO1xuICAgICAgICBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUrKztcbiAgICAgIHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddID0gaGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9oYXNoaW5nLXN0cmluZ3NcbiAgZnVuY3Rpb24gaGFzaFN0cmluZyhzdHJpbmcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBoYXNoIGZyb20gSlZNXG4gICAgLy8gVGhlIGhhc2ggY29kZSBmb3IgYSBzdHJpbmcgaXMgY29tcHV0ZWQgYXNcbiAgICAvLyBzWzBdICogMzEgXiAobiAtIDEpICsgc1sxXSAqIDMxIF4gKG4gLSAyKSArIC4uLiArIHNbbiAtIDFdLFxuICAgIC8vIHdoZXJlIHNbaV0gaXMgdGhlIGl0aCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyBhbmQgbiBpcyB0aGUgbGVuZ3RoIG9mXG4gICAgLy8gdGhlIHN0cmluZy4gV2UgXCJtb2RcIiB0aGUgcmVzdWx0IHRvIG1ha2UgaXQgYmV0d2VlbiAwIChpbmNsdXNpdmUpIGFuZCAyXjMxXG4gICAgLy8gKGV4Y2x1c2l2ZSkgYnkgZHJvcHBpbmcgaGlnaCBiaXRzLlxuICAgIHZhciBoYXNoID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc3RyaW5nLmxlbmd0aDsgaWkrKykge1xuICAgICAgaGFzaCA9IDMxICogaGFzaCArIHN0cmluZy5jaGFyQ29kZUF0KGlpKSB8IDA7XG4gICAgfVxuICAgIHJldHVybiBzbWkoaGFzaCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNoSlNPYmoob2JqKSB7XG4gICAgdmFyIGhhc2g7XG4gICAgaWYgKHVzaW5nV2Vha01hcCkge1xuICAgICAgaGFzaCA9IHdlYWtNYXAuZ2V0KG9iaik7XG4gICAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc2ggPSBvYmpbVUlEX0hBU0hfS0VZXTtcbiAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG5cbiAgICBpZiAoIWNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBoYXNoID0gb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlICYmIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZVtVSURfSEFTSF9LRVldO1xuICAgICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgIH1cblxuICAgICAgaGFzaCA9IGdldElFTm9kZUhhc2gob2JqKTtcbiAgICAgIGlmIChoYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzaCA9ICsrb2JqSGFzaFVJRDtcbiAgICBpZiAob2JqSGFzaFVJRCAmIDB4NDAwMDAwMDApIHtcbiAgICAgIG9iakhhc2hVSUQgPSAwO1xuICAgIH1cblxuICAgIGlmICh1c2luZ1dlYWtNYXApIHtcbiAgICAgIHdlYWtNYXAuc2V0KG9iaiwgaGFzaCk7XG4gICAgfSBlbHNlIGlmIChpc0V4dGVuc2libGUgIT09IHVuZGVmaW5lZCAmJiBpc0V4dGVuc2libGUob2JqKSA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm9uLWV4dGVuc2libGUgb2JqZWN0cyBhcmUgbm90IGFsbG93ZWQgYXMga2V5cy4nKTtcbiAgICB9IGVsc2UgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBVSURfSEFTSF9LRVksIHtcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IGZhbHNlLFxuICAgICAgICAnd3JpdGFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogaGFzaFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChvYmoucHJvcGVydHlJc0VudW1lcmFibGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlID09PSBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKSB7XG4gICAgICAvLyBTaW5jZSB3ZSBjYW4ndCBkZWZpbmUgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0XG4gICAgICAvLyB3ZSdsbCBoaWphY2sgb25lIG9mIHRoZSBsZXNzLXVzZWQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyB0b1xuICAgICAgLy8gc2F2ZSBvdXIgaGFzaCBvbiBpdC4gU2luY2UgdGhpcyBpcyBhIGZ1bmN0aW9uIGl0IHdpbGwgbm90IHNob3cgdXAgaW5cbiAgICAgIC8vIGBKU09OLnN0cmluZ2lmeWAgd2hpY2ggaXMgd2hhdCB3ZSB3YW50LlxuICAgICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZVtVSURfSEFTSF9LRVldID0gaGFzaDtcbiAgICB9IGVsc2UgaWYgKG9iai5ub2RlVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGNvdWxkbid0IGdldCB0aGUgSUUgYHVuaXF1ZUlEYCB0byB1c2UgYXMgYSBoYXNoXG4gICAgICAvLyBhbmQgd2UgY291bGRuJ3QgdXNlIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgdG8gZXhwbG9pdCB0aGVcbiAgICAgIC8vIGRvbnRFbnVtIGJ1ZyBzbyB3ZSBzaW1wbHkgYWRkIHRoZSBgVUlEX0hBU0hfS0VZYCBvbiB0aGUgbm9kZVxuICAgICAgLy8gaXRzZWxmLlxuICAgICAgb2JqW1VJRF9IQVNIX0tFWV0gPSBoYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiBvYmplY3QuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvLyBHZXQgcmVmZXJlbmNlcyB0byBFUzUgb2JqZWN0IG1ldGhvZHMuXG4gIHZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4gIC8vIFRydWUgaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IHdvcmtzIGFzIGV4cGVjdGVkLiBJRTggZmFpbHMgdGhpcyB0ZXN0LlxuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ0AnLCB7fSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KCkpO1xuXG4gIC8vIElFIGhhcyBhIGB1bmlxdWVJRGAgcHJvcGVydHkgb24gRE9NIG5vZGVzLiBXZSBjYW4gY29uc3RydWN0IHRoZSBoYXNoIGZyb20gaXRcbiAgLy8gYW5kIGF2b2lkIG1lbW9yeSBsZWFrcyBmcm9tIHRoZSBJRSBjbG9uZU5vZGUgYnVnLlxuICBmdW5jdGlvbiBnZXRJRU5vZGVIYXNoKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLm5vZGVUeXBlID4gMCkge1xuICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgMTogLy8gRWxlbWVudFxuICAgICAgICAgIHJldHVybiBub2RlLnVuaXF1ZUlEO1xuICAgICAgICBjYXNlIDk6IC8vIERvY3VtZW50XG4gICAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnRFbGVtZW50ICYmIG5vZGUuZG9jdW1lbnRFbGVtZW50LnVuaXF1ZUlEO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHBvc3NpYmxlLCB1c2UgYSBXZWFrTWFwLlxuICB2YXIgdXNpbmdXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbic7XG4gIHZhciB3ZWFrTWFwO1xuICBpZiAodXNpbmdXZWFrTWFwKSB7XG4gICAgd2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG4gIH1cblxuICB2YXIgb2JqSGFzaFVJRCA9IDA7XG5cbiAgdmFyIFVJRF9IQVNIX0tFWSA9ICdfX2ltbXV0YWJsZWhhc2hfXyc7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gICAgVUlEX0hBU0hfS0VZID0gU3ltYm9sKFVJRF9IQVNIX0tFWSk7XG4gIH1cblxuICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfTUlOX1NUUkxFTiA9IDE2O1xuICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUgPSAyNTU7XG4gIHZhciBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFID0gMDtcbiAgdmFyIHN0cmluZ0hhc2hDYWNoZSA9IHt9O1xuXG4gIGZ1bmN0aW9uIGFzc2VydE5vdEluZmluaXRlKHNpemUpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBzaXplICE9PSBJbmZpbml0eSxcbiAgICAgICdDYW5ub3QgcGVyZm9ybSB0aGlzIGFjdGlvbiB3aXRoIGFuIGluZmluaXRlIHNpemUuJ1xuICAgICk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhNYXAsIEtleWVkQ29sbGVjdGlvbik7XG5cbiAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXG4gICAgZnVuY3Rpb24gTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5TWFwKCkgOlxuICAgICAgICBpc01hcCh2YWx1ZSkgJiYgIWlzT3JkZXJlZCh2YWx1ZSkgPyB2YWx1ZSA6XG4gICAgICAgIGVtcHR5TWFwKCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihtYXAgKSB7XG4gICAgICAgICAgdmFyIGl0ZXIgPSBLZXllZEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2LCBrKSAge3JldHVybiBtYXAuc2V0KGssIHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIE1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ01hcCB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290ID9cbiAgICAgICAgdGhpcy5fcm9vdC5nZXQoMCwgdW5kZWZpbmVkLCBrLCBub3RTZXRWYWx1ZSkgOlxuICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oaywgdikge1xuICAgICAgcmV0dXJuIHVwZGF0ZU1hcCh0aGlzLCBrLCB2KTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5zZXRJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIHYpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKGtleVBhdGgsIE5PVF9TRVQsIGZ1bmN0aW9uKCkgIHtyZXR1cm4gdn0pO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiB1cGRhdGVNYXAodGhpcywgaywgTk9UX1NFVCk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuZGVsZXRlSW4gPSBmdW5jdGlvbihrZXlQYXRoKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBmdW5jdGlvbigpICB7cmV0dXJuIE5PVF9TRVR9KTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuICAgICAgICBrKHRoaXMpIDpcbiAgICAgICAgdGhpcy51cGRhdGVJbihba10sIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS51cGRhdGVJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG4gICAgICBpZiAoIXVwZGF0ZXIpIHtcbiAgICAgICAgdXBkYXRlciA9IG5vdFNldFZhbHVlO1xuICAgICAgICBub3RTZXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciB1cGRhdGVkVmFsdWUgPSB1cGRhdGVJbkRlZXBNYXAoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZvcmNlSXRlcmF0b3Ioa2V5UGF0aCksXG4gICAgICAgIG5vdFNldFZhbHVlLFxuICAgICAgICB1cGRhdGVyXG4gICAgICApO1xuICAgICAgcmV0dXJuIHVwZGF0ZWRWYWx1ZSA9PT0gTk9UX1NFVCA/IHVuZGVmaW5lZCA6IHVwZGF0ZWRWYWx1ZTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlNYXAoKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgdW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgbWVyZ2VyLCBpdGVycyk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2VJbiA9IGZ1bmN0aW9uKGtleVBhdGgpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKFxuICAgICAgICBrZXlQYXRoLFxuICAgICAgICBlbXB0eU1hcCgpLFxuICAgICAgICBmdW5jdGlvbihtICkge3JldHVybiB0eXBlb2YgbS5tZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgbS5tZXJnZS5hcHBseShtLCBpdGVycykgOlxuICAgICAgICAgIGl0ZXJzW2l0ZXJzLmxlbmd0aCAtIDFdfVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZURlZXAgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIGRlZXBNZXJnZXIsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgZGVlcE1lcmdlcldpdGgobWVyZ2VyKSwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcEluID0gZnVuY3Rpb24oa2V5UGF0aCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oXG4gICAgICAgIGtleVBhdGgsXG4gICAgICAgIGVtcHR5TWFwKCksXG4gICAgICAgIGZ1bmN0aW9uKG0gKSB7cmV0dXJuIHR5cGVvZiBtLm1lcmdlRGVlcCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgbS5tZXJnZURlZXAuYXBwbHkobSwgaXRlcnMpIDpcbiAgICAgICAgICBpdGVyc1tpdGVycy5sZW5ndGggLSAxXX1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZE1hcChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgICBNYXAucHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBmdW5jdGlvbihmbikge1xuICAgICAgdmFyIG11dGFibGUgPSB0aGlzLmFzTXV0YWJsZSgpO1xuICAgICAgZm4obXV0YWJsZSk7XG4gICAgICByZXR1cm4gbXV0YWJsZS53YXNBbHRlcmVkKCkgPyBtdXRhYmxlLl9fZW5zdXJlT3duZXIodGhpcy5fX293bmVySUQpIDogdGhpcztcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5hc011dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fb3duZXJJRCA/IHRoaXMgOiB0aGlzLl9fZW5zdXJlT3duZXIobmV3IE93bmVySUQoKSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuYXNJbW11dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZW5zdXJlT3duZXIoKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2FsdGVyZWQ7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIHJldHVybiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCk7XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlTWFwKHRoaXMuc2l6ZSwgdGhpcy5fcm9vdCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc01hcChtYXliZU1hcCkge1xuICAgIHJldHVybiAhIShtYXliZU1hcCAmJiBtYXliZU1hcFtJU19NQVBfU0VOVElORUxdKTtcbiAgfVxuXG4gIE1hcC5pc01hcCA9IGlzTWFwO1xuXG4gIHZhciBJU19NQVBfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9NQVBfX0BAJztcblxuICB2YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbiAgTWFwUHJvdG90eXBlW0lTX01BUF9TRU5USU5FTF0gPSB0cnVlO1xuICBNYXBQcm90b3R5cGVbREVMRVRFXSA9IE1hcFByb3RvdHlwZS5yZW1vdmU7XG4gIE1hcFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5kZWxldGVJbjtcblxuXG4gIC8vICNwcmFnbWEgVHJpZSBOb2Rlc1xuXG5cblxuICAgIGZ1bmN0aW9uIEFycmF5TWFwTm9kZShvd25lcklELCBlbnRyaWVzKSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICAgIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWldWzBdKSkge1xuICAgICAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgICB2YXIgaWR4ID0gMDtcbiAgICAgIGZvciAodmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblxuICAgICAgaWYgKGV4aXN0cyA/IGVudHJpZXNbaWR4XVsxXSA9PT0gdmFsdWUgOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXG4gICAgICBpZiAocmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiAhcmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA+PSBNQVhfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld0VudHJpZXMgPSBpc0VkaXRhYmxlID8gZW50cmllcyA6IGFyckNvcHkoZW50cmllcyk7XG5cbiAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICBpZHggPT09IGxlbiAtIDEgPyBuZXdFbnRyaWVzLnBvcCgpIDogKG5ld0VudHJpZXNbaWR4XSA9IG5ld0VudHJpZXMucG9wKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ld0VudHJpZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEFycmF5TWFwTm9kZShvd25lcklELCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuYml0bWFwID0gYml0bWFwO1xuICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cblxuICAgIEJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGJpdCA9ICgxIDw8ICgoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSykpO1xuICAgICAgdmFyIGJpdG1hcCA9IHRoaXMuYml0bWFwO1xuICAgICAgcmV0dXJuIChiaXRtYXAgJiBiaXQpID09PSAwID8gbm90U2V0VmFsdWUgOlxuICAgICAgICB0aGlzLm5vZGVzW3BvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSldLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKTtcbiAgICB9O1xuXG4gICAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGtleUhhc2hGcmFnID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gICAgICB2YXIgYml0ID0gMSA8PCBrZXlIYXNoRnJhZztcbiAgICAgIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcbiAgICAgIHZhciBleGlzdHMgPSAoYml0bWFwICYgYml0KSAhPT0gMDtcblxuICAgICAgaWYgKCFleGlzdHMgJiYgdmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZHggPSBwb3BDb3VudChiaXRtYXAgJiAoYml0IC0gMSkpO1xuICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICAgIHZhciBub2RlID0gZXhpc3RzID8gbm9kZXNbaWR4XSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBuZXdOb2RlID0gdXBkYXRlTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG5cbiAgICAgIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA+PSBNQVhfQklUTUFQX0lOREVYRURfU0laRSkge1xuICAgICAgICByZXR1cm4gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwga2V5SGFzaEZyYWcsIG5ld05vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhpc3RzICYmICFuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMiAmJiBpc0xlYWZOb2RlKG5vZGVzW2lkeCBeIDFdKSkge1xuICAgICAgICByZXR1cm4gbm9kZXNbaWR4IF4gMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPT09IDEgJiYgaXNMZWFmTm9kZShuZXdOb2RlKSkge1xuICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgICAgIHZhciBuZXdCaXRtYXAgPSBleGlzdHMgPyBuZXdOb2RlID8gYml0bWFwIDogYml0bWFwIF4gYml0IDogYml0bWFwIHwgYml0O1xuICAgICAgdmFyIG5ld05vZGVzID0gZXhpc3RzID8gbmV3Tm9kZSA/XG4gICAgICAgIHNldEluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlT3V0KG5vZGVzLCBpZHgsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlSW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuYml0bWFwID0gbmV3Qml0bWFwO1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3Tm9kZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIG5ld0JpdG1hcCwgbmV3Tm9kZXMpO1xuICAgIH07XG5cblxuXG5cbiAgICBmdW5jdGlvbiBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50LCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVzW2lkeF07XG4gICAgICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0KHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcbiAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2lkeF07XG5cbiAgICAgIGlmIChyZW1vdmVkICYmICFub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld05vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgbmV3Q291bnQrKztcbiAgICAgIH0gZWxzZSBpZiAoIW5ld05vZGUpIHtcbiAgICAgICAgbmV3Q291bnQtLTtcbiAgICAgICAgaWYgKG5ld0NvdW50IDwgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgICByZXR1cm4gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBuZXdDb3VudCwgaWR4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld05vZGVzID0gc2V0SW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBuZXdDb3VudDtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0NvdW50LCBuZXdOb2Rlcyk7XG4gICAgfTtcblxuXG5cblxuICAgIGZ1bmN0aW9uIEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJpZXMpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJpZXNbaWldWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgaWYgKGtleUhhc2ggIT09IHRoaXMua2V5SGFzaCkge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICAgICAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgdmFyIGlkeCA9IDA7XG4gICAgICBmb3IgKHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBleGlzdHMgPSBpZHggPCBsZW47XG5cbiAgICAgIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICAgIChyZW1vdmVkIHx8ICFleGlzdHMpICYmIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblxuICAgICAgaWYgKHJlbW92ZWQgJiYgbGVuID09PSAyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgZW50cmllc1tpZHggXiAxXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gICAgICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblxuICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIGlkeCA9PT0gbGVuIC0gMSA/IG5ld0VudHJpZXMucG9wKCkgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJ5KSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcbiAgICAgIHRoaXMuZW50cnkgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBWYWx1ZU5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKSA/IHRoaXMuZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgVmFsdWVOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG4gICAgICB2YXIga2V5TWF0Y2ggPSBpcyhrZXksIHRoaXMuZW50cnlbMF0pO1xuICAgICAgaWYgKGtleU1hdGNoID8gdmFsdWUgPT09IHRoaXMuZW50cnlbMV0gOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgICBpZiAob3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQpIHtcbiAgICAgICAgICB0aGlzLmVudHJ5WzFdID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTm9kZSh0aGlzLCBvd25lcklELCBzaGlmdCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIH07XG5cblxuXG4gIC8vICNwcmFnbWEgSXRlcmF0b3JzXG5cbiAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID1cbiAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gZW50cmllcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgaWYgKGZuKGVudHJpZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV0pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPVxuICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gbm9kZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICBpZiAobm9kZSAmJiBub2RlLml0ZXJhdGUoZm4sIHJldmVyc2UpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgVmFsdWVOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIGZuKHRoaXMuZW50cnkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTWFwSXRlcmF0b3IsIEl0ZXJhdG9yKTtcblxuICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKG1hcCwgdHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLl9yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICAgIHRoaXMuX3N0YWNrID0gbWFwLl9yb290ICYmIG1hcEl0ZXJhdG9yRnJhbWUobWFwLl9yb290KTtcbiAgICB9XG5cbiAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHR5cGUgPSB0aGlzLl90eXBlO1xuICAgICAgdmFyIHN0YWNrID0gdGhpcy5fc3RhY2s7XG4gICAgICB3aGlsZSAoc3RhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGFjay5ub2RlO1xuICAgICAgICB2YXIgaW5kZXggPSBzdGFjay5pbmRleCsrO1xuICAgICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICAgIGlmIChub2RlLmVudHJ5KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgbWF4SW5kZXggPSBub2RlLmVudHJpZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIG5vZGUuZW50cmllc1t0aGlzLl9yZXZlcnNlID8gbWF4SW5kZXggLSBpbmRleCA6IGluZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heEluZGV4ID0gbm9kZS5ub2Rlcy5sZW5ndGggLSAxO1xuICAgICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuICAgICAgICAgICAgdmFyIHN1Yk5vZGUgPSBub2RlLm5vZGVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHN1Yk5vZGUpIHtcbiAgICAgICAgICAgICAgaWYgKHN1Yk5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBzdWJOb2RlLmVudHJ5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gbWFwSXRlcmF0b3JGcmFtZShzdWJOb2RlLCBzdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sgPSB0aGlzLl9zdGFjayA9IHRoaXMuX3N0YWNrLl9fcHJldjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeSkge1xuICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBJdGVyYXRvckZyYW1lKG5vZGUsIHByZXYpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZTogbm9kZSxcbiAgICAgIGluZGV4OiAwLFxuICAgICAgX19wcmV2OiBwcmV2XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VNYXAoc2l6ZSwgcm9vdCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKE1hcFByb3RvdHlwZSk7XG4gICAgbWFwLnNpemUgPSBzaXplO1xuICAgIG1hcC5fcm9vdCA9IHJvb3Q7XG4gICAgbWFwLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgbWFwLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfTUFQO1xuICBmdW5jdGlvbiBlbXB0eU1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTUFQIHx8IChFTVBUWV9NQVAgPSBtYWtlTWFwKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1hcChtYXAsIGssIHYpIHtcbiAgICB2YXIgbmV3Um9vdDtcbiAgICB2YXIgbmV3U2l6ZTtcbiAgICBpZiAoIW1hcC5fcm9vdCkge1xuICAgICAgaWYgKHYgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH1cbiAgICAgIG5ld1NpemUgPSAxO1xuICAgICAgbmV3Um9vdCA9IG5ldyBBcnJheU1hcE5vZGUobWFwLl9fb3duZXJJRCwgW1trLCB2XV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGlkQ2hhbmdlU2l6ZSA9IE1ha2VSZWYoQ0hBTkdFX0xFTkdUSCk7XG4gICAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKERJRF9BTFRFUik7XG4gICAgICBuZXdSb290ID0gdXBkYXRlTm9kZShtYXAuX3Jvb3QsIG1hcC5fX293bmVySUQsIDAsIHVuZGVmaW5lZCwgaywgdiwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKCFkaWRBbHRlci52YWx1ZSkge1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuICAgICAgbmV3U2l6ZSA9IG1hcC5zaXplICsgKGRpZENoYW5nZVNpemUudmFsdWUgPyB2ID09PSBOT1RfU0VUID8gLTEgOiAxIDogMCk7XG4gICAgfVxuICAgIGlmIChtYXAuX19vd25lcklEKSB7XG4gICAgICBtYXAuc2l6ZSA9IG5ld1NpemU7XG4gICAgICBtYXAuX3Jvb3QgPSBuZXdSb290O1xuICAgICAgbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIG1hcC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1Jvb3QgPyBtYWtlTWFwKG5ld1NpemUsIG5ld1Jvb3QpIDogZW1wdHlNYXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUudXBkYXRlKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBpc0xlYWZOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jb25zdHJ1Y3RvciA9PT0gVmFsdWVOb2RlIHx8IG5vZGUuY29uc3RydWN0b3IgPT09IEhhc2hDb2xsaXNpb25Ob2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgZW50cnkpIHtcbiAgICBpZiAobm9kZS5rZXlIYXNoID09PSBrZXlIYXNoKSB7XG4gICAgICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIFtub2RlLmVudHJ5LCBlbnRyeV0pO1xuICAgIH1cblxuICAgIHZhciBpZHgxID0gKHNoaWZ0ID09PSAwID8gbm9kZS5rZXlIYXNoIDogbm9kZS5rZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgIHZhciBpZHgyID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG5cbiAgICB2YXIgbmV3Tm9kZTtcbiAgICB2YXIgbm9kZXMgPSBpZHgxID09PSBpZHgyID9cbiAgICAgIFttZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGVudHJ5KV0gOlxuICAgICAgKChuZXdOb2RlID0gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkpLCBpZHgxIDwgaWR4MiA/IFtub2RlLCBuZXdOb2RlXSA6IFtuZXdOb2RlLCBub2RlXSk7XG5cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsICgxIDw8IGlkeDEpIHwgKDEgPDwgaWR4MiksIG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgIG93bmVySUQgPSBuZXcgT3duZXJJRCgpO1xuICAgIH1cbiAgICB2YXIgbm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlbnRyaWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpaV07XG4gICAgICBub2RlID0gbm9kZS51cGRhdGUob3duZXJJRCwgMCwgdW5kZWZpbmVkLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhY2tOb2Rlcyhvd25lcklELCBub2RlcywgY291bnQsIGV4Y2x1ZGluZykge1xuICAgIHZhciBiaXRtYXAgPSAwO1xuICAgIHZhciBwYWNrZWRJSSA9IDA7XG4gICAgdmFyIHBhY2tlZE5vZGVzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKHZhciBpaSA9IDAsIGJpdCA9IDEsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyssIGJpdCA8PD0gMSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpaV07XG4gICAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkICYmIGlpICE9PSBleGNsdWRpbmcpIHtcbiAgICAgICAgYml0bWFwIHw9IGJpdDtcbiAgICAgICAgcGFja2VkTm9kZXNbcGFja2VkSUkrK10gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgcGFja2VkTm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwgaW5jbHVkaW5nLCBub2RlKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgZXhwYW5kZWROb2RlcyA9IG5ldyBBcnJheShTSVpFKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGJpdG1hcCAhPT0gMDsgaWkrKywgYml0bWFwID4+Pj0gMSkge1xuICAgICAgZXhwYW5kZWROb2Rlc1tpaV0gPSBiaXRtYXAgJiAxID8gbm9kZXNbY291bnQrK10gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGV4cGFuZGVkTm9kZXNbaW5jbHVkaW5nXSA9IG5vZGU7XG4gICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50ICsgMSwgZXhwYW5kZWROb2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUludG9NYXBXaXRoKG1hcCwgbWVyZ2VyLCBpdGVyYWJsZXMpIHtcbiAgICB2YXIgaXRlcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcmFibGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVzW2lpXTtcbiAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICBpZiAoIWlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgIGl0ZXIgPSBpdGVyLm1hcChmdW5jdGlvbih2ICkge3JldHVybiBmcm9tSlModil9KTtcbiAgICAgIH1cbiAgICAgIGl0ZXJzLnB1c2goaXRlcik7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChtYXAsIG1lcmdlciwgaXRlcnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVlcE1lcmdlcihleGlzdGluZywgdmFsdWUsIGtleSkge1xuICAgIHJldHVybiBleGlzdGluZyAmJiBleGlzdGluZy5tZXJnZURlZXAgJiYgaXNJdGVyYWJsZSh2YWx1ZSkgP1xuICAgICAgZXhpc3RpbmcubWVyZ2VEZWVwKHZhbHVlKSA6XG4gICAgICBpcyhleGlzdGluZywgdmFsdWUpID8gZXhpc3RpbmcgOiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBNZXJnZXJXaXRoKG1lcmdlcikge1xuICAgIHJldHVybiBmdW5jdGlvbihleGlzdGluZywgdmFsdWUsIGtleSkgIHtcbiAgICAgIGlmIChleGlzdGluZyAmJiBleGlzdGluZy5tZXJnZURlZXBXaXRoICYmIGlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZy5tZXJnZURlZXBXaXRoKG1lcmdlciwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIG5leHRWYWx1ZSA9IG1lcmdlcihleGlzdGluZywgdmFsdWUsIGtleSk7XG4gICAgICByZXR1cm4gaXMoZXhpc3RpbmcsIG5leHRWYWx1ZSkgPyBleGlzdGluZyA6IG5leHRWYWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgoY29sbGVjdGlvbiwgbWVyZ2VyLCBpdGVycykge1xuICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoY29sbGVjdGlvbi5zaXplID09PSAwICYmICFjb2xsZWN0aW9uLl9fb3duZXJJRCAmJiBpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24ud2l0aE11dGF0aW9ucyhmdW5jdGlvbihjb2xsZWN0aW9uICkge1xuICAgICAgdmFyIG1lcmdlSW50b01hcCA9IG1lcmdlciA/XG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBrZXkpICB7XG4gICAgICAgICAgY29sbGVjdGlvbi51cGRhdGUoa2V5LCBOT1RfU0VULCBmdW5jdGlvbihleGlzdGluZyApXG4gICAgICAgICAgICB7cmV0dXJuIGV4aXN0aW5nID09PSBOT1RfU0VUID8gdmFsdWUgOiBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlLCBrZXkpfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbih2YWx1ZSwga2V5KSAge1xuICAgICAgICAgIGNvbGxlY3Rpb24uc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIGl0ZXJzW2lpXS5mb3JFYWNoKG1lcmdlSW50b01hcCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJbkRlZXBNYXAoZXhpc3RpbmcsIGtleVBhdGhJdGVyLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICAgIHZhciBpc05vdFNldCA9IGV4aXN0aW5nID09PSBOT1RfU0VUO1xuICAgIHZhciBzdGVwID0ga2V5UGF0aEl0ZXIubmV4dCgpO1xuICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgIHZhciBleGlzdGluZ1ZhbHVlID0gaXNOb3RTZXQgPyBub3RTZXRWYWx1ZSA6IGV4aXN0aW5nO1xuICAgICAgdmFyIG5ld1ZhbHVlID0gdXBkYXRlcihleGlzdGluZ1ZhbHVlKTtcbiAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gZXhpc3RpbmdWYWx1ZSA/IGV4aXN0aW5nIDogbmV3VmFsdWU7XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGlzTm90U2V0IHx8IChleGlzdGluZyAmJiBleGlzdGluZy5zZXQpLFxuICAgICAgJ2ludmFsaWQga2V5UGF0aCdcbiAgICApO1xuICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuICAgIHZhciBuZXh0RXhpc3RpbmcgPSBpc05vdFNldCA/IE5PVF9TRVQgOiBleGlzdGluZy5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICB2YXIgbmV4dFVwZGF0ZWQgPSB1cGRhdGVJbkRlZXBNYXAoXG4gICAgICBuZXh0RXhpc3RpbmcsXG4gICAgICBrZXlQYXRoSXRlcixcbiAgICAgIG5vdFNldFZhbHVlLFxuICAgICAgdXBkYXRlclxuICAgICk7XG4gICAgcmV0dXJuIG5leHRVcGRhdGVkID09PSBuZXh0RXhpc3RpbmcgPyBleGlzdGluZyA6XG4gICAgICBuZXh0VXBkYXRlZCA9PT0gTk9UX1NFVCA/IGV4aXN0aW5nLnJlbW92ZShrZXkpIDpcbiAgICAgIChpc05vdFNldCA/IGVtcHR5TWFwKCkgOiBleGlzdGluZykuc2V0KGtleSwgbmV4dFVwZGF0ZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wQ291bnQoeCkge1xuICAgIHggPSB4IC0gKCh4ID4+IDEpICYgMHg1NTU1NTU1NSk7XG4gICAgeCA9ICh4ICYgMHgzMzMzMzMzMykgKyAoKHggPj4gMikgJiAweDMzMzMzMzMzKTtcbiAgICB4ID0gKHggKyAoeCA+PiA0KSkgJiAweDBmMGYwZjBmO1xuICAgIHggPSB4ICsgKHggPj4gOCk7XG4gICAgeCA9IHggKyAoeCA+PiAxNik7XG4gICAgcmV0dXJuIHggJiAweDdmO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW4oYXJyYXksIGlkeCwgdmFsLCBjYW5FZGl0KSB7XG4gICAgdmFyIG5ld0FycmF5ID0gY2FuRWRpdCA/IGFycmF5IDogYXJyQ29weShhcnJheSk7XG4gICAgbmV3QXJyYXlbaWR4XSA9IHZhbDtcbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpY2VJbihhcnJheSwgaWR4LCB2YWwsIGNhbkVkaXQpIHtcbiAgICB2YXIgbmV3TGVuID0gYXJyYXkubGVuZ3RoICsgMTtcbiAgICBpZiAoY2FuRWRpdCAmJiBpZHggKyAxID09PSBuZXdMZW4pIHtcbiAgICAgIGFycmF5W2lkeF0gPSB2YWw7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdMZW4pO1xuICAgIHZhciBhZnRlciA9IDA7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG5ld0xlbjsgaWkrKykge1xuICAgICAgaWYgKGlpID09PSBpZHgpIHtcbiAgICAgICAgbmV3QXJyYXlbaWldID0gdmFsO1xuICAgICAgICBhZnRlciA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3QXJyYXlbaWldID0gYXJyYXlbaWkgKyBhZnRlcl07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnJheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNwbGljZU91dChhcnJheSwgaWR4LCBjYW5FZGl0KSB7XG4gICAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgaWYgKGNhbkVkaXQgJiYgaWR4ID09PSBuZXdMZW4pIHtcbiAgICAgIGFycmF5LnBvcCgpO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgICB2YXIgbmV3QXJyYXkgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgICB2YXIgYWZ0ZXIgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcbiAgICAgIGlmIChpaSA9PT0gaWR4KSB7XG4gICAgICAgIGFmdGVyID0gMTtcbiAgICAgIH1cbiAgICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICB2YXIgTUFYX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG4gIHZhciBNQVhfQklUTUFQX0lOREVYRURfU0laRSA9IFNJWkUgLyAyO1xuICB2YXIgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUgPSBTSVpFIC8gNDtcblxuICBjcmVhdGVDbGFzcyhMaXN0LCBJbmRleGVkQ29sbGVjdGlvbik7XG5cbiAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXG4gICAgZnVuY3Rpb24gTGlzdCh2YWx1ZSkge1xuICAgICAgdmFyIGVtcHR5ID0gZW1wdHlMaXN0KCk7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgICB9XG4gICAgICBpZiAoaXNMaXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXRlciA9IEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICB2YXIgc2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICAgIGlmIChzaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICAgIH1cbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHNpemUpO1xuICAgICAgaWYgKHNpemUgPiAwICYmIHNpemUgPCBTSVpFKSB7XG4gICAgICAgIHJldHVybiBtYWtlTGlzdCgwLCBzaXplLCBTSElGVCwgbnVsbCwgbmV3IFZOb2RlKGl0ZXIudG9BcnJheSgpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBsaXN0LnNldFNpemUoc2l6ZSk7XG4gICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2LCBpKSAge3JldHVybiBsaXN0LnNldChpLCB2KX0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgTGlzdC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdMaXN0IFsnLCAnXScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgTGlzdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuc2l6ZSkge1xuICAgICAgICBpbmRleCArPSB0aGlzLl9vcmlnaW47XG4gICAgICAgIHZhciBub2RlID0gbGlzdE5vZGVGb3IodGhpcywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLmFycmF5W2luZGV4ICYgTUFTS107XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBMaXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVMaXN0KHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gIXRoaXMuaGFzKGluZGV4KSA/IHRoaXMgOlxuICAgICAgICBpbmRleCA9PT0gMCA/IHRoaXMuc2hpZnQoKSA6XG4gICAgICAgIGluZGV4ID09PSB0aGlzLnNpemUgLSAxID8gdGhpcy5wb3AoKSA6XG4gICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDAsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5fb3JpZ2luID0gdGhpcy5fY2FwYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9sZXZlbCA9IFNISUZUO1xuICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5TGlzdCgpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciBvbGRTaXplID0gdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIDAsIG9sZFNpemUgKyB2YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChvbGRTaXplICsgaWksIHZhbHVlc1tpaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCAtMSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIC12YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChpaSwgdmFsdWVzW2lpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgdW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBtZXJnZXIsIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlciwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b0xpc3RXaXRoKHRoaXMsIGRlZXBNZXJnZXJXaXRoKG1lcmdlciksIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKHRoaXMsIDAsIHNpemUpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEl0ZXJhdGlvblxuXG4gICAgTGlzdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHMoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSksXG4gICAgICAgIHJlc29sdmVFbmQoZW5kLCBzaXplKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWVzID0gaXRlcmF0ZUxpc3QodGhpcywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzKCk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gRE9ORSA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaW5kZXgrKywgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlcyA9IGl0ZXJhdGVMaXN0KHRoaXMsIHJldmVyc2UpO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKCh2YWx1ZSA9IHZhbHVlcygpKSAhPT0gRE9ORSkge1xuICAgICAgICBpZiAoZm4odmFsdWUsIGluZGV4KyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlTGlzdCh0aGlzLl9vcmlnaW4sIHRoaXMuX2NhcGFjaXR5LCB0aGlzLl9sZXZlbCwgdGhpcy5fcm9vdCwgdGhpcy5fdGFpbCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc0xpc3QobWF5YmVMaXN0KSB7XG4gICAgcmV0dXJuICEhKG1heWJlTGlzdCAmJiBtYXliZUxpc3RbSVNfTElTVF9TRU5USU5FTF0pO1xuICB9XG5cbiAgTGlzdC5pc0xpc3QgPSBpc0xpc3Q7XG5cbiAgdmFyIElTX0xJU1RfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9MSVNUX19AQCc7XG5cbiAgdmFyIExpc3RQcm90b3R5cGUgPSBMaXN0LnByb3RvdHlwZTtcbiAgTGlzdFByb3RvdHlwZVtJU19MSVNUX1NFTlRJTkVMXSA9IHRydWU7XG4gIExpc3RQcm90b3R5cGVbREVMRVRFXSA9IExpc3RQcm90b3R5cGUucmVtb3ZlO1xuICBMaXN0UHJvdG90eXBlLnNldEluID0gTWFwUHJvdG90eXBlLnNldEluO1xuICBMaXN0UHJvdG90eXBlLmRlbGV0ZUluID1cbiAgTGlzdFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5yZW1vdmVJbjtcbiAgTGlzdFByb3RvdHlwZS51cGRhdGUgPSBNYXBQcm90b3R5cGUudXBkYXRlO1xuICBMaXN0UHJvdG90eXBlLnVwZGF0ZUluID0gTWFwUHJvdG90eXBlLnVwZGF0ZUluO1xuICBMaXN0UHJvdG90eXBlLm1lcmdlSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VJbjtcbiAgTGlzdFByb3RvdHlwZS5tZXJnZURlZXBJbiA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXBJbjtcbiAgTGlzdFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIExpc3RQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgTGlzdFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcbiAgTGlzdFByb3RvdHlwZS53YXNBbHRlcmVkID0gTWFwUHJvdG90eXBlLndhc0FsdGVyZWQ7XG5cblxuXG4gICAgZnVuY3Rpb24gVk5vZGUoYXJyYXksIG93bmVySUQpIHtcbiAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogc2VlbXMgbGlrZSB0aGVzZSBtZXRob2RzIGFyZSB2ZXJ5IHNpbWlsYXJcblxuICAgIFZOb2RlLnByb3RvdHlwZS5yZW1vdmVCZWZvcmUgPSBmdW5jdGlvbihvd25lcklELCBsZXZlbCwgaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gbGV2ZWwgPyAxIDw8IGxldmVsIDogMCB8fCB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBvcmlnaW5JbmRleCA9IChpbmRleCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgIGlmIChvcmlnaW5JbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFZOb2RlKFtdLCBvd25lcklEKTtcbiAgICAgIH1cbiAgICAgIHZhciByZW1vdmluZ0ZpcnN0ID0gb3JpZ2luSW5kZXggPT09IDA7XG4gICAgICB2YXIgbmV3Q2hpbGQ7XG4gICAgICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgICAgIHZhciBvbGRDaGlsZCA9IHRoaXMuYXJyYXlbb3JpZ2luSW5kZXhdO1xuICAgICAgICBuZXdDaGlsZCA9IG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUJlZm9yZShvd25lcklELCBsZXZlbCAtIFNISUZULCBpbmRleCk7XG4gICAgICAgIGlmIChuZXdDaGlsZCA9PT0gb2xkQ2hpbGQgJiYgcmVtb3ZpbmdGaXJzdCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVtb3ZpbmdGaXJzdCAmJiAhbmV3Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuICAgICAgaWYgKCFyZW1vdmluZ0ZpcnN0KSB7XG4gICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBvcmlnaW5JbmRleDsgaWkrKykge1xuICAgICAgICAgIGVkaXRhYmxlLmFycmF5W2lpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5ld0NoaWxkKSB7XG4gICAgICAgIGVkaXRhYmxlLmFycmF5W29yaWdpbkluZGV4XSA9IG5ld0NoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVkaXRhYmxlO1xuICAgIH07XG5cbiAgICBWTm9kZS5wcm90b3R5cGUucmVtb3ZlQWZ0ZXIgPSBmdW5jdGlvbihvd25lcklELCBsZXZlbCwgaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gKGxldmVsID8gMSA8PCBsZXZlbCA6IDApIHx8IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHNpemVJbmRleCA9ICgoaW5kZXggLSAxKSA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgIGlmIChzaXplSW5kZXggPj0gdGhpcy5hcnJheS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDaGlsZDtcbiAgICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtzaXplSW5kZXhdO1xuICAgICAgICBuZXdDaGlsZCA9IG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUFmdGVyKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcbiAgICAgICAgaWYgKG5ld0NoaWxkID09PSBvbGRDaGlsZCAmJiBzaXplSW5kZXggPT09IHRoaXMuYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBlZGl0YWJsZSA9IGVkaXRhYmxlVk5vZGUodGhpcywgb3duZXJJRCk7XG4gICAgICBlZGl0YWJsZS5hcnJheS5zcGxpY2Uoc2l6ZUluZGV4ICsgMSk7XG4gICAgICBpZiAobmV3Q2hpbGQpIHtcbiAgICAgICAgZWRpdGFibGUuYXJyYXlbc2l6ZUluZGV4XSA9IG5ld0NoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVkaXRhYmxlO1xuICAgIH07XG5cblxuXG4gIHZhciBET05FID0ge307XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZUxpc3QobGlzdCwgcmV2ZXJzZSkge1xuICAgIHZhciBsZWZ0ID0gbGlzdC5fb3JpZ2luO1xuICAgIHZhciByaWdodCA9IGxpc3QuX2NhcGFjaXR5O1xuICAgIHZhciB0YWlsUG9zID0gZ2V0VGFpbE9mZnNldChyaWdodCk7XG4gICAgdmFyIHRhaWwgPSBsaXN0Ll90YWlsO1xuXG4gICAgcmV0dXJuIGl0ZXJhdGVOb2RlT3JMZWFmKGxpc3QuX3Jvb3QsIGxpc3QuX2xldmVsLCAwKTtcblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlT3JMZWFmKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBsZXZlbCA9PT0gMCA/XG4gICAgICAgIGl0ZXJhdGVMZWFmKG5vZGUsIG9mZnNldCkgOlxuICAgICAgICBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpdGVyYXRlTGVhZihub2RlLCBvZmZzZXQpIHtcbiAgICAgIHZhciBhcnJheSA9IG9mZnNldCA9PT0gdGFpbFBvcyA/IHRhaWwgJiYgdGFpbC5hcnJheSA6IG5vZGUgJiYgbm9kZS5hcnJheTtcbiAgICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiBsZWZ0IC0gb2Zmc2V0O1xuICAgICAgdmFyIHRvID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICBpZiAodG8gPiBTSVpFKSB7XG4gICAgICAgIHRvID0gU0laRTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpICB7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgIHJldHVybiBET05FO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5W2lkeF07XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHZhciB2YWx1ZXM7XG4gICAgICB2YXIgYXJyYXkgPSBub2RlICYmIG5vZGUuYXJyYXk7XG4gICAgICB2YXIgZnJvbSA9IG9mZnNldCA+IGxlZnQgPyAwIDogKGxlZnQgLSBvZmZzZXQpID4+IGxldmVsO1xuICAgICAgdmFyIHRvID0gKChyaWdodCAtIG9mZnNldCkgPj4gbGV2ZWwpICsgMTtcbiAgICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgICAgdG8gPSBTSVpFO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBET05FKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlcyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuIERPTkU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgICB2YWx1ZXMgPSBpdGVyYXRlTm9kZU9yTGVhZihcbiAgICAgICAgICAgIGFycmF5ICYmIGFycmF5W2lkeF0sIGxldmVsIC0gU0hJRlQsIG9mZnNldCArIChpZHggPDwgbGV2ZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VMaXN0KG9yaWdpbiwgY2FwYWNpdHksIGxldmVsLCByb290LCB0YWlsLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIGxpc3QgPSBPYmplY3QuY3JlYXRlKExpc3RQcm90b3R5cGUpO1xuICAgIGxpc3Quc2l6ZSA9IGNhcGFjaXR5IC0gb3JpZ2luO1xuICAgIGxpc3QuX29yaWdpbiA9IG9yaWdpbjtcbiAgICBsaXN0Ll9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgIGxpc3QuX2xldmVsID0gbGV2ZWw7XG4gICAgbGlzdC5fcm9vdCA9IHJvb3Q7XG4gICAgbGlzdC5fdGFpbCA9IHRhaWw7XG4gICAgbGlzdC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIGxpc3QuX19oYXNoID0gaGFzaDtcbiAgICBsaXN0Ll9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgdmFyIEVNUFRZX0xJU1Q7XG4gIGZ1bmN0aW9uIGVtcHR5TGlzdCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTElTVCB8fCAoRU1QVFlfTElTVCA9IG1ha2VMaXN0KDAsIDAsIFNISUZUKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMaXN0KGxpc3QsIGluZGV4LCB2YWx1ZSkge1xuICAgIGluZGV4ID0gd3JhcEluZGV4KGxpc3QsIGluZGV4KTtcblxuICAgIGlmIChpbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGlmIChpbmRleCA+PSBsaXN0LnNpemUgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gbGlzdC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG4gICAgICAgIGluZGV4IDwgMCA/XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCBpbmRleCkuc2V0KDAsIHZhbHVlKSA6XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAwLCBpbmRleCArIDEpLnNldChpbmRleCwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbmRleCArPSBsaXN0Ll9vcmlnaW47XG5cbiAgICB2YXIgbmV3VGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoRElEX0FMVEVSKTtcbiAgICBpZiAoaW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIG5ld1RhaWwgPSB1cGRhdGVWTm9kZShuZXdUYWlsLCBsaXN0Ll9fb3duZXJJRCwgMCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1Jvb3QgPSB1cGRhdGVWTm9kZShuZXdSb290LCBsaXN0Ll9fb3duZXJJRCwgbGlzdC5fbGV2ZWwsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgIH1cblxuICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgICAgbGlzdC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgICBsaXN0Ll90YWlsID0gbmV3VGFpbDtcbiAgICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuICAgIHJldHVybiBtYWtlTGlzdChsaXN0Ll9vcmlnaW4sIGxpc3QuX2NhcGFjaXR5LCBsaXN0Ll9sZXZlbCwgbmV3Um9vdCwgbmV3VGFpbCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWTm9kZShub2RlLCBvd25lcklELCBsZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcikge1xuICAgIHZhciBpZHggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgdmFyIG5vZGVIYXMgPSBub2RlICYmIGlkeCA8IG5vZGUuYXJyYXkubGVuZ3RoO1xuICAgIGlmICghbm9kZUhhcyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Tm9kZTtcblxuICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgIHZhciBsb3dlck5vZGUgPSBub2RlICYmIG5vZGUuYXJyYXlbaWR4XTtcbiAgICAgIHZhciBuZXdMb3dlck5vZGUgPSB1cGRhdGVWTm9kZShsb3dlck5vZGUsIG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld0xvd2VyTm9kZSA9PT0gbG93ZXJOb2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSBuZXdMb3dlck5vZGU7XG4gICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZUhhcyAmJiBub2RlLmFycmF5W2lkeF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgaWR4ID09PSBuZXdOb2RlLmFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIG5ld05vZGUuYXJyYXkucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld05vZGUuYXJyYXlbaWR4XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Tm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCkge1xuICAgIGlmIChvd25lcklEICYmIG5vZGUgJiYgb3duZXJJRCA9PT0gbm9kZS5vd25lcklEKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlID8gbm9kZS5hcnJheS5zbGljZSgpIDogW10sIG93bmVySUQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdE5vZGVGb3IobGlzdCwgcmF3SW5kZXgpIHtcbiAgICBpZiAocmF3SW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIHJldHVybiBsaXN0Ll90YWlsO1xuICAgIH1cbiAgICBpZiAocmF3SW5kZXggPCAxIDw8IChsaXN0Ll9sZXZlbCArIFNISUZUKSkge1xuICAgICAgdmFyIG5vZGUgPSBsaXN0Ll9yb290O1xuICAgICAgdmFyIGxldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgICB3aGlsZSAobm9kZSAmJiBsZXZlbCA+IDApIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbKHJhd0luZGV4ID4+PiBsZXZlbCkgJiBNQVNLXTtcbiAgICAgICAgbGV2ZWwgLT0gU0hJRlQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMaXN0Qm91bmRzKGxpc3QsIGJlZ2luLCBlbmQpIHtcbiAgICAvLyBTYW5pdGl6ZSBiZWdpbiAmIGVuZCB1c2luZyB0aGlzIHNob3J0aGFuZCBmb3IgVG9JbnQzMihhcmd1bWVudClcbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9pbnQzMlxuICAgIGlmIChiZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiZWdpbiA9IGJlZ2luIHwgMDtcbiAgICB9XG4gICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBlbmQgfCAwO1xuICAgIH1cbiAgICB2YXIgb3duZXIgPSBsaXN0Ll9fb3duZXJJRCB8fCBuZXcgT3duZXJJRCgpO1xuICAgIHZhciBvbGRPcmlnaW4gPSBsaXN0Ll9vcmlnaW47XG4gICAgdmFyIG9sZENhcGFjaXR5ID0gbGlzdC5fY2FwYWNpdHk7XG4gICAgdmFyIG5ld09yaWdpbiA9IG9sZE9yaWdpbiArIGJlZ2luO1xuICAgIHZhciBuZXdDYXBhY2l0eSA9IGVuZCA9PT0gdW5kZWZpbmVkID8gb2xkQ2FwYWNpdHkgOiBlbmQgPCAwID8gb2xkQ2FwYWNpdHkgKyBlbmQgOiBvbGRPcmlnaW4gKyBlbmQ7XG4gICAgaWYgKG5ld09yaWdpbiA9PT0gb2xkT3JpZ2luICYmIG5ld0NhcGFjaXR5ID09PSBvbGRDYXBhY2l0eSkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBnb2luZyB0byBlbmQgYWZ0ZXIgaXQgc3RhcnRzLCBpdCdzIGVtcHR5LlxuICAgIGlmIChuZXdPcmlnaW4gPj0gbmV3Q2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBsaXN0LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0xldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuXG4gICAgLy8gTmV3IG9yaWdpbiBtaWdodCBuZWVkIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgdmFyIG9mZnNldFNoaWZ0ID0gMDtcbiAgICB3aGlsZSAobmV3T3JpZ2luICsgb2Zmc2V0U2hpZnQgPCAwKSB7XG4gICAgICBuZXdSb290ID0gbmV3IFZOb2RlKG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbdW5kZWZpbmVkLCBuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICAgIG9mZnNldFNoaWZ0ICs9IDEgPDwgbmV3TGV2ZWw7XG4gICAgfVxuICAgIGlmIChvZmZzZXRTaGlmdCkge1xuICAgICAgbmV3T3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgb2xkT3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgbmV3Q2FwYWNpdHkgKz0gb2Zmc2V0U2hpZnQ7XG4gICAgICBvbGRDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcbiAgICB9XG5cbiAgICB2YXIgb2xkVGFpbE9mZnNldCA9IGdldFRhaWxPZmZzZXQob2xkQ2FwYWNpdHkpO1xuICAgIHZhciBuZXdUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChuZXdDYXBhY2l0eSk7XG5cbiAgICAvLyBOZXcgc2l6ZSBtaWdodCBuZWVkIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgd2hpbGUgKG5ld1RhaWxPZmZzZXQgPj0gMSA8PCAobmV3TGV2ZWwgKyBTSElGVCkpIHtcbiAgICAgIG5ld1Jvb3QgPSBuZXcgVk5vZGUobmV3Um9vdCAmJiBuZXdSb290LmFycmF5Lmxlbmd0aCA/IFtuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICB9XG5cbiAgICAvLyBMb2NhdGUgb3IgY3JlYXRlIHRoZSBuZXcgdGFpbC5cbiAgICB2YXIgb2xkVGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1RhaWwgPSBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCA/XG4gICAgICBsaXN0Tm9kZUZvcihsaXN0LCBuZXdDYXBhY2l0eSAtIDEpIDpcbiAgICAgIG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0ID8gbmV3IFZOb2RlKFtdLCBvd25lcikgOiBvbGRUYWlsO1xuXG4gICAgLy8gTWVyZ2UgVGFpbCBpbnRvIHRyZWUuXG4gICAgaWYgKG9sZFRhaWwgJiYgbmV3VGFpbE9mZnNldCA+IG9sZFRhaWxPZmZzZXQgJiYgbmV3T3JpZ2luIDwgb2xkQ2FwYWNpdHkgJiYgb2xkVGFpbC5hcnJheS5sZW5ndGgpIHtcbiAgICAgIG5ld1Jvb3QgPSBlZGl0YWJsZVZOb2RlKG5ld1Jvb3QsIG93bmVyKTtcbiAgICAgIHZhciBub2RlID0gbmV3Um9vdDtcbiAgICAgIGZvciAodmFyIGxldmVsID0gbmV3TGV2ZWw7IGxldmVsID4gU0hJRlQ7IGxldmVsIC09IFNISUZUKSB7XG4gICAgICAgIHZhciBpZHggPSAob2xkVGFpbE9mZnNldCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbaWR4XSA9IGVkaXRhYmxlVk5vZGUobm9kZS5hcnJheVtpZHhdLCBvd25lcik7XG4gICAgICB9XG4gICAgICBub2RlLmFycmF5WyhvbGRUYWlsT2Zmc2V0ID4+PiBTSElGVCkgJiBNQVNLXSA9IG9sZFRhaWw7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNpemUgaGFzIGJlZW4gcmVkdWNlZCwgdGhlcmUncyBhIGNoYW5jZSB0aGUgdGFpbCBuZWVkcyB0byBiZSB0cmltbWVkLlxuICAgIGlmIChuZXdDYXBhY2l0eSA8IG9sZENhcGFjaXR5KSB7XG4gICAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUFmdGVyKG93bmVyLCAwLCBuZXdDYXBhY2l0eSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG5ldyBvcmlnaW4gaXMgd2l0aGluIHRoZSB0YWlsLCB0aGVuIHdlIGRvIG5vdCBuZWVkIGEgcm9vdC5cbiAgICBpZiAobmV3T3JpZ2luID49IG5ld1RhaWxPZmZzZXQpIHtcbiAgICAgIG5ld09yaWdpbiAtPSBuZXdUYWlsT2Zmc2V0O1xuICAgICAgbmV3Q2FwYWNpdHkgLT0gbmV3VGFpbE9mZnNldDtcbiAgICAgIG5ld0xldmVsID0gU0hJRlQ7XG4gICAgICBuZXdSb290ID0gbnVsbDtcbiAgICAgIG5ld1RhaWwgPSBuZXdUYWlsICYmIG5ld1RhaWwucmVtb3ZlQmVmb3JlKG93bmVyLCAwLCBuZXdPcmlnaW4pO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgcm9vdCBoYXMgYmVlbiB0cmltbWVkLCBnYXJiYWdlIGNvbGxlY3QuXG4gICAgfSBlbHNlIGlmIChuZXdPcmlnaW4gPiBvbGRPcmlnaW4gfHwgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcbiAgICAgIG9mZnNldFNoaWZ0ID0gMDtcblxuICAgICAgLy8gSWRlbnRpZnkgdGhlIG5ldyB0b3Agcm9vdCBub2RlIG9mIHRoZSBzdWJ0cmVlIG9mIHRoZSBvbGQgcm9vdC5cbiAgICAgIHdoaWxlIChuZXdSb290KSB7XG4gICAgICAgIHZhciBiZWdpbkluZGV4ID0gKG5ld09yaWdpbiA+Pj4gbmV3TGV2ZWwpICYgTUFTSztcbiAgICAgICAgaWYgKGJlZ2luSW5kZXggIT09IChuZXdUYWlsT2Zmc2V0ID4+PiBuZXdMZXZlbCkgJiBNQVNLKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlZ2luSW5kZXgpIHtcbiAgICAgICAgICBvZmZzZXRTaGlmdCArPSAoMSA8PCBuZXdMZXZlbCkgKiBiZWdpbkluZGV4O1xuICAgICAgICB9XG4gICAgICAgIG5ld0xldmVsIC09IFNISUZUO1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5hcnJheVtiZWdpbkluZGV4XTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJpbSB0aGUgbmV3IHNpZGVzIG9mIHRoZSBuZXcgcm9vdC5cbiAgICAgIGlmIChuZXdSb290ICYmIG5ld09yaWdpbiA+IG9sZE9yaWdpbikge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVCZWZvcmUob3duZXIsIG5ld0xldmVsLCBuZXdPcmlnaW4gLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAobmV3Um9vdCAmJiBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCkge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVBZnRlcihvd25lciwgbmV3TGV2ZWwsIG5ld1RhaWxPZmZzZXQgLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0U2hpZnQpIHtcbiAgICAgICAgbmV3T3JpZ2luIC09IG9mZnNldFNoaWZ0O1xuICAgICAgICBuZXdDYXBhY2l0eSAtPSBvZmZzZXRTaGlmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGlzdC5fX293bmVySUQpIHtcbiAgICAgIGxpc3Quc2l6ZSA9IG5ld0NhcGFjaXR5IC0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fb3JpZ2luID0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fY2FwYWNpdHkgPSBuZXdDYXBhY2l0eTtcbiAgICAgIGxpc3QuX2xldmVsID0gbmV3TGV2ZWw7XG4gICAgICBsaXN0Ll9yb290ID0gbmV3Um9vdDtcbiAgICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0Ll9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VMaXN0KG5ld09yaWdpbiwgbmV3Q2FwYWNpdHksIG5ld0xldmVsLCBuZXdSb290LCBuZXdUYWlsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b0xpc3RXaXRoKGxpc3QsIG1lcmdlciwgaXRlcmFibGVzKSB7XG4gICAgdmFyIGl0ZXJzID0gW107XG4gICAgdmFyIG1heFNpemUgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVyYWJsZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZXNbaWldO1xuICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgaWYgKGl0ZXIuc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgbWF4U2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgaXRlciA9IGl0ZXIubWFwKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZyb21KUyh2KX0pO1xuICAgICAgfVxuICAgICAgaXRlcnMucHVzaChpdGVyKTtcbiAgICB9XG4gICAgaWYgKG1heFNpemUgPiBsaXN0LnNpemUpIHtcbiAgICAgIGxpc3QgPSBsaXN0LnNldFNpemUobWF4U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChsaXN0LCBtZXJnZXIsIGl0ZXJzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhaWxPZmZzZXQoc2l6ZSkge1xuICAgIHJldHVybiBzaXplIDwgU0laRSA/IDAgOiAoKChzaXplIC0gMSkgPj4+IFNISUZUKSA8PCBTSElGVCk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkTWFwLCBNYXApO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkTWFwKCkgOlxuICAgICAgICBpc09yZGVyZWRNYXAodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKG1hcCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcC5zZXQoaywgdil9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgT3JkZXJlZE1hcC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdPcmRlcmVkTWFwIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX21hcC5nZXQoayk7XG4gICAgICByZXR1cm4gaW5kZXggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2xpc3QuZ2V0KGluZGV4KVsxXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX2xpc3QuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlPcmRlcmVkTWFwKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIHYpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdXBkYXRlT3JkZXJlZE1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCkgfHwgdGhpcy5fbGlzdC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdC5fX2l0ZXJhdGUoXG4gICAgICAgIGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeSAmJiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCl9LFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3QuZnJvbUVudHJ5U2VxKCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICAgIHZhciBuZXdMaXN0ID0gdGhpcy5fbGlzdC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICB0aGlzLl9saXN0ID0gbmV3TGlzdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZE1hcChtYXliZU9yZGVyZWRNYXApIHtcbiAgICByZXR1cm4gaXNNYXAobWF5YmVPcmRlcmVkTWFwKSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkTWFwKTtcbiAgfVxuXG4gIE9yZGVyZWRNYXAuaXNPcmRlcmVkTWFwID0gaXNPcmRlcmVkTWFwO1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgT3JkZXJlZE1hcC5wcm90b3R5cGVbREVMRVRFXSA9IE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZTtcblxuXG5cbiAgZnVuY3Rpb24gbWFrZU9yZGVyZWRNYXAobWFwLCBsaXN0LCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG9tYXAgPSBPYmplY3QuY3JlYXRlKE9yZGVyZWRNYXAucHJvdG90eXBlKTtcbiAgICBvbWFwLnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgb21hcC5fbWFwID0gbWFwO1xuICAgIG9tYXAuX2xpc3QgPSBsaXN0O1xuICAgIG9tYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBvbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgcmV0dXJuIG9tYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfT1JERVJFRF9NQVA7XG4gIGZ1bmN0aW9uIGVtcHR5T3JkZXJlZE1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfT1JERVJFRF9NQVAgfHwgKEVNUFRZX09SREVSRURfTUFQID0gbWFrZU9yZGVyZWRNYXAoZW1wdHlNYXAoKSwgZW1wdHlMaXN0KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU9yZGVyZWRNYXAob21hcCwgaywgdikge1xuICAgIHZhciBtYXAgPSBvbWFwLl9tYXA7XG4gICAgdmFyIGxpc3QgPSBvbWFwLl9saXN0O1xuICAgIHZhciBpID0gbWFwLmdldChrKTtcbiAgICB2YXIgaGFzID0gaSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBuZXdNYXA7XG4gICAgdmFyIG5ld0xpc3Q7XG4gICAgaWYgKHYgPT09IE5PVF9TRVQpIHsgLy8gcmVtb3ZlZFxuICAgICAgaWYgKCFoYXMpIHtcbiAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgICB9XG4gICAgICBpZiAobGlzdC5zaXplID49IFNJWkUgJiYgbGlzdC5zaXplID49IG1hcC5zaXplICogMikge1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24oZW50cnksIGlkeCkgIHtyZXR1cm4gZW50cnkgIT09IHVuZGVmaW5lZCAmJiBpICE9PSBpZHh9KTtcbiAgICAgICAgbmV3TWFwID0gbmV3TGlzdC50b0tleWVkU2VxKCkubWFwKGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeVswXX0pLmZsaXAoKS50b01hcCgpO1xuICAgICAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgICAgICBuZXdNYXAuX19vd25lcklEID0gbmV3TGlzdC5fX293bmVySUQgPSBvbWFwLl9fb3duZXJJRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnJlbW92ZShrKTtcbiAgICAgICAgbmV3TGlzdCA9IGkgPT09IGxpc3Quc2l6ZSAtIDEgPyBsaXN0LnBvcCgpIDogbGlzdC5zZXQoaSwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcykge1xuICAgICAgICBpZiAodiA9PT0gbGlzdC5nZXQoaSlbMV0pIHtcbiAgICAgICAgICByZXR1cm4gb21hcDtcbiAgICAgICAgfVxuICAgICAgICBuZXdNYXAgPSBtYXA7XG4gICAgICAgIG5ld0xpc3QgPSBsaXN0LnNldChpLCBbaywgdl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnNldChrLCBsaXN0LnNpemUpO1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5zZXQobGlzdC5zaXplLCBbaywgdl0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgIG9tYXAuc2l6ZSA9IG5ld01hcC5zaXplO1xuICAgICAgb21hcC5fbWFwID0gbmV3TWFwO1xuICAgICAgb21hcC5fbGlzdCA9IG5ld0xpc3Q7XG4gICAgICBvbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvbWFwO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0KTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFRvS2V5ZWRTZXF1ZW5jZSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIFRvS2V5ZWRTZXF1ZW5jZShpbmRleGVkLCB1c2VLZXlzKSB7XG4gICAgICB0aGlzLl9pdGVyID0gaW5kZXhlZDtcbiAgICAgIHRoaXMuX3VzZUtleXMgPSB1c2VLZXlzO1xuICAgICAgdGhpcy5zaXplID0gaW5kZXhlZC5zaXplO1xuICAgIH1cblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuZ2V0KGtleSwgbm90U2V0VmFsdWUpO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuaGFzKGtleSk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUudmFsdWVTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLnZhbHVlU2VxKCk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKTtcbiAgICAgIGlmICghdGhpcy5fdXNlS2V5cykge1xuICAgICAgICByZXZlcnNlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSAge3JldHVybiB0aGlzJDAuX2l0ZXIudG9TZXEoKS5yZXZlcnNlKCl9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCk7XG4gICAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcbiAgICAgICAgbWFwcGVkU2VxdWVuY2UudmFsdWVTZXEgPSBmdW5jdGlvbigpICB7cmV0dXJuIHRoaXMkMC5faXRlci50b1NlcSgpLm1hcChtYXBwZXIsIGNvbnRleHQpfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGlpO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKFxuICAgICAgICB0aGlzLl91c2VLZXlzID9cbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSA6XG4gICAgICAgICAgKChpaSA9IHJldmVyc2UgPyByZXNvbHZlU2l6ZSh0aGlzKSA6IDApLFxuICAgICAgICAgICAgZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCB0aGlzJDApfSksXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0aGlzLl91c2VLZXlzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGlpID0gcmV2ZXJzZSA/IHJlc29sdmVTaXplKHRoaXMpIDogMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cblxuICBjcmVhdGVDbGFzcyhUb0luZGV4ZWRTZXF1ZW5jZSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gVG9JbmRleGVkU2VxdWVuY2UoaXRlcikge1xuICAgICAgdGhpcy5faXRlciA9IGl0ZXI7XG4gICAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gICAgfVxuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLmluY2x1ZGVzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKVxuICAgICAgfSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoVG9TZXRTZXF1ZW5jZSwgU2V0U2VxKTtcbiAgICBmdW5jdGlvbiBUb1NldFNlcXVlbmNlKGl0ZXIpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBpdGVyO1xuICAgICAgdGhpcy5zaXplID0gaXRlci5zaXplO1xuICAgIH1cblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuaW5jbHVkZXMoa2V5KTtcbiAgICB9O1xuXG4gICAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCB2LCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBzdGVwLnZhbHVlLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEZyb21FbnRyaWVzU2VxdWVuY2UsIEtleWVkU2VxKTtcbiAgICBmdW5jdGlvbiBGcm9tRW50cmllc1NlcXVlbmNlKGVudHJpZXMpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBlbnRyaWVzO1xuICAgICAgdGhpcy5zaXplID0gZW50cmllcy5zaXplO1xuICAgIH1cblxuICAgIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmVudHJ5U2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci50b1NlcSgpO1xuICAgIH07XG5cbiAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB2YXIgaW5kZXhlZEl0ZXJhYmxlID0gaXNJdGVyYWJsZShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIGZuKFxuICAgICAgICAgICAgaW5kZXhlZEl0ZXJhYmxlID8gZW50cnkuZ2V0KDEpIDogZW50cnlbMV0sXG4gICAgICAgICAgICBpbmRleGVkSXRlcmFibGUgPyBlbnRyeS5nZXQoMCkgOiBlbnRyeVswXSxcbiAgICAgICAgICAgIHRoaXMkMFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIC8vIENoZWNrIGlmIGVudHJ5IGV4aXN0cyBmaXJzdCBzbyBhcnJheSBhY2Nlc3MgZG9lc24ndCB0aHJvdyBmb3IgaG9sZXNcbiAgICAgICAgICAvLyBpbiB0aGUgcGFyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRW50cnkoZW50cnkpO1xuICAgICAgICAgICAgdmFyIGluZGV4ZWRJdGVyYWJsZSA9IGlzSXRlcmFibGUoZW50cnkpO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgIGluZGV4ZWRJdGVyYWJsZSA/IGVudHJ5LmdldCgwKSA6IGVudHJ5WzBdLFxuICAgICAgICAgICAgICBpbmRleGVkSXRlcmFibGUgPyBlbnRyeS5nZXQoMSkgOiBlbnRyeVsxXSxcbiAgICAgICAgICAgICAgc3RlcFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cblxuICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gICAgY2FjaGVSZXN1bHRUaHJvdWdoO1xuXG5cbiAgZnVuY3Rpb24gZmxpcEZhY3RvcnkoaXRlcmFibGUpIHtcbiAgICB2YXIgZmxpcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBmbGlwU2VxdWVuY2UuX2l0ZXIgPSBpdGVyYWJsZTtcbiAgICBmbGlwU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG4gICAgZmxpcFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlfTtcbiAgICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXZlcnNlZFNlcXVlbmNlID0gaXRlcmFibGUucmV2ZXJzZS5hcHBseSh0aGlzKTsgLy8gc3VwZXIucmV2ZXJzZSgpXG4gICAgICByZXZlcnNlZFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlLnJldmVyc2UoKX07XG4gICAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcbiAgICB9O1xuICAgIGZsaXBTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKSB7cmV0dXJuIGl0ZXJhYmxlLmluY2x1ZGVzKGtleSl9O1xuICAgIGZsaXBTZXF1ZW5jZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuaGFzKGtleSl9O1xuICAgIGZsaXBTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcbiAgICBmbGlwU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZm4oaywgdiwgdGhpcyQwKSAhPT0gZmFsc2V9LCByZXZlcnNlKTtcbiAgICB9XG4gICAgZmxpcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIHZhciBrID0gc3RlcC52YWx1ZVswXTtcbiAgICAgICAgICAgIHN0ZXAudmFsdWVbMF0gPSBzdGVwLnZhbHVlWzFdO1xuICAgICAgICAgICAgc3RlcC52YWx1ZVsxXSA9IGs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdG9yKFxuICAgICAgICB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUyA/IElURVJBVEVfS0VZUyA6IElURVJBVEVfVkFMVUVTLFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZmxpcFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBtYXBGYWN0b3J5KGl0ZXJhYmxlLCBtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIG1hcHBlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplO1xuICAgIG1hcHBlZFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuaGFzKGtleSl9O1xuICAgIG1hcHBlZFNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpICB7XG4gICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgcmV0dXJuIHYgPT09IE5PVF9TRVQgP1xuICAgICAgICBub3RTZXRWYWx1ZSA6XG4gICAgICAgIG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpO1xuICAgIH07XG4gICAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdGUoXG4gICAgICAgIGZ1bmN0aW9uKHYsIGssIGMpICB7cmV0dXJuIGZuKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGMpLCBrLCB0aGlzJDApICE9PSBmYWxzZX0sXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfVxuICAgIG1hcHBlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIG1hcHBlci5jYWxsKGNvbnRleHQsIGVudHJ5WzFdLCBrZXksIGl0ZXJhYmxlKSxcbiAgICAgICAgICBzdGVwXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcHBlZFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiByZXZlcnNlRmFjdG9yeShpdGVyYWJsZSwgdXNlS2V5cykge1xuICAgIHZhciByZXZlcnNlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLl9pdGVyID0gaXRlcmFibGU7XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLnJldmVyc2UgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlfTtcbiAgICBpZiAoaXRlcmFibGUuZmxpcCkge1xuICAgICAgcmV2ZXJzZWRTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZmxpcFNlcXVlbmNlID0gZmxpcEZhY3RvcnkoaXRlcmFibGUpO1xuICAgICAgICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUuZmxpcCgpfTtcbiAgICAgICAgcmV0dXJuIGZsaXBTZXF1ZW5jZTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldmVyc2VkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgXG4gICAgICB7cmV0dXJuIGl0ZXJhYmxlLmdldCh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXksIG5vdFNldFZhbHVlKX07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKVxuICAgICAge3JldHVybiBpdGVyYWJsZS5oYXModXNlS2V5cyA/IGtleSA6IC0xIC0ga2V5KX07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpdGVyYWJsZS5pbmNsdWRlcyh2YWx1ZSl9O1xuICAgIHJldmVyc2VkU2VxdWVuY2UuY2FjaGVSZXN1bHQgPSBjYWNoZVJlc3VsdFRocm91Z2g7XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZm4odiwgaywgdGhpcyQwKX0sICFyZXZlcnNlKTtcbiAgICB9O1xuICAgIHJldmVyc2VkU2VxdWVuY2UuX19pdGVyYXRvciA9XG4gICAgICBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSAge3JldHVybiBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsICFyZXZlcnNlKX07XG4gICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZpbHRlckZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCwgdXNlS2V5cykge1xuICAgIHZhciBmaWx0ZXJTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgaWYgKHVzZUtleXMpIHtcbiAgICAgIGZpbHRlclNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtcbiAgICAgICAgdmFyIHYgPSBpdGVyYWJsZS5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICAgICAgcmV0dXJuIHYgIT09IE5PVF9TRVQgJiYgISFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKTtcbiAgICAgIH07XG4gICAgICBmaWx0ZXJTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSAge1xuICAgICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgICByZXR1cm4gdiAhPT0gTk9UX1NFVCAmJiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKSA/XG4gICAgICAgICAgdiA6IG5vdFNldFZhbHVlO1xuICAgICAgfTtcbiAgICB9XG4gICAgZmlsdGVyU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGVudHJ5WzFdO1xuICAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBpdGVyYWJsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBrZXkgOiBpdGVyYXRpb25zKyssIHZhbHVlLCBzdGVwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNvdW50QnlGYWN0b3J5KGl0ZXJhYmxlLCBncm91cGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIGdyb3VwcyA9IE1hcCgpLmFzTXV0YWJsZSgpO1xuICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgZ3JvdXBzLnVwZGF0ZShcbiAgICAgICAgZ3JvdXBlci5jYWxsKGNvbnRleHQsIHYsIGssIGl0ZXJhYmxlKSxcbiAgICAgICAgMCxcbiAgICAgICAgZnVuY3Rpb24oYSApIHtyZXR1cm4gYSArIDF9XG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBncm91cHMuYXNJbW11dGFibGUoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZ3JvdXBCeUZhY3RvcnkoaXRlcmFibGUsIGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgaXNLZXllZEl0ZXIgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgZ3JvdXBzID0gKGlzT3JkZXJlZChpdGVyYWJsZSkgPyBPcmRlcmVkTWFwKCkgOiBNYXAoKSkuYXNNdXRhYmxlKCk7XG4gICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICBncm91cHMudXBkYXRlKFxuICAgICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpLFxuICAgICAgICBmdW5jdGlvbihhICkge3JldHVybiAoYSA9IGEgfHwgW10sIGEucHVzaChpc0tleWVkSXRlciA/IFtrLCB2XSA6IHYpLCBhKX1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgdmFyIGNvZXJjZSA9IGl0ZXJhYmxlQ2xhc3MoaXRlcmFibGUpO1xuICAgIHJldHVybiBncm91cHMubWFwKGZ1bmN0aW9uKGFyciApIHtyZXR1cm4gcmVpZnkoaXRlcmFibGUsIGNvZXJjZShhcnIpKX0pO1xuICB9XG5cblxuICBmdW5jdGlvbiBzbGljZUZhY3RvcnkoaXRlcmFibGUsIGJlZ2luLCBlbmQsIHVzZUtleXMpIHtcbiAgICB2YXIgb3JpZ2luYWxTaXplID0gaXRlcmFibGUuc2l6ZTtcblxuICAgIC8vIFNhbml0aXplIGJlZ2luICYgZW5kIHVzaW5nIHRoaXMgc2hvcnRoYW5kIGZvciBUb0ludDMyKGFyZ3VtZW50KVxuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludDMyXG4gICAgaWYgKGJlZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJlZ2luID0gYmVnaW4gfCAwO1xuICAgIH1cbiAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVuZCA9IGVuZCB8IDA7XG4gICAgfVxuXG4gICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgb3JpZ2luYWxTaXplKSkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBvcmlnaW5hbFNpemUpO1xuICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCBvcmlnaW5hbFNpemUpO1xuXG4gICAgLy8gYmVnaW4gb3IgZW5kIHdpbGwgYmUgTmFOIGlmIHRoZXkgd2VyZSBwcm92aWRlZCBhcyBuZWdhdGl2ZSBudW1iZXJzIGFuZFxuICAgIC8vIHRoaXMgaXRlcmFibGUncyBzaXplIGlzIHVua25vd24uIEluIHRoYXQgY2FzZSwgY2FjaGUgZmlyc3Qgc28gdGhlcmUgaXNcbiAgICAvLyBhIGtub3duIHNpemUgYW5kIHRoZXNlIGRvIG5vdCByZXNvbHZlIHRvIE5hTi5cbiAgICBpZiAocmVzb2x2ZWRCZWdpbiAhPT0gcmVzb2x2ZWRCZWdpbiB8fCByZXNvbHZlZEVuZCAhPT0gcmVzb2x2ZWRFbmQpIHtcbiAgICAgIHJldHVybiBzbGljZUZhY3RvcnkoaXRlcmFibGUudG9TZXEoKS5jYWNoZVJlc3VsdCgpLCBiZWdpbiwgZW5kLCB1c2VLZXlzKTtcbiAgICB9XG5cbiAgICAvLyBOb3RlOiByZXNvbHZlZEVuZCBpcyB1bmRlZmluZWQgd2hlbiB0aGUgb3JpZ2luYWwgc2VxdWVuY2UncyBsZW5ndGggaXNcbiAgICAvLyB1bmtub3duIGFuZCB0aGlzIHNsaWNlIGRpZCBub3Qgc3VwcGx5IGFuIGVuZCBhbmQgc2hvdWxkIGNvbnRhaW4gYWxsXG4gICAgLy8gZWxlbWVudHMgYWZ0ZXIgcmVzb2x2ZWRCZWdpbi5cbiAgICAvLyBJbiB0aGF0IGNhc2UsIHJlc29sdmVkU2l6ZSB3aWxsIGJlIE5hTiBhbmQgc2xpY2VTaXplIHdpbGwgcmVtYWluIHVuZGVmaW5lZC5cbiAgICB2YXIgcmVzb2x2ZWRTaXplID0gcmVzb2x2ZWRFbmQgLSByZXNvbHZlZEJlZ2luO1xuICAgIHZhciBzbGljZVNpemU7XG4gICAgaWYgKHJlc29sdmVkU2l6ZSA9PT0gcmVzb2x2ZWRTaXplKSB7XG4gICAgICBzbGljZVNpemUgPSByZXNvbHZlZFNpemUgPCAwID8gMCA6IHJlc29sdmVkU2l6ZTtcbiAgICB9XG5cbiAgICB2YXIgc2xpY2VTZXEgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXG4gICAgLy8gSWYgaXRlcmFibGUuc2l6ZSBpcyB1bmRlZmluZWQsIHRoZSBzaXplIG9mIHRoZSByZWFsaXplZCBzbGljZVNlcSBpc1xuICAgIC8vIHVua25vd24gYXQgdGhpcyBwb2ludCB1bmxlc3MgdGhlIG51bWJlciBvZiBpdGVtcyB0byBzbGljZSBpcyAwXG4gICAgc2xpY2VTZXEuc2l6ZSA9IHNsaWNlU2l6ZSA9PT0gMCA/IHNsaWNlU2l6ZSA6IGl0ZXJhYmxlLnNpemUgJiYgc2xpY2VTaXplIHx8IHVuZGVmaW5lZDtcblxuICAgIGlmICghdXNlS2V5cyAmJiBpc1NlcShpdGVyYWJsZSkgJiYgc2xpY2VTaXplID49IDApIHtcbiAgICAgIHNsaWNlU2VxLmdldCA9IGZ1bmN0aW9uIChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHNsaWNlU2l6ZSA/XG4gICAgICAgICAgaXRlcmFibGUuZ2V0KGluZGV4ICsgcmVzb2x2ZWRCZWdpbiwgbm90U2V0VmFsdWUpIDpcbiAgICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbGljZVNlcS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAoc2xpY2VTaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSkpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCkgIT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnMgIT09IHNsaWNlU2l6ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgc2xpY2VTZXEuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHNsaWNlU2l6ZSAhPT0gMCAmJiByZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIC8vIERvbid0IGJvdGhlciBpbnN0YW50aWF0aW5nIHBhcmVudCBpdGVyYXRvciBpZiB0YWtpbmcgMC5cbiAgICAgIHZhciBpdGVyYXRvciA9IHNsaWNlU2l6ZSAhPT0gMCAmJiBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlIChza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSB7XG4gICAgICAgICAgaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgrK2l0ZXJhdGlvbnMgPiBzbGljZVNpemUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmICh1c2VLZXlzIHx8IHR5cGUgPT09IElURVJBVEVfVkFMVUVTKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSVRFUkFURV9LRVlTKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucyAtIDEsIHVuZGVmaW5lZCwgc3RlcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucyAtIDEsIHN0ZXAudmFsdWVbMV0sIHN0ZXApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2xpY2VTZXE7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHRha2VXaGlsZUZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciB0YWtlU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIHRha2VTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgXG4gICAgICAgIHtyZXR1cm4gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykgJiYgKytpdGVyYXRpb25zICYmIGZuKHYsIGssIHRoaXMkMCl9XG4gICAgICApO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICB0YWtlU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKCFpdGVyYXRpbmcpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICB2YXIgayA9IGVudHJ5WzBdO1xuICAgICAgICB2YXIgdiA9IGVudHJ5WzFdO1xuICAgICAgICBpZiAoIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIHRoaXMkMCkpIHtcbiAgICAgICAgICBpdGVyYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IElURVJBVEVfRU5UUklFUyA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB0YWtlU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNraXBXaGlsZUZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCwgdXNlS2V5cykge1xuICAgIHZhciBza2lwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIHNraXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkpKSB7XG4gICAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgc2tpcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBza2lwcGluZyA9IHRydWU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXAsIGssIHY7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIGlmICh1c2VLZXlzIHx8IHR5cGUgPT09IElURVJBVEVfVkFMVUVTKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB1bmRlZmluZWQsIHN0ZXApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlWzFdLCBzdGVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBrID0gZW50cnlbMF07XG4gICAgICAgICAgdiA9IGVudHJ5WzFdO1xuICAgICAgICAgIHNraXBwaW5nICYmIChza2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIHRoaXMkMCkpO1xuICAgICAgICB9IHdoaWxlIChza2lwcGluZyk7XG4gICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gc2tpcFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBjb25jYXRGYWN0b3J5KGl0ZXJhYmxlLCB2YWx1ZXMpIHtcbiAgICB2YXIgaXNLZXllZEl0ZXJhYmxlID0gaXNLZXllZChpdGVyYWJsZSk7XG4gICAgdmFyIGl0ZXJzID0gW2l0ZXJhYmxlXS5jb25jYXQodmFsdWVzKS5tYXAoZnVuY3Rpb24odiApIHtcbiAgICAgIGlmICghaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICB2ID0gaXNLZXllZEl0ZXJhYmxlID9cbiAgICAgICAgICBrZXllZFNlcUZyb21WYWx1ZSh2KSA6XG4gICAgICAgICAgaW5kZXhlZFNlcUZyb21WYWx1ZShBcnJheS5pc0FycmF5KHYpID8gdiA6IFt2XSk7XG4gICAgICB9IGVsc2UgaWYgKGlzS2V5ZWRJdGVyYWJsZSkge1xuICAgICAgICB2ID0gS2V5ZWRJdGVyYWJsZSh2KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2O1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbih2ICkge3JldHVybiB2LnNpemUgIT09IDB9KTtcblxuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgc2luZ2xldG9uID0gaXRlcnNbMF07XG4gICAgICBpZiAoc2luZ2xldG9uID09PSBpdGVyYWJsZSB8fFxuICAgICAgICAgIGlzS2V5ZWRJdGVyYWJsZSAmJiBpc0tleWVkKHNpbmdsZXRvbikgfHxcbiAgICAgICAgICBpc0luZGV4ZWQoaXRlcmFibGUpICYmIGlzSW5kZXhlZChzaW5nbGV0b24pKSB7XG4gICAgICAgIHJldHVybiBzaW5nbGV0b247XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbmNhdFNlcSA9IG5ldyBBcnJheVNlcShpdGVycyk7XG4gICAgaWYgKGlzS2V5ZWRJdGVyYWJsZSkge1xuICAgICAgY29uY2F0U2VxID0gY29uY2F0U2VxLnRvS2V5ZWRTZXEoKTtcbiAgICB9IGVsc2UgaWYgKCFpc0luZGV4ZWQoaXRlcmFibGUpKSB7XG4gICAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEudG9TZXRTZXEoKTtcbiAgICB9XG4gICAgY29uY2F0U2VxID0gY29uY2F0U2VxLmZsYXR0ZW4odHJ1ZSk7XG4gICAgY29uY2F0U2VxLnNpemUgPSBpdGVycy5yZWR1Y2UoXG4gICAgICBmdW5jdGlvbihzdW0sIHNlcSkgIHtcbiAgICAgICAgaWYgKHN1bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNpemUgPSBzZXEuc2l6ZTtcbiAgICAgICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VtICsgc2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAwXG4gICAgKTtcbiAgICByZXR1cm4gY29uY2F0U2VxO1xuICB9XG5cblxuICBmdW5jdGlvbiBmbGF0dGVuRmFjdG9yeShpdGVyYWJsZSwgZGVwdGgsIHVzZUtleXMpIHtcbiAgICB2YXIgZmxhdFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBmbGF0U2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgIGZ1bmN0aW9uIGZsYXREZWVwKGl0ZXIsIGN1cnJlbnREZXB0aCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgICBpdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgICAgIGlmICgoIWRlcHRoIHx8IGN1cnJlbnREZXB0aCA8IGRlcHRoKSAmJiBpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICBmbGF0RGVlcCh2LCBjdXJyZW50RGVwdGggKyAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucysrLCB0aGlzJDApID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAhc3RvcHBlZDtcbiAgICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICBmbGF0RGVlcChpdGVyYWJsZSwgMCk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9XG4gICAgZmxhdFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB3aGlsZSAoaXRlcmF0b3IpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdiA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IElURVJBVEVfRU5UUklFUykge1xuICAgICAgICAgICAgdiA9IHZbMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoIWRlcHRoIHx8IHN0YWNrLmxlbmd0aCA8IGRlcHRoKSAmJiBpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGl0ZXJhdG9yKTtcbiAgICAgICAgICAgIGl0ZXJhdG9yID0gdi5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlS2V5cyA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgdiwgc3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmxhdFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBmbGF0TWFwRmFjdG9yeShpdGVyYWJsZSwgbWFwcGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIGNvZXJjZSA9IGl0ZXJhYmxlQ2xhc3MoaXRlcmFibGUpO1xuICAgIHJldHVybiBpdGVyYWJsZS50b1NlcSgpLm1hcChcbiAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGNvZXJjZShtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSkpfVxuICAgICkuZmxhdHRlbih0cnVlKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gaW50ZXJwb3NlRmFjdG9yeShpdGVyYWJsZSwgc2VwYXJhdG9yKSB7XG4gICAgdmFyIGludGVycG9zZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplICYmIGl0ZXJhYmxlLnNpemUgKiAyIC0xO1xuICAgIGludGVycG9zZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgXG4gICAgICAgIHtyZXR1cm4gKCFpdGVyYXRpb25zIHx8IGZuKHNlcGFyYXRvciwgaXRlcmF0aW9ucysrLCB0aGlzJDApICE9PSBmYWxzZSkgJiZcbiAgICAgICAgZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApICE9PSBmYWxzZX0sXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIGludGVycG9zZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIGlmICghc3RlcCB8fCBpdGVyYXRpb25zICUgMikge1xuICAgICAgICAgIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyYXRpb25zICUgMiA/XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHNlcGFyYXRvcikgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIGludGVycG9zZWRTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc29ydEZhY3RvcnkoaXRlcmFibGUsIGNvbXBhcmF0b3IsIG1hcHBlcikge1xuICAgIGlmICghY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuICAgIH1cbiAgICB2YXIgaXNLZXllZEl0ZXJhYmxlID0gaXNLZXllZChpdGVyYWJsZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cmllcyA9IGl0ZXJhYmxlLnRvU2VxKCkubWFwKFxuICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gW2ssIHYsIGluZGV4KyssIG1hcHBlciA/IG1hcHBlcih2LCBrLCBpdGVyYWJsZSkgOiB2XX1cbiAgICApLnRvQXJyYXkoKTtcbiAgICBlbnRyaWVzLnNvcnQoZnVuY3Rpb24oYSwgYikgIHtyZXR1cm4gY29tcGFyYXRvcihhWzNdLCBiWzNdKSB8fCBhWzJdIC0gYlsyXX0pLmZvckVhY2goXG4gICAgICBpc0tleWVkSXRlcmFibGUgP1xuICAgICAgZnVuY3Rpb24odiwgaSkgIHsgZW50cmllc1tpXS5sZW5ndGggPSAyOyB9IDpcbiAgICAgIGZ1bmN0aW9uKHYsIGkpICB7IGVudHJpZXNbaV0gPSB2WzFdOyB9XG4gICAgKTtcbiAgICByZXR1cm4gaXNLZXllZEl0ZXJhYmxlID8gS2V5ZWRTZXEoZW50cmllcykgOlxuICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRTZXEoZW50cmllcykgOlxuICAgICAgU2V0U2VxKGVudHJpZXMpO1xuICB9XG5cblxuICBmdW5jdGlvbiBtYXhGYWN0b3J5KGl0ZXJhYmxlLCBjb21wYXJhdG9yLCBtYXBwZXIpIHtcbiAgICBpZiAoIWNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSBkZWZhdWx0Q29tcGFyYXRvcjtcbiAgICB9XG4gICAgaWYgKG1hcHBlcikge1xuICAgICAgdmFyIGVudHJ5ID0gaXRlcmFibGUudG9TZXEoKVxuICAgICAgICAubWFwKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIFt2LCBtYXBwZXIodiwgaywgaXRlcmFibGUpXX0pXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24oYSwgYikgIHtyZXR1cm4gbWF4Q29tcGFyZShjb21wYXJhdG9yLCBhWzFdLCBiWzFdKSA/IGIgOiBhfSk7XG4gICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpdGVyYWJsZS5yZWR1Y2UoZnVuY3Rpb24oYSwgYikgIHtyZXR1cm4gbWF4Q29tcGFyZShjb21wYXJhdG9yLCBhLCBiKSA/IGIgOiBhfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWF4Q29tcGFyZShjb21wYXJhdG9yLCBhLCBiKSB7XG4gICAgdmFyIGNvbXAgPSBjb21wYXJhdG9yKGIsIGEpO1xuICAgIC8vIGIgaXMgY29uc2lkZXJlZCB0aGUgbmV3IG1heCBpZiB0aGUgY29tcGFyYXRvciBkZWNsYXJlcyB0aGVtIGVxdWFsLCBidXRcbiAgICAvLyB0aGV5IGFyZSBub3QgZXF1YWwgYW5kIGIgaXMgaW4gZmFjdCBhIG51bGxpc2ggdmFsdWUuXG4gICAgcmV0dXJuIChjb21wID09PSAwICYmIGIgIT09IGEgJiYgKGIgPT09IHVuZGVmaW5lZCB8fCBiID09PSBudWxsIHx8IGIgIT09IGIpKSB8fCBjb21wID4gMDtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gemlwV2l0aEZhY3Rvcnkoa2V5SXRlciwgemlwcGVyLCBpdGVycykge1xuICAgIHZhciB6aXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShrZXlJdGVyKTtcbiAgICB6aXBTZXF1ZW5jZS5zaXplID0gbmV3IEFycmF5U2VxKGl0ZXJzKS5tYXAoZnVuY3Rpb24oaSApIHtyZXR1cm4gaS5zaXplfSkubWluKCk7XG4gICAgLy8gTm90ZTogdGhpcyBhIGdlbmVyaWMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBfX2l0ZXJhdGUgaW4gdGVybXMgb2ZcbiAgICAvLyBfX2l0ZXJhdG9yIHdoaWNoIG1heSBiZSBtb3JlIGdlbmVyaWNhbGx5IHVzZWZ1bCBpbiB0aGUgZnV0dXJlLlxuICAgIHppcFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICAvKiBnZW5lcmljOlxuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICBpZiAoZm4oc3RlcC52YWx1ZVsxXSwgc3RlcC52YWx1ZVswXSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgICAgKi9cbiAgICAgIC8vIGluZGV4ZWQ6XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIGlmIChmbihzdGVwLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIHppcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaSApXG4gICAgICAgIHtyZXR1cm4gKGkgPSBJdGVyYWJsZShpKSwgZ2V0SXRlcmF0b3IocmV2ZXJzZSA/IGkucmV2ZXJzZSgpIDogaSkpfVxuICAgICAgKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBpc0RvbmUgPSBmYWxzZTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcHM7XG4gICAgICAgIGlmICghaXNEb25lKSB7XG4gICAgICAgICAgc3RlcHMgPSBpdGVyYXRvcnMubWFwKGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkubmV4dCgpfSk7XG4gICAgICAgICAgaXNEb25lID0gc3RlcHMuc29tZShmdW5jdGlvbihzICkge3JldHVybiBzLmRvbmV9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEb25lKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgaXRlcmF0aW9ucysrLFxuICAgICAgICAgIHppcHBlci5hcHBseShudWxsLCBzdGVwcy5tYXAoZnVuY3Rpb24ocyApIHtyZXR1cm4gcy52YWx1ZX0pKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gemlwU2VxdWVuY2VcbiAgfVxuXG5cbiAgLy8gI3ByYWdtYSBIZWxwZXIgRnVuY3Rpb25zXG5cbiAgZnVuY3Rpb24gcmVpZnkoaXRlciwgc2VxKSB7XG4gICAgcmV0dXJuIGlzU2VxKGl0ZXIpID8gc2VxIDogaXRlci5jb25zdHJ1Y3RvcihzZXEpO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVFbnRyeShlbnRyeSkge1xuICAgIGlmIChlbnRyeSAhPT0gT2JqZWN0KGVudHJ5KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgW0ssIFZdIHR1cGxlOiAnICsgZW50cnkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVTaXplKGl0ZXIpIHtcbiAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgIHJldHVybiBlbnN1cmVTaXplKGl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSkge1xuICAgIHJldHVybiBpc0tleWVkKGl0ZXJhYmxlKSA/IEtleWVkSXRlcmFibGUgOlxuICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRJdGVyYWJsZSA6XG4gICAgICBTZXRJdGVyYWJsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VTZXF1ZW5jZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKFxuICAgICAgKFxuICAgICAgICBpc0tleWVkKGl0ZXJhYmxlKSA/IEtleWVkU2VxIDpcbiAgICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRTZXEgOlxuICAgICAgICBTZXRTZXFcbiAgICAgICkucHJvdG90eXBlXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlUmVzdWx0VGhyb3VnaCgpIHtcbiAgICBpZiAodGhpcy5faXRlci5jYWNoZVJlc3VsdCkge1xuICAgICAgdGhpcy5faXRlci5jYWNoZVJlc3VsdCgpO1xuICAgICAgdGhpcy5zaXplID0gdGhpcy5faXRlci5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0LmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdENvbXBhcmF0b3IoYSwgYikge1xuICAgIHJldHVybiBhID4gYiA/IDEgOiBhIDwgYiA/IC0xIDogMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcmNlSXRlcmF0b3Ioa2V5UGF0aCkge1xuICAgIHZhciBpdGVyID0gZ2V0SXRlcmF0b3Ioa2V5UGF0aCk7XG4gICAgaWYgKCFpdGVyKSB7XG4gICAgICAvLyBBcnJheSBtaWdodCBub3QgYmUgaXRlcmFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCwgc28gd2UgbmVlZCBhIGZhbGxiYWNrXG4gICAgICAvLyB0byBvdXIgd3JhcHBlZCB0eXBlLlxuICAgICAgaWYgKCFpc0FycmF5TGlrZShrZXlQYXRoKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBpdGVyYWJsZSBvciBhcnJheS1saWtlOiAnICsga2V5UGF0aCk7XG4gICAgICB9XG4gICAgICBpdGVyID0gZ2V0SXRlcmF0b3IoSXRlcmFibGUoa2V5UGF0aCkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlcjtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFJlY29yZCwgS2V5ZWRDb2xsZWN0aW9uKTtcblxuICAgIGZ1bmN0aW9uIFJlY29yZChkZWZhdWx0VmFsdWVzLCBuYW1lKSB7XG4gICAgICB2YXIgaGFzSW5pdGlhbGl6ZWQ7XG5cbiAgICAgIHZhciBSZWNvcmRUeXBlID0gZnVuY3Rpb24gUmVjb3JkKHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzIGluc3RhbmNlb2YgUmVjb3JkVHlwZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlY29yZFR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRUeXBlKHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNJbml0aWFsaXplZCkge1xuICAgICAgICAgIGhhc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRWYWx1ZXMpO1xuICAgICAgICAgIHNldFByb3BzKFJlY29yZFR5cGVQcm90b3R5cGUsIGtleXMpO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuc2l6ZSA9IGtleXMubGVuZ3RoO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX25hbWUgPSBuYW1lO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX2tleXMgPSBrZXlzO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX2RlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0VmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcCA9IE1hcCh2YWx1ZXMpO1xuICAgICAgfTtcblxuICAgICAgdmFyIFJlY29yZFR5cGVQcm90b3R5cGUgPSBSZWNvcmRUeXBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVjb3JkUHJvdG90eXBlKTtcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWNvcmRUeXBlO1xuXG4gICAgICByZXR1cm4gUmVjb3JkVHlwZTtcbiAgICB9XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKHJlY29yZE5hbWUodGhpcykgKyAnIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgZGVmYXVsdFZhbCA9IHRoaXMuX2RlZmF1bHRWYWx1ZXNba107XG4gICAgICByZXR1cm4gdGhpcy5fbWFwID8gdGhpcy5fbWFwLmdldChrLCBkZWZhdWx0VmFsKSA6IGRlZmF1bHRWYWw7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBSZWNvcmQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5fbWFwICYmIHRoaXMuX21hcC5jbGVhcigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBSZWNvcmRUeXBlID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiBSZWNvcmRUeXBlLl9lbXB0eSB8fCAoUmVjb3JkVHlwZS5fZW1wdHkgPSBtYWtlUmVjb3JkKHRoaXMsIGVtcHR5TWFwKCkpKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrLCB2KSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNldCB1bmtub3duIGtleSBcIicgKyBrICsgJ1wiIG9uICcgKyByZWNvcmROYW1lKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLnNldChrLCB2KTtcbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCB8fCBuZXdNYXAgPT09IHRoaXMuX21hcCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld01hcCk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaykge1xuICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLnJlbW92ZShrKTtcbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCB8fCBuZXdNYXAgPT09IHRoaXMuX21hcCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld01hcCk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBLZXllZEl0ZXJhYmxlKHRoaXMuX2RlZmF1bHRWYWx1ZXMpLm1hcChmdW5jdGlvbihfLCBrKSAge3JldHVybiB0aGlzJDAuZ2V0KGspfSkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIEtleWVkSXRlcmFibGUodGhpcy5fZGVmYXVsdFZhbHVlcykubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIHRoaXMkMC5nZXQoayl9KS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgbmV3TWFwID0gdGhpcy5fbWFwICYmIHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld01hcCwgb3duZXJJRCk7XG4gICAgfTtcblxuXG4gIHZhciBSZWNvcmRQcm90b3R5cGUgPSBSZWNvcmQucHJvdG90eXBlO1xuICBSZWNvcmRQcm90b3R5cGVbREVMRVRFXSA9IFJlY29yZFByb3RvdHlwZS5yZW1vdmU7XG4gIFJlY29yZFByb3RvdHlwZS5kZWxldGVJbiA9XG4gIFJlY29yZFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5yZW1vdmVJbjtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlID0gTWFwUHJvdG90eXBlLm1lcmdlO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VXaXRoID0gTWFwUHJvdG90eXBlLm1lcmdlV2l0aDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VJbjtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcCA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXA7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcFdpdGg7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZURlZXBJbiA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXBJbjtcbiAgUmVjb3JkUHJvdG90eXBlLnNldEluID0gTWFwUHJvdG90eXBlLnNldEluO1xuICBSZWNvcmRQcm90b3R5cGUudXBkYXRlID0gTWFwUHJvdG90eXBlLnVwZGF0ZTtcbiAgUmVjb3JkUHJvdG90eXBlLnVwZGF0ZUluID0gTWFwUHJvdG90eXBlLnVwZGF0ZUluO1xuICBSZWNvcmRQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuICBSZWNvcmRQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgUmVjb3JkUHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuXG5cbiAgZnVuY3Rpb24gbWFrZVJlY29yZChsaWtlUmVjb3JkLCBtYXAsIG93bmVySUQpIHtcbiAgICB2YXIgcmVjb3JkID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YobGlrZVJlY29yZCkpO1xuICAgIHJlY29yZC5fbWFwID0gbWFwO1xuICAgIHJlY29yZC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIHJldHVybiByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvcmROYW1lKHJlY29yZCkge1xuICAgIHJldHVybiByZWNvcmQuX25hbWUgfHwgcmVjb3JkLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ1JlY29yZCc7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcm9wcyhwcm90b3R5cGUsIG5hbWVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5hbWVzLmZvckVhY2goc2V0UHJvcC5iaW5kKHVuZGVmaW5lZCwgcHJvdG90eXBlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBmYWlsZWQuIFByb2JhYmx5IElFOC5cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcm9wKHByb3RvdHlwZSwgbmFtZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsIG5hbWUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChuYW1lKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGludmFyaWFudCh0aGlzLl9fb3duZXJJRCwgJ0Nhbm5vdCBzZXQgb24gYW4gaW1tdXRhYmxlIHJlY29yZC4nKTtcbiAgICAgICAgdGhpcy5zZXQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0LCBTZXRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXQoKSA6XG4gICAgICAgIGlzU2V0KHZhbHVlKSAmJiAhaXNPcmRlcmVkKHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIFNldC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcyhLZXllZEl0ZXJhYmxlKHZhbHVlKS5rZXlTZXEoKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NldCB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnNldCh2YWx1ZSwgdHJ1ZSkpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5yZW1vdmUodmFsdWUpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuY2xlYXIoKSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIFNldC5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDAgJiYgIXRoaXMuX19vd25lcklEICYmIGl0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihpdGVyc1swXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIFNldEl0ZXJhYmxlKGl0ZXJzW2lpXSkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gc2V0LmFkZCh2YWx1ZSl9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcbiAgICAgIHZhciBvcmlnaW5hbFNldCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgICBpZiAoIWl0ZXJzLmV2ZXJ5KGZ1bmN0aW9uKGl0ZXIgKSB7cmV0dXJuIGl0ZXIuaW5jbHVkZXModmFsdWUpfSkpIHtcbiAgICAgICAgICAgIHNldC5yZW1vdmUodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGl0ZXJzID0gaXRlcnMubWFwKGZ1bmN0aW9uKGl0ZXIgKSB7cmV0dXJuIFNldEl0ZXJhYmxlKGl0ZXIpfSk7XG4gICAgICB2YXIgb3JpZ2luYWxTZXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG4gICAgICAgIG9yaWdpbmFsU2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUgKSB7XG4gICAgICAgICAgaWYgKGl0ZXJzLnNvbWUoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSl9KSkge1xuICAgICAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudW5pb24uYXBwbHkodGhpcywgaXRlcnMpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICAvLyBMYXRlIGJpbmRpbmdcbiAgICAgIHJldHVybiBPcmRlcmVkU2V0KHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5zb3J0QnkgPSBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9tYXAuX19pdGVyYXRlKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIGZuKGssIGssIHRoaXMkMCl9LCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4ga30pLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICAgIGlmICghb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fX21ha2UobmV3TWFwLCBvd25lcklEKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNTZXQobWF5YmVTZXQpIHtcbiAgICByZXR1cm4gISEobWF5YmVTZXQgJiYgbWF5YmVTZXRbSVNfU0VUX1NFTlRJTkVMXSk7XG4gIH1cblxuICBTZXQuaXNTZXQgPSBpc1NldDtcblxuICB2YXIgSVNfU0VUX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU0VUX19AQCc7XG5cbiAgdmFyIFNldFByb3RvdHlwZSA9IFNldC5wcm90b3R5cGU7XG4gIFNldFByb3RvdHlwZVtJU19TRVRfU0VOVElORUxdID0gdHJ1ZTtcbiAgU2V0UHJvdG90eXBlW0RFTEVURV0gPSBTZXRQcm90b3R5cGUucmVtb3ZlO1xuICBTZXRQcm90b3R5cGUubWVyZ2VEZWVwID0gU2V0UHJvdG90eXBlLm1lcmdlO1xuICBTZXRQcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IFNldFByb3RvdHlwZS5tZXJnZVdpdGg7XG4gIFNldFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFNldFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuICBTZXRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cbiAgU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eVNldDtcbiAgU2V0UHJvdG90eXBlLl9fbWFrZSA9IG1ha2VTZXQ7XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2V0KHNldCwgbmV3TWFwKSB7XG4gICAgaWYgKHNldC5fX293bmVySUQpIHtcbiAgICAgIHNldC5zaXplID0gbmV3TWFwLnNpemU7XG4gICAgICBzZXQuX21hcCA9IG5ld01hcDtcbiAgICAgIHJldHVybiBzZXQ7XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXAgPT09IHNldC5fbWFwID8gc2V0IDpcbiAgICAgIG5ld01hcC5zaXplID09PSAwID8gc2V0Ll9fZW1wdHkoKSA6XG4gICAgICBzZXQuX19tYWtlKG5ld01hcCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlU2V0KG1hcCwgb3duZXJJRCkge1xuICAgIHZhciBzZXQgPSBPYmplY3QuY3JlYXRlKFNldFByb3RvdHlwZSk7XG4gICAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgc2V0Ll9tYXAgPSBtYXA7XG4gICAgc2V0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIHZhciBFTVBUWV9TRVQ7XG4gIGZ1bmN0aW9uIGVtcHR5U2V0KCkge1xuICAgIHJldHVybiBFTVBUWV9TRVQgfHwgKEVNUFRZX1NFVCA9IG1ha2VTZXQoZW1wdHlNYXAoKSkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoT3JkZXJlZFNldCwgU2V0KTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBPcmRlcmVkU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5T3JkZXJlZFNldCgpIDpcbiAgICAgICAgaXNPcmRlcmVkU2V0KHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlPcmRlcmVkU2V0KCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG4gICAgICAgICAgdmFyIGl0ZXIgPSBTZXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiApIHtyZXR1cm4gc2V0LmFkZCh2KX0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBPcmRlcmVkU2V0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcyhLZXllZEl0ZXJhYmxlKHZhbHVlKS5rZXlTZXEoKSk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRTZXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdPcmRlcmVkU2V0IHsnLCAnfScpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc09yZGVyZWRTZXQobWF5YmVPcmRlcmVkU2V0KSB7XG4gICAgcmV0dXJuIGlzU2V0KG1heWJlT3JkZXJlZFNldCkgJiYgaXNPcmRlcmVkKG1heWJlT3JkZXJlZFNldCk7XG4gIH1cblxuICBPcmRlcmVkU2V0LmlzT3JkZXJlZFNldCA9IGlzT3JkZXJlZFNldDtcblxuICB2YXIgT3JkZXJlZFNldFByb3RvdHlwZSA9IE9yZGVyZWRTZXQucHJvdG90eXBlO1xuICBPcmRlcmVkU2V0UHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblxuICBPcmRlcmVkU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eU9yZGVyZWRTZXQ7XG4gIE9yZGVyZWRTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZU9yZGVyZWRTZXQ7XG5cbiAgZnVuY3Rpb24gbWFrZU9yZGVyZWRTZXQobWFwLCBvd25lcklEKSB7XG4gICAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoT3JkZXJlZFNldFByb3RvdHlwZSk7XG4gICAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgc2V0Ll9tYXAgPSBtYXA7XG4gICAgc2V0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIHZhciBFTVBUWV9PUkRFUkVEX1NFVDtcbiAgZnVuY3Rpb24gZW1wdHlPcmRlcmVkU2V0KCkge1xuICAgIHJldHVybiBFTVBUWV9PUkRFUkVEX1NFVCB8fCAoRU1QVFlfT1JERVJFRF9TRVQgPSBtYWtlT3JkZXJlZFNldChlbXB0eU9yZGVyZWRNYXAoKSkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhY2ssIEluZGV4ZWRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBTdGFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVN0YWNrKCkgOlxuICAgICAgICBpc1N0YWNrKHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlTdGFjaygpLnVuc2hpZnRBbGwodmFsdWUpO1xuICAgIH1cblxuICAgIFN0YWNrLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTdGFjayBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcbiAgICAgIHdoaWxlIChoZWFkICYmIGluZGV4LS0pIHtcbiAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoZWFkID8gaGVhZC52YWx1ZSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYWQgJiYgdGhpcy5faGVhZC52YWx1ZTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIFN0YWNrLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZSArIGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICBmb3IgKHZhciBpaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpaSA+PSAwOyBpaS0tKSB7XG4gICAgICAgIGhlYWQgPSB7XG4gICAgICAgICAgdmFsdWU6IGFyZ3VtZW50c1tpaV0sXG4gICAgICAgICAgbmV4dDogaGVhZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5wdXNoQWxsID0gZnVuY3Rpb24oaXRlcikge1xuICAgICAgaXRlciA9IEluZGV4ZWRJdGVyYWJsZShpdGVyKTtcbiAgICAgIGlmIChpdGVyLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemU7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICBpdGVyLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuICAgICAgICBuZXdTaXplKys7XG4gICAgICAgIGhlYWQgPSB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG5leHQ6IGhlYWRcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnVuc2hpZnRBbGwgPSBmdW5jdGlvbihpdGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoQWxsKGl0ZXIpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlTdGFjaygpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCB0aGlzLnNpemUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc29sdmVkQmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgdGhpcy5zaXplKTtcbiAgICAgIGlmIChyZXNvbHZlZEVuZCAhPT0gdGhpcy5zaXplKSB7XG4gICAgICAgIC8vIHN1cGVyLnNsaWNlKGJlZ2luLCBlbmQpO1xuICAgICAgICByZXR1cm4gSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZSAtIHJlc29sdmVkQmVnaW47XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICB3aGlsZSAocmVzb2x2ZWRCZWdpbi0tKSB7XG4gICAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgICBTdGFjay5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICghb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayh0aGlzLnNpemUsIHRoaXMuX2hlYWQsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBJdGVyYXRpb25cblxuICAgIFN0YWNrLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLl9faXRlcmF0ZShmbik7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuX2hlYWQ7XG4gICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICBpZiAoZm4obm9kZS52YWx1ZSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLl9faXRlcmF0b3IodHlwZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuX2hlYWQ7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlO1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzU3RhY2sobWF5YmVTdGFjaykge1xuICAgIHJldHVybiAhIShtYXliZVN0YWNrICYmIG1heWJlU3RhY2tbSVNfU1RBQ0tfU0VOVElORUxdKTtcbiAgfVxuXG4gIFN0YWNrLmlzU3RhY2sgPSBpc1N0YWNrO1xuXG4gIHZhciBJU19TVEFDS19TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX1NUQUNLX19AQCc7XG5cbiAgdmFyIFN0YWNrUHJvdG90eXBlID0gU3RhY2sucHJvdG90eXBlO1xuICBTdGFja1Byb3RvdHlwZVtJU19TVEFDS19TRU5USU5FTF0gPSB0cnVlO1xuICBTdGFja1Byb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFN0YWNrUHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIFN0YWNrUHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuICBTdGFja1Byb3RvdHlwZS53YXNBbHRlcmVkID0gTWFwUHJvdG90eXBlLndhc0FsdGVyZWQ7XG5cblxuICBmdW5jdGlvbiBtYWtlU3RhY2soc2l6ZSwgaGVhZCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKFN0YWNrUHJvdG90eXBlKTtcbiAgICBtYXAuc2l6ZSA9IHNpemU7XG4gICAgbWFwLl9oZWFkID0gaGVhZDtcbiAgICBtYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBtYXAuX19oYXNoID0gaGFzaDtcbiAgICBtYXAuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuXG4gIHZhciBFTVBUWV9TVEFDSztcbiAgZnVuY3Rpb24gZW1wdHlTdGFjaygpIHtcbiAgICByZXR1cm4gRU1QVFlfU1RBQ0sgfHwgKEVNUFRZX1NUQUNLID0gbWFrZVN0YWNrKDApKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250cmlidXRlcyBhZGRpdGlvbmFsIG1ldGhvZHMgdG8gYSBjb25zdHJ1Y3RvclxuICAgKi9cbiAgZnVuY3Rpb24gbWl4aW4oY3RvciwgbWV0aG9kcykge1xuICAgIHZhciBrZXlDb3BpZXIgPSBmdW5jdGlvbihrZXkgKSB7IGN0b3IucHJvdG90eXBlW2tleV0gPSBtZXRob2RzW2tleV07IH07XG4gICAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaChrZXlDb3BpZXIpO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiZcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWV0aG9kcykuZm9yRWFjaChrZXlDb3BpZXIpO1xuICAgIHJldHVybiBjdG9yO1xuICB9XG5cbiAgSXRlcmFibGUuSXRlcmF0b3IgPSBJdGVyYXRvcjtcblxuICBtaXhpbihJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblxuICAgIHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciBhcnJheSA9IG5ldyBBcnJheSh0aGlzLnNpemUgfHwgMCk7XG4gICAgICB0aGlzLnZhbHVlU2VxKCkuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGkpICB7IGFycmF5W2ldID0gdjsgfSk7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfSxcblxuICAgIHRvSW5kZXhlZFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvSW5kZXhlZFNlcXVlbmNlKHRoaXMpO1xuICAgIH0sXG5cbiAgICB0b0pTOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlMgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS50b0pTKCkgOiB2YWx1ZX1cbiAgICAgICkuX190b0pTKCk7XG4gICAgfSxcblxuICAgIHRvSlNPTjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChcbiAgICAgICAgZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicgPyB2YWx1ZS50b0pTT04oKSA6IHZhbHVlfVxuICAgICAgKS5fX3RvSlMoKTtcbiAgICB9LFxuXG4gICAgdG9LZXllZFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCB0cnVlKTtcbiAgICB9LFxuXG4gICAgdG9NYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIE1hcCh0aGlzLnRvS2V5ZWRTZXEoKSk7XG4gICAgfSxcblxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAgeyBvYmplY3Rba10gPSB2OyB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIHRvT3JkZXJlZE1hcDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gT3JkZXJlZE1hcCh0aGlzLnRvS2V5ZWRTZXEoKSk7XG4gICAgfSxcblxuICAgIHRvT3JkZXJlZFNldDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gT3JkZXJlZFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBTZXQoaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuICAgIH0sXG5cbiAgICB0b1NldFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvU2V0U2VxdWVuY2UodGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpc0luZGV4ZWQodGhpcykgPyB0aGlzLnRvSW5kZXhlZFNlcSgpIDpcbiAgICAgICAgaXNLZXllZCh0aGlzKSA/IHRoaXMudG9LZXllZFNlcSgpIDpcbiAgICAgICAgdGhpcy50b1NldFNlcSgpO1xuICAgIH0sXG5cbiAgICB0b1N0YWNrOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBTdGFjayhpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvTGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gTGlzdChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIENvbW1vbiBKYXZhU2NyaXB0IG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnW0l0ZXJhYmxlXSc7XG4gICAgfSxcblxuICAgIF9fdG9TdHJpbmc6IGZ1bmN0aW9uKGhlYWQsIHRhaWwpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGhlYWQgKyB0YWlsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhlYWQgKyAnICcgKyB0aGlzLnRvU2VxKCkubWFwKHRoaXMuX190b1N0cmluZ01hcHBlcikuam9pbignLCAnKSArICcgJyArIHRhaWw7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gICAgY29uY2F0OiBmdW5jdGlvbigpIHt2YXIgdmFsdWVzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgY29uY2F0RmFjdG9yeSh0aGlzLCB2YWx1ZXMpKTtcbiAgICB9LFxuXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb21lKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG4gICAgfSxcblxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMpO1xuICAgIH0sXG5cbiAgICBldmVyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICghcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfSxcblxuICAgIGZpbHRlcjogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmlsdGVyRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQsIHRydWUpKTtcbiAgICB9LFxuXG4gICAgZmluZDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzFdIDogbm90U2V0VmFsdWU7XG4gICAgfSxcblxuICAgIGZpbmRFbnRyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZm91bmQ7XG4gICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgICBmb3VuZCA9IFtrLCB2XTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0sXG5cbiAgICBmaW5kTGFzdEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBmb3JFYWNoOiBmdW5jdGlvbihzaWRlRWZmZWN0LCBjb250ZXh0KSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRlKGNvbnRleHQgPyBzaWRlRWZmZWN0LmJpbmQoY29udGV4dCkgOiBzaWRlRWZmZWN0KTtcbiAgICB9LFxuXG4gICAgam9pbjogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgc2VwYXJhdG9yID0gc2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyAnJyArIHNlcGFyYXRvciA6ICcsJztcbiAgICAgIHZhciBqb2luZWQgPSAnJztcbiAgICAgIHZhciBpc0ZpcnN0ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYgKSB7XG4gICAgICAgIGlzRmlyc3QgPyAoaXNGaXJzdCA9IGZhbHNlKSA6IChqb2luZWQgKz0gc2VwYXJhdG9yKTtcbiAgICAgICAgam9pbmVkICs9IHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkID8gdi50b1N0cmluZygpIDogJyc7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBqb2luZWQ7XG4gICAgfSxcblxuICAgIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0tFWVMpO1xuICAgIH0sXG5cbiAgICBtYXA6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG4gICAgfSxcblxuICAgIHJlZHVjZTogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciByZWR1Y3Rpb247XG4gICAgICB2YXIgdXNlRmlyc3Q7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdXNlRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkdWN0aW9uID0gaW5pdGlhbFJlZHVjdGlvbjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICh1c2VGaXJzdCkge1xuICAgICAgICAgIHVzZUZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgcmVkdWN0aW9uID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWR1Y3Rpb24gPSByZWR1Y2VyLmNhbGwoY29udGV4dCwgcmVkdWN0aW9uLCB2LCBrLCBjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVkdWN0aW9uO1xuICAgIH0sXG5cbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHJldmVyc2VkID0gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpO1xuICAgICAgcmV0dXJuIHJldmVyc2VkLnJlZHVjZS5hcHBseShyZXZlcnNlZCwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCB0cnVlKSk7XG4gICAgfSxcblxuICAgIHNvbWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuICF0aGlzLmV2ZXJ5KG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgICB9LFxuXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAgYnV0TGFzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCAtMSk7XG4gICAgfSxcblxuICAgIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zaXplID09PSAwIDogIXRoaXMuc29tZShmdW5jdGlvbigpICB7cmV0dXJuIHRydWV9KTtcbiAgICB9LFxuXG4gICAgY291bnQ6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGVuc3VyZVNpemUoXG4gICAgICAgIHByZWRpY2F0ZSA/IHRoaXMudG9TZXEoKS5maWx0ZXIocHJlZGljYXRlLCBjb250ZXh0KSA6IHRoaXNcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGNvdW50Qnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBjb3VudEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbCh0aGlzLCBvdGhlcik7XG4gICAgfSxcblxuICAgIGVudHJ5U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXM7XG4gICAgICBpZiAoaXRlcmFibGUuX2NhY2hlKSB7XG4gICAgICAgIC8vIFdlIGNhY2hlIGFzIGFuIGVudHJpZXMgYXJyYXksIHNvIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgY2FjaGUhXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEoaXRlcmFibGUuX2NhY2hlKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbnRyaWVzU2VxdWVuY2UgPSBpdGVyYWJsZS50b1NlcSgpLm1hcChlbnRyeU1hcHBlcikudG9JbmRleGVkU2VxKCk7XG4gICAgICBlbnRyaWVzU2VxdWVuY2UuZnJvbUVudHJ5U2VxID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS50b1NlcSgpfTtcbiAgICAgIHJldHVybiBlbnRyaWVzU2VxdWVuY2U7XG4gICAgfSxcblxuICAgIGZpbHRlck5vdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBmaW5kTGFzdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpO1xuICAgIH0sXG5cbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kKHJldHVyblRydWUpO1xuICAgIH0sXG5cbiAgICBmbGF0TWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0TWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgZmxhdHRlbjogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmcm9tRW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBGcm9tRW50cmllc1NlcXVlbmNlKHRoaXMpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHNlYXJjaEtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQoZnVuY3Rpb24oXywga2V5KSAge3JldHVybiBpcyhrZXksIHNlYXJjaEtleSl9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0SW46IGZ1bmN0aW9uKHNlYXJjaEtleVBhdGgsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgbmVzdGVkID0gdGhpcztcbiAgICAgIC8vIE5vdGU6IGluIGFuIEVTNiBlbnZpcm9ubWVudCwgd2Ugd291bGQgcHJlZmVyOlxuICAgICAgLy8gZm9yICh2YXIga2V5IG9mIHNlYXJjaEtleVBhdGgpIHtcbiAgICAgIHZhciBpdGVyID0gZm9yY2VJdGVyYXRvcihzZWFyY2hLZXlQYXRoKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWQgJiYgbmVzdGVkLmdldCA/IG5lc3RlZC5nZXQoa2V5LCBOT1RfU0VUKSA6IE5PVF9TRVQ7XG4gICAgICAgIGlmIChuZXN0ZWQgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXN0ZWQ7XG4gICAgfSxcblxuICAgIGdyb3VwQnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBncm91cEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihzZWFyY2hLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChzZWFyY2hLZXksIE5PVF9TRVQpICE9PSBOT1RfU0VUO1xuICAgIH0sXG5cbiAgICBoYXNJbjogZnVuY3Rpb24oc2VhcmNoS2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW4oc2VhcmNoS2V5UGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gICAgfSxcblxuICAgIGlzU3Vic2V0OiBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gdHlwZW9mIGl0ZXIuaW5jbHVkZXMgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogSXRlcmFibGUoaXRlcik7XG4gICAgICByZXR1cm4gdGhpcy5ldmVyeShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgaXNTdXBlcnNldDogZnVuY3Rpb24oaXRlcikge1xuICAgICAgaXRlciA9IHR5cGVvZiBpdGVyLmlzU3Vic2V0ID09PSAnZnVuY3Rpb24nID8gaXRlciA6IEl0ZXJhYmxlKGl0ZXIpO1xuICAgICAgcmV0dXJuIGl0ZXIuaXNTdWJzZXQodGhpcyk7XG4gICAgfSxcblxuICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChrZXlNYXBwZXIpLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cbiAgICBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpcnN0KCk7XG4gICAgfSxcblxuICAgIG1heDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvcik7XG4gICAgfSxcblxuICAgIG1heEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcik7XG4gICAgfSxcblxuICAgIG1pbjogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yKTtcbiAgICB9LFxuXG4gICAgbWluQnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yLCBtYXBwZXIpO1xuICAgIH0sXG5cbiAgICByZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuICAgIH0sXG5cbiAgICBza2lwOiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKE1hdGgubWF4KDAsIGFtb3VudCkpO1xuICAgIH0sXG5cbiAgICBza2lwTGFzdDogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS5za2lwKGFtb3VudCkucmV2ZXJzZSgpKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBza2lwVW50aWw6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2tpcFdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9LFxuXG4gICAgdGFrZTogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBNYXRoLm1heCgwLCBhbW91bnQpKTtcbiAgICB9LFxuXG4gICAgdGFrZUxhc3Q6IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkudGFrZShhbW91bnQpLnJldmVyc2UoKSk7XG4gICAgfSxcblxuICAgIHRha2VXaGlsZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGFrZVdoaWxlRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgdGFrZVVudGlsOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2VXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIHZhbHVlU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBIYXNoYWJsZSBPYmplY3RcblxuICAgIGhhc2hDb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faGFzaCB8fCAodGhpcy5fX2hhc2ggPSBoYXNoSXRlcmFibGUodGhpcykpO1xuICAgIH1cblxuXG4gICAgLy8gIyMjIEludGVybmFsXG5cbiAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGUoZm4sIHJldmVyc2UpXG5cbiAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpXG4gIH0pO1xuXG4gIC8vIHZhciBJU19JVEVSQUJMRV9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lURVJBQkxFX19AQCc7XG4gIC8vIHZhciBJU19LRVlFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0tFWUVEX19AQCc7XG4gIC8vIHZhciBJU19JTkRFWEVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnO1xuICAvLyB2YXIgSVNfT1JERVJFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX09SREVSRURfX0BAJztcblxuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIEl0ZXJhYmxlUHJvdG90eXBlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSA9IHRydWU7XG4gIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBJdGVyYWJsZVByb3RvdHlwZS52YWx1ZXM7XG4gIEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9KUyA9IEl0ZXJhYmxlUHJvdG90eXBlLnRvQXJyYXk7XG4gIEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBxdW90ZVN0cmluZztcbiAgSXRlcmFibGVQcm90b3R5cGUuaW5zcGVjdCA9XG4gIEl0ZXJhYmxlUHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnRvU3RyaW5nKCk7IH07XG4gIEl0ZXJhYmxlUHJvdG90eXBlLmNoYWluID0gSXRlcmFibGVQcm90b3R5cGUuZmxhdE1hcDtcbiAgSXRlcmFibGVQcm90b3R5cGUuY29udGFpbnMgPSBJdGVyYWJsZVByb3RvdHlwZS5pbmNsdWRlcztcblxuICAvLyBUZW1wb3Jhcnkgd2FybmluZyBhYm91dCB1c2luZyBsZW5ndGhcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIUl0ZXJhYmxlLm5vTGVuZ3RoV2FybmluZykge1xuICAgICAgICAgICAgdmFyIHN0YWNrO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBzdGFjayA9IGVycm9yLnN0YWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWNrLmluZGV4T2YoJ193cmFwT2JqZWN0JykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUgJiYgY29uc29sZS53YXJuICYmIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAnaXRlcmFibGUubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcrXG4gICAgICAgICAgICAgICAgJ3VzZSBpdGVyYWJsZS5zaXplIG9yIGl0ZXJhYmxlLmNvdW50KCkuICcrXG4gICAgICAgICAgICAgICAgJ1RoaXMgd2FybmluZyB3aWxsIGJlY29tZSBhIHNpbGVudCBlcnJvciBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAnICtcbiAgICAgICAgICAgICAgICBzdGFja1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSkoKTtcblxuXG5cbiAgbWl4aW4oS2V5ZWRJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cbiAgICBmbGlwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGlwRmFjdG9yeSh0aGlzKSk7XG4gICAgfSxcblxuICAgIGZpbmRLZXk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVswXTtcbiAgICB9LFxuXG4gICAgZmluZExhc3RLZXk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmluZEtleShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBrZXlPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRLZXkoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgbGFzdEtleU9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZExhc3RLZXkoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgbWFwRW50cmllczogZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcyxcbiAgICAgICAgdGhpcy50b1NlcSgpLm1hcChcbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBtYXBwZXIuY2FsbChjb250ZXh0LCBbaywgdl0sIGl0ZXJhdGlvbnMrKywgdGhpcyQwKX1cbiAgICAgICAgKS5mcm9tRW50cnlTZXEoKVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgbWFwS2V5czogZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcyxcbiAgICAgICAgdGhpcy50b1NlcSgpLmZsaXAoKS5tYXAoXG4gICAgICAgICAgZnVuY3Rpb24oaywgdikgIHtyZXR1cm4gbWFwcGVyLmNhbGwoY29udGV4dCwgaywgdiwgdGhpcyQwKX1cbiAgICAgICAgKS5mbGlwKClcbiAgICAgICk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIHZhciBLZXllZEl0ZXJhYmxlUHJvdG90eXBlID0gS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGU7XG4gIEtleWVkSXRlcmFibGVQcm90b3R5cGVbSVNfS0VZRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcztcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZS5fX3RvSlMgPSBJdGVyYWJsZVByb3RvdHlwZS50b09iamVjdDtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZS5fX3RvU3RyaW5nTWFwcGVyID0gZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoaykgKyAnOiAnICsgcXVvdGVTdHJpbmcodil9O1xuXG5cblxuICBtaXhpbihJbmRleGVkSXRlcmFibGUsIHtcblxuICAgIC8vICMjIyBDb252ZXJzaW9uIHRvIG90aGVyIHR5cGVzXG5cbiAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9LZXllZFNlcXVlbmNlKHRoaXMsIGZhbHNlKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBmaWx0ZXI6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZpbHRlckZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzBdIDogLTE7XG4gICAgfSxcblxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIga2V5ID0gdGhpcy50b0tleWVkU2VxKCkua2V5T2Yoc2VhcmNoVmFsdWUpO1xuICAgICAgcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID8gLTEgOiBrZXk7XG4gICAgfSxcblxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5rZXlPZihzZWFyY2hWYWx1ZSk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcblxuICAgICAgLy8gdmFyIGluZGV4ID1cbiAgICAgIC8vIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCByZXZlcnNlRmFjdG9yeSh0aGlzLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzcGxpY2U6IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVOdW0gLyosIC4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgbnVtQXJncyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICByZW1vdmVOdW0gPSBNYXRoLm1heChyZW1vdmVOdW0gfCAwLCAwKTtcbiAgICAgIGlmIChudW1BcmdzID09PSAwIHx8IChudW1BcmdzID09PSAyICYmICFyZW1vdmVOdW0pKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgLy8gSWYgaW5kZXggaXMgbmVnYXRpdmUsIGl0IHNob3VsZCByZXNvbHZlIHJlbGF0aXZlIHRvIHRoZSBzaXplIG9mIHRoZVxuICAgICAgLy8gY29sbGVjdGlvbi4gSG93ZXZlciBzaXplIG1heSBiZSBleHBlbnNpdmUgdG8gY29tcHV0ZSBpZiBub3QgY2FjaGVkLCBzb1xuICAgICAgLy8gb25seSBjYWxsIGNvdW50KCkgaWYgdGhlIG51bWJlciBpcyBpbiBmYWN0IG5lZ2F0aXZlLlxuICAgICAgaW5kZXggPSByZXNvbHZlQmVnaW4oaW5kZXgsIGluZGV4IDwgMCA/IHRoaXMuY291bnQoKSA6IHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgc3BsaWNlZCA9IHRoaXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgcmV0dXJuIHJlaWZ5KFxuICAgICAgICB0aGlzLFxuICAgICAgICBudW1BcmdzID09PSAxID9cbiAgICAgICAgICBzcGxpY2VkIDpcbiAgICAgICAgICBzcGxpY2VkLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cywgMiksIHRoaXMuc2xpY2UoaW5kZXggKyByZW1vdmVOdW0pKVxuICAgICAgKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgTW9yZSBjb2xsZWN0aW9uIG1ldGhvZHNcblxuICAgIGZpbmRMYXN0SW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmZpbmRMYXN0S2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcbiAgICB9LFxuXG4gICAgZmlyc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApO1xuICAgIH0sXG5cbiAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIChpbmRleCA8IDAgfHwgKHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHxcbiAgICAgICAgICAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPiB0aGlzLnNpemUpKSkgP1xuICAgICAgICBub3RTZXRWYWx1ZSA6XG4gICAgICAgIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGtleSA9PT0gaW5kZXh9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgdGhpcy5zaXplID09PSBJbmZpbml0eSB8fCBpbmRleCA8IHRoaXMuc2l6ZSA6XG4gICAgICAgIHRoaXMuaW5kZXhPZihpbmRleCkgIT09IC0xXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBpbnRlcnBvc2U6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVycG9zZUZhY3RvcnkodGhpcywgc2VwYXJhdG9yKSk7XG4gICAgfSxcblxuICAgIGludGVybGVhdmU6IGZ1bmN0aW9uKC8qLi4uaXRlcmFibGVzKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgICB2YXIgemlwcGVkID0gemlwV2l0aEZhY3RvcnkodGhpcy50b1NlcSgpLCBJbmRleGVkU2VxLm9mLCBpdGVyYWJsZXMpO1xuICAgICAgdmFyIGludGVybGVhdmVkID0gemlwcGVkLmZsYXR0ZW4odHJ1ZSk7XG4gICAgICBpZiAoemlwcGVkLnNpemUpIHtcbiAgICAgICAgaW50ZXJsZWF2ZWQuc2l6ZSA9IHppcHBlZC5zaXplICogaXRlcmFibGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcmxlYXZlZCk7XG4gICAgfSxcblxuICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KC0xKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgemlwOiBmdW5jdGlvbigvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gW3RoaXNdLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cykpO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIGRlZmF1bHRaaXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH0sXG5cbiAgICB6aXBXaXRoOiBmdW5jdGlvbih6aXBwZXIvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gYXJyQ29weShhcmd1bWVudHMpO1xuICAgICAgaXRlcmFibGVzWzBdID0gdGhpcztcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB6aXBXaXRoRmFjdG9yeSh0aGlzLCB6aXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH1cblxuICB9KTtcblxuICBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlW0lTX0lOREVYRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cblxuXG4gIG1peGluKFNldEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHZhbHVlLCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKHZhbHVlKSA/IHZhbHVlIDogbm90U2V0VmFsdWU7XG4gICAgfSxcblxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKHZhbHVlKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblxuICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZVNlcSgpO1xuICAgIH1cblxuICB9KTtcblxuICBTZXRJdGVyYWJsZS5wcm90b3R5cGUuaGFzID0gSXRlcmFibGVQcm90b3R5cGUuaW5jbHVkZXM7XG5cblxuICAvLyBNaXhpbiBzdWJjbGFzc2VzXG5cbiAgbWl4aW4oS2V5ZWRTZXEsIEtleWVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oSW5kZXhlZFNlcSwgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG4gIG1peGluKFNldFNlcSwgU2V0SXRlcmFibGUucHJvdG90eXBlKTtcblxuICBtaXhpbihLZXllZENvbGxlY3Rpb24sIEtleWVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oSW5kZXhlZENvbGxlY3Rpb24sIEluZGV4ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihTZXRDb2xsZWN0aW9uLCBTZXRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXG5cbiAgLy8gI3ByYWdtYSBIZWxwZXIgZnVuY3Rpb25zXG5cbiAgZnVuY3Rpb24ga2V5TWFwcGVyKHYsIGspIHtcbiAgICByZXR1cm4gaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJ5TWFwcGVyKHYsIGspIHtcbiAgICByZXR1cm4gW2ssIHZdO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90KHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbmVnKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAtcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcXVvdGVTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFppcHBlcigpIHtcbiAgICByZXR1cm4gYXJyQ29weShhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdE5lZ0NvbXBhcmF0b3IoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IDEgOiBhID4gYiA/IC0xIDogMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2hJdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZS5zaXplID09PSBJbmZpbml0eSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciBvcmRlcmVkID0gaXNPcmRlcmVkKGl0ZXJhYmxlKTtcbiAgICB2YXIga2V5ZWQgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaCA9IG9yZGVyZWQgPyAxIDogMDtcbiAgICB2YXIgc2l6ZSA9IGl0ZXJhYmxlLl9faXRlcmF0ZShcbiAgICAgIGtleWVkID9cbiAgICAgICAgb3JkZXJlZCA/XG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHsgaCA9IDMxICogaCArIGhhc2hNZXJnZShoYXNoKHYpLCBoYXNoKGspKSB8IDA7IH0gOlxuICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7IGggPSBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG4gICAgICAgIG9yZGVyZWQgP1xuICAgICAgICAgIGZ1bmN0aW9uKHYgKSB7IGggPSAzMSAqIGggKyBoYXNoKHYpIHwgMDsgfSA6XG4gICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IGggKyBoYXNoKHYpIHwgMDsgfVxuICAgICk7XG4gICAgcmV0dXJuIG11cm11ckhhc2hPZlNpemUoc2l6ZSwgaCk7XG4gIH1cblxuICBmdW5jdGlvbiBtdXJtdXJIYXNoT2ZTaXplKHNpemUsIGgpIHtcbiAgICBoID0gaW11bChoLCAweENDOUUyRDUxKTtcbiAgICBoID0gaW11bChoIDw8IDE1IHwgaCA+Pj4gLTE1LCAweDFCODczNTkzKTtcbiAgICBoID0gaW11bChoIDw8IDEzIHwgaCA+Pj4gLTEzLCA1KTtcbiAgICBoID0gKGggKyAweEU2NTQ2QjY0IHwgMCkgXiBzaXplO1xuICAgIGggPSBpbXVsKGggXiBoID4+PiAxNiwgMHg4NUVCQ0E2Qik7XG4gICAgaCA9IGltdWwoaCBeIGggPj4+IDEzLCAweEMyQjJBRTM1KTtcbiAgICBoID0gc21pKGggXiBoID4+PiAxNik7XG4gICAgcmV0dXJuIGg7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNoTWVyZ2UoYSwgYikge1xuICAgIHJldHVybiBhIF4gYiArIDB4OUUzNzc5QjkgKyAoYSA8PCA2KSArIChhID4+IDIpIHwgMDsgLy8gaW50XG4gIH1cblxuICB2YXIgSW1tdXRhYmxlID0ge1xuXG4gICAgSXRlcmFibGU6IEl0ZXJhYmxlLFxuXG4gICAgU2VxOiBTZXEsXG4gICAgQ29sbGVjdGlvbjogQ29sbGVjdGlvbixcbiAgICBNYXA6IE1hcCxcbiAgICBPcmRlcmVkTWFwOiBPcmRlcmVkTWFwLFxuICAgIExpc3Q6IExpc3QsXG4gICAgU3RhY2s6IFN0YWNrLFxuICAgIFNldDogU2V0LFxuICAgIE9yZGVyZWRTZXQ6IE9yZGVyZWRTZXQsXG5cbiAgICBSZWNvcmQ6IFJlY29yZCxcbiAgICBSYW5nZTogUmFuZ2UsXG4gICAgUmVwZWF0OiBSZXBlYXQsXG5cbiAgICBpczogaXMsXG4gICAgZnJvbUpTOiBmcm9tSlNcblxuICB9O1xuXG4gIHJldHVybiBJbW11dGFibGU7XG5cbn0pKTsiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJJbW11dGFibGUiLCJTTElDRSQwIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNyZWF0ZUNsYXNzIiwiY3RvciIsInN1cGVyQ2xhc3MiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIkl0ZXJhYmxlIiwidmFsdWUiLCJpc0l0ZXJhYmxlIiwiU2VxIiwiS2V5ZWRJdGVyYWJsZSIsImlzS2V5ZWQiLCJLZXllZFNlcSIsIkluZGV4ZWRJdGVyYWJsZSIsImlzSW5kZXhlZCIsIkluZGV4ZWRTZXEiLCJTZXRJdGVyYWJsZSIsImlzQXNzb2NpYXRpdmUiLCJTZXRTZXEiLCJtYXliZUl0ZXJhYmxlIiwiSVNfSVRFUkFCTEVfU0VOVElORUwiLCJtYXliZUtleWVkIiwiSVNfS0VZRURfU0VOVElORUwiLCJtYXliZUluZGV4ZWQiLCJJU19JTkRFWEVEX1NFTlRJTkVMIiwibWF5YmVBc3NvY2lhdGl2ZSIsImlzT3JkZXJlZCIsIm1heWJlT3JkZXJlZCIsIklTX09SREVSRURfU0VOVElORUwiLCJLZXllZCIsIkluZGV4ZWQiLCJTZXQiLCJERUxFVEUiLCJTSElGVCIsIlNJWkUiLCJNQVNLIiwiTk9UX1NFVCIsIkNIQU5HRV9MRU5HVEgiLCJESURfQUxURVIiLCJNYWtlUmVmIiwicmVmIiwiU2V0UmVmIiwiT3duZXJJRCIsImFyckNvcHkiLCJhcnIiLCJvZmZzZXQiLCJsZW4iLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwibmV3QXJyIiwiaWkiLCJlbnN1cmVTaXplIiwiaXRlciIsInNpemUiLCJ1bmRlZmluZWQiLCJfX2l0ZXJhdGUiLCJyZXR1cm5UcnVlIiwid3JhcEluZGV4IiwiaW5kZXgiLCJ1aW50MzJJbmRleCIsIk5hTiIsIndob2xlU2xpY2UiLCJiZWdpbiIsImVuZCIsInJlc29sdmVCZWdpbiIsInJlc29sdmVJbmRleCIsInJlc29sdmVFbmQiLCJkZWZhdWx0SW5kZXgiLCJtaW4iLCJJVEVSQVRFX0tFWVMiLCJJVEVSQVRFX1ZBTFVFUyIsIklURVJBVEVfRU5UUklFUyIsIlJFQUxfSVRFUkFUT1JfU1lNQk9MIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsIklURVJBVE9SX1NZTUJPTCIsIkl0ZXJhdG9yIiwibmV4dCIsInRvU3RyaW5nIiwiS0VZUyIsIlZBTFVFUyIsIkVOVFJJRVMiLCJpbnNwZWN0IiwidG9Tb3VyY2UiLCJpdGVyYXRvclZhbHVlIiwidHlwZSIsImsiLCJ2IiwiaXRlcmF0b3JSZXN1bHQiLCJkb25lIiwiaXRlcmF0b3JEb25lIiwiaGFzSXRlcmF0b3IiLCJnZXRJdGVyYXRvckZuIiwiaXNJdGVyYXRvciIsIm1heWJlSXRlcmF0b3IiLCJnZXRJdGVyYXRvciIsIml0ZXJhYmxlIiwiaXRlcmF0b3JGbiIsImNhbGwiLCJpc0FycmF5TGlrZSIsImVtcHR5U2VxdWVuY2UiLCJ0b1NlcSIsInNlcUZyb21WYWx1ZSIsIm9mIiwiYXJndW1lbnRzIiwiX190b1N0cmluZyIsImNhY2hlUmVzdWx0IiwiX2NhY2hlIiwiX19pdGVyYXRlVW5jYWNoZWQiLCJlbnRyeVNlcSIsInRvQXJyYXkiLCJmbiIsInJldmVyc2UiLCJzZXFJdGVyYXRlIiwiX19pdGVyYXRvciIsInNlcUl0ZXJhdG9yIiwidG9LZXllZFNlcSIsImZyb21FbnRyeVNlcSIsImtleWVkU2VxRnJvbVZhbHVlIiwiaW5kZXhlZFNlcUZyb21WYWx1ZSIsInRvSW5kZXhlZFNlcSIsInRvU2V0U2VxIiwiaXNTZXEiLCJJU19TRVFfU0VOVElORUwiLCJBcnJheVNlcSIsImFycmF5IiwiX2FycmF5IiwiZ2V0Iiwibm90U2V0VmFsdWUiLCJoYXMiLCJtYXhJbmRleCIsIk9iamVjdFNlcSIsIm9iamVjdCIsImtleXMiLCJfb2JqZWN0IiwiX2tleXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIkl0ZXJhYmxlU2VxIiwiX2l0ZXJhYmxlIiwiaXRlcmF0aW9ucyIsInN0ZXAiLCJfX2l0ZXJhdG9yVW5jYWNoZWQiLCJJdGVyYXRvclNlcSIsIl9pdGVyYXRvciIsIl9pdGVyYXRvckNhY2hlIiwiY2FjaGUiLCJ2YWwiLCJtYXliZVNlcSIsIkVNUFRZX1NFUSIsInNlcSIsImlzQXJyYXkiLCJUeXBlRXJyb3IiLCJtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUiLCJ1c2VLZXlzIiwiZW50cnkiLCJmcm9tSlMiLCJqc29uIiwiY29udmVydGVyIiwiZnJvbUpTV2l0aCIsImZyb21KU0RlZmF1bHQiLCJwYXJlbnRKU09OIiwibWFwIiwiaXNQbGFpbk9iaiIsInRvTGlzdCIsInRvTWFwIiwiaXMiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJ2YWx1ZU9mIiwiZXF1YWxzIiwiZGVlcEVxdWFsIiwiYSIsImIiLCJfX2hhc2giLCJub3RBc3NvY2lhdGl2ZSIsImVudHJpZXMiLCJldmVyeSIsImZsaXBwZWQiLCJfIiwiYWxsRXF1YWwiLCJiU2l6ZSIsIlJlcGVhdCIsInRpbWVzIiwiX3ZhbHVlIiwiSW5maW5pdHkiLCJFTVBUWV9SRVBFQVQiLCJpbmNsdWRlcyIsInNlYXJjaFZhbHVlIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwidGhpcyQwIiwib3RoZXIiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJlcnJvciIsIkVycm9yIiwiUmFuZ2UiLCJzdGFydCIsImFicyIsIl9zdGFydCIsIl9lbmQiLCJfc3RlcCIsImNlaWwiLCJFTVBUWV9SQU5HRSIsInBvc3NpYmxlSW5kZXgiLCJmbG9vciIsIm9mZnNldFZhbHVlIiwiQ29sbGVjdGlvbiIsIktleWVkQ29sbGVjdGlvbiIsIkluZGV4ZWRDb2xsZWN0aW9uIiwiU2V0Q29sbGVjdGlvbiIsImltdWwiLCJjIiwiZCIsInNtaSIsImkzMiIsImhhc2giLCJvIiwiaCIsIlNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4iLCJjYWNoZWRIYXNoU3RyaW5nIiwiaGFzaFN0cmluZyIsImhhc2hDb2RlIiwiaGFzaEpTT2JqIiwic3RyaW5nIiwic3RyaW5nSGFzaENhY2hlIiwiU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSIsIlNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFIiwiY2hhckNvZGVBdCIsIm9iaiIsInVzaW5nV2Vha01hcCIsIndlYWtNYXAiLCJVSURfSEFTSF9LRVkiLCJjYW5EZWZpbmVQcm9wZXJ0eSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0SUVOb2RlSGFzaCIsIm9iakhhc2hVSUQiLCJzZXQiLCJpc0V4dGVuc2libGUiLCJkZWZpbmVQcm9wZXJ0eSIsImFwcGx5Iiwibm9kZVR5cGUiLCJlIiwibm9kZSIsInVuaXF1ZUlEIiwiZG9jdW1lbnRFbGVtZW50IiwiV2Vha01hcCIsImFzc2VydE5vdEluZmluaXRlIiwiTWFwIiwiZW1wdHlNYXAiLCJpc01hcCIsIndpdGhNdXRhdGlvbnMiLCJmb3JFYWNoIiwiX3Jvb3QiLCJ1cGRhdGVNYXAiLCJzZXRJbiIsImtleVBhdGgiLCJ1cGRhdGVJbiIsInJlbW92ZSIsImRlbGV0ZUluIiwidXBkYXRlIiwidXBkYXRlciIsInVwZGF0ZWRWYWx1ZSIsInVwZGF0ZUluRGVlcE1hcCIsImZvcmNlSXRlcmF0b3IiLCJjbGVhciIsIl9fb3duZXJJRCIsIl9fYWx0ZXJlZCIsIm1lcmdlIiwibWVyZ2VJbnRvTWFwV2l0aCIsIm1lcmdlV2l0aCIsIm1lcmdlciIsIml0ZXJzIiwibWVyZ2VJbiIsIm0iLCJtZXJnZURlZXAiLCJkZWVwTWVyZ2VyIiwibWVyZ2VEZWVwV2l0aCIsImRlZXBNZXJnZXJXaXRoIiwibWVyZ2VEZWVwSW4iLCJzb3J0IiwiY29tcGFyYXRvciIsIk9yZGVyZWRNYXAiLCJzb3J0RmFjdG9yeSIsInNvcnRCeSIsIm1hcHBlciIsIm11dGFibGUiLCJhc011dGFibGUiLCJ3YXNBbHRlcmVkIiwiX19lbnN1cmVPd25lciIsImFzSW1tdXRhYmxlIiwiTWFwSXRlcmF0b3IiLCJpdGVyYXRlIiwib3duZXJJRCIsIm1ha2VNYXAiLCJtYXliZU1hcCIsIklTX01BUF9TRU5USU5FTCIsIk1hcFByb3RvdHlwZSIsInJlbW92ZUluIiwiQXJyYXlNYXBOb2RlIiwic2hpZnQiLCJrZXlIYXNoIiwiZGlkQ2hhbmdlU2l6ZSIsImRpZEFsdGVyIiwicmVtb3ZlZCIsImlkeCIsImV4aXN0cyIsIk1BWF9BUlJBWV9NQVBfU0laRSIsImNyZWF0ZU5vZGVzIiwiaXNFZGl0YWJsZSIsIm5ld0VudHJpZXMiLCJwb3AiLCJwdXNoIiwiQml0bWFwSW5kZXhlZE5vZGUiLCJiaXRtYXAiLCJub2RlcyIsImJpdCIsInBvcENvdW50Iiwia2V5SGFzaEZyYWciLCJuZXdOb2RlIiwidXBkYXRlTm9kZSIsIk1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFIiwiZXhwYW5kTm9kZXMiLCJpc0xlYWZOb2RlIiwibmV3Qml0bWFwIiwibmV3Tm9kZXMiLCJzcGxpY2VPdXQiLCJzcGxpY2VJbiIsIkhhc2hBcnJheU1hcE5vZGUiLCJjb3VudCIsIm5ld0NvdW50IiwiTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUiLCJwYWNrTm9kZXMiLCJIYXNoQ29sbGlzaW9uTm9kZSIsIm1lcmdlSW50b05vZGUiLCJWYWx1ZU5vZGUiLCJrZXlNYXRjaCIsIl90eXBlIiwiX3JldmVyc2UiLCJfc3RhY2siLCJtYXBJdGVyYXRvckZyYW1lIiwic3RhY2siLCJtYXBJdGVyYXRvclZhbHVlIiwic3ViTm9kZSIsIl9fcHJldiIsInByZXYiLCJyb290IiwiRU1QVFlfTUFQIiwibmV3Um9vdCIsIm5ld1NpemUiLCJpZHgxIiwiaWR4MiIsImV4Y2x1ZGluZyIsInBhY2tlZElJIiwicGFja2VkTm9kZXMiLCJpbmNsdWRpbmciLCJleHBhbmRlZE5vZGVzIiwiaXRlcmFibGVzIiwibWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgiLCJleGlzdGluZyIsIm5leHRWYWx1ZSIsImNvbGxlY3Rpb24iLCJmaWx0ZXIiLCJ4IiwibWVyZ2VJbnRvTWFwIiwia2V5UGF0aEl0ZXIiLCJpc05vdFNldCIsImV4aXN0aW5nVmFsdWUiLCJuZXdWYWx1ZSIsIm5leHRFeGlzdGluZyIsIm5leHRVcGRhdGVkIiwiY2FuRWRpdCIsIm5ld0FycmF5IiwibmV3TGVuIiwiYWZ0ZXIiLCJMaXN0IiwiZW1wdHkiLCJlbXB0eUxpc3QiLCJpc0xpc3QiLCJtYWtlTGlzdCIsIlZOb2RlIiwibGlzdCIsInNldFNpemUiLCJpIiwiX29yaWdpbiIsImxpc3ROb2RlRm9yIiwidXBkYXRlTGlzdCIsInNwbGljZSIsImluc2VydCIsIl9jYXBhY2l0eSIsIl9sZXZlbCIsIl90YWlsIiwidmFsdWVzIiwib2xkU2l6ZSIsInNldExpc3RCb3VuZHMiLCJ1bnNoaWZ0IiwibWVyZ2VJbnRvTGlzdFdpdGgiLCJpdGVyYXRlTGlzdCIsIkRPTkUiLCJtYXliZUxpc3QiLCJJU19MSVNUX1NFTlRJTkVMIiwiTGlzdFByb3RvdHlwZSIsInJlbW92ZUJlZm9yZSIsImxldmVsIiwib3JpZ2luSW5kZXgiLCJyZW1vdmluZ0ZpcnN0IiwibmV3Q2hpbGQiLCJvbGRDaGlsZCIsImVkaXRhYmxlIiwiZWRpdGFibGVWTm9kZSIsInJlbW92ZUFmdGVyIiwic2l6ZUluZGV4IiwibGVmdCIsInJpZ2h0IiwidGFpbFBvcyIsImdldFRhaWxPZmZzZXQiLCJ0YWlsIiwiaXRlcmF0ZU5vZGVPckxlYWYiLCJpdGVyYXRlTGVhZiIsIml0ZXJhdGVOb2RlIiwiZnJvbSIsInRvIiwib3JpZ2luIiwiY2FwYWNpdHkiLCJFTVBUWV9MSVNUIiwibmV3VGFpbCIsInVwZGF0ZVZOb2RlIiwibm9kZUhhcyIsImxvd2VyTm9kZSIsIm5ld0xvd2VyTm9kZSIsInJhd0luZGV4Iiwib3duZXIiLCJvbGRPcmlnaW4iLCJvbGRDYXBhY2l0eSIsIm5ld09yaWdpbiIsIm5ld0NhcGFjaXR5IiwibmV3TGV2ZWwiLCJvZmZzZXRTaGlmdCIsIm9sZFRhaWxPZmZzZXQiLCJuZXdUYWlsT2Zmc2V0Iiwib2xkVGFpbCIsImJlZ2luSW5kZXgiLCJtYXhTaXplIiwiZW1wdHlPcmRlcmVkTWFwIiwiaXNPcmRlcmVkTWFwIiwiX21hcCIsIl9saXN0IiwidXBkYXRlT3JkZXJlZE1hcCIsIm5ld01hcCIsIm5ld0xpc3QiLCJtYWtlT3JkZXJlZE1hcCIsIm1heWJlT3JkZXJlZE1hcCIsIm9tYXAiLCJFTVBUWV9PUkRFUkVEX01BUCIsImZsaXAiLCJUb0tleWVkU2VxdWVuY2UiLCJpbmRleGVkIiwiX2l0ZXIiLCJfdXNlS2V5cyIsInZhbHVlU2VxIiwicmV2ZXJzZWRTZXF1ZW5jZSIsInJldmVyc2VGYWN0b3J5IiwiY29udGV4dCIsIm1hcHBlZFNlcXVlbmNlIiwibWFwRmFjdG9yeSIsInJlc29sdmVTaXplIiwiVG9JbmRleGVkU2VxdWVuY2UiLCJUb1NldFNlcXVlbmNlIiwiRnJvbUVudHJpZXNTZXF1ZW5jZSIsInZhbGlkYXRlRW50cnkiLCJpbmRleGVkSXRlcmFibGUiLCJjYWNoZVJlc3VsdFRocm91Z2giLCJmbGlwRmFjdG9yeSIsImZsaXBTZXF1ZW5jZSIsIm1ha2VTZXF1ZW5jZSIsImZpbHRlckZhY3RvcnkiLCJwcmVkaWNhdGUiLCJmaWx0ZXJTZXF1ZW5jZSIsImNvdW50QnlGYWN0b3J5IiwiZ3JvdXBlciIsImdyb3VwcyIsImdyb3VwQnlGYWN0b3J5IiwiaXNLZXllZEl0ZXIiLCJjb2VyY2UiLCJpdGVyYWJsZUNsYXNzIiwicmVpZnkiLCJzbGljZUZhY3RvcnkiLCJvcmlnaW5hbFNpemUiLCJyZXNvbHZlZEJlZ2luIiwicmVzb2x2ZWRFbmQiLCJyZXNvbHZlZFNpemUiLCJzbGljZVNpemUiLCJzbGljZVNlcSIsInNraXBwZWQiLCJpc1NraXBwaW5nIiwidGFrZVdoaWxlRmFjdG9yeSIsInRha2VTZXF1ZW5jZSIsIml0ZXJhdGluZyIsInNraXBXaGlsZUZhY3RvcnkiLCJza2lwU2VxdWVuY2UiLCJza2lwcGluZyIsImNvbmNhdEZhY3RvcnkiLCJpc0tleWVkSXRlcmFibGUiLCJjb25jYXQiLCJzaW5nbGV0b24iLCJjb25jYXRTZXEiLCJmbGF0dGVuIiwicmVkdWNlIiwic3VtIiwiZmxhdHRlbkZhY3RvcnkiLCJkZXB0aCIsImZsYXRTZXF1ZW5jZSIsInN0b3BwZWQiLCJmbGF0RGVlcCIsImN1cnJlbnREZXB0aCIsImZsYXRNYXBGYWN0b3J5IiwiaW50ZXJwb3NlRmFjdG9yeSIsInNlcGFyYXRvciIsImludGVycG9zZWRTZXF1ZW5jZSIsImRlZmF1bHRDb21wYXJhdG9yIiwibWF4RmFjdG9yeSIsIm1heENvbXBhcmUiLCJjb21wIiwiemlwV2l0aEZhY3RvcnkiLCJrZXlJdGVyIiwiemlwcGVyIiwiemlwU2VxdWVuY2UiLCJpdGVyYXRvcnMiLCJpc0RvbmUiLCJzdGVwcyIsInNvbWUiLCJzIiwiUmVjb3JkIiwiZGVmYXVsdFZhbHVlcyIsIm5hbWUiLCJoYXNJbml0aWFsaXplZCIsIlJlY29yZFR5cGUiLCJzZXRQcm9wcyIsIlJlY29yZFR5cGVQcm90b3R5cGUiLCJfbmFtZSIsIl9kZWZhdWx0VmFsdWVzIiwiUmVjb3JkUHJvdG90eXBlIiwicmVjb3JkTmFtZSIsImRlZmF1bHRWYWwiLCJfZW1wdHkiLCJtYWtlUmVjb3JkIiwibGlrZVJlY29yZCIsInJlY29yZCIsImdldFByb3RvdHlwZU9mIiwibmFtZXMiLCJzZXRQcm9wIiwiYmluZCIsImVtcHR5U2V0IiwiaXNTZXQiLCJhZGQiLCJmcm9tS2V5cyIsImtleVNlcSIsInVwZGF0ZVNldCIsInVuaW9uIiwiaW50ZXJzZWN0Iiwib3JpZ2luYWxTZXQiLCJzdWJ0cmFjdCIsIk9yZGVyZWRTZXQiLCJfX21ha2UiLCJtYXliZVNldCIsIklTX1NFVF9TRU5USU5FTCIsIlNldFByb3RvdHlwZSIsIl9fZW1wdHkiLCJtYWtlU2V0IiwiRU1QVFlfU0VUIiwiZW1wdHlPcmRlcmVkU2V0IiwiaXNPcmRlcmVkU2V0IiwibWF5YmVPcmRlcmVkU2V0IiwiT3JkZXJlZFNldFByb3RvdHlwZSIsIm1ha2VPcmRlcmVkU2V0IiwiRU1QVFlfT1JERVJFRF9TRVQiLCJTdGFjayIsImVtcHR5U3RhY2siLCJpc1N0YWNrIiwidW5zaGlmdEFsbCIsImhlYWQiLCJfaGVhZCIsInBlZWsiLCJtYWtlU3RhY2siLCJwdXNoQWxsIiwibWF5YmVTdGFjayIsIklTX1NUQUNLX1NFTlRJTkVMIiwiU3RhY2tQcm90b3R5cGUiLCJFTVBUWV9TVEFDSyIsIm1peGluIiwibWV0aG9kcyIsImtleUNvcGllciIsImdldE93blByb3BlcnR5U3ltYm9scyIsInRvSlMiLCJfX3RvSlMiLCJ0b0pTT04iLCJ0b09iamVjdCIsInRvT3JkZXJlZE1hcCIsInRvT3JkZXJlZFNldCIsInRvU2V0IiwidG9TdGFjayIsIl9fdG9TdHJpbmdNYXBwZXIiLCJqb2luIiwicmV0dXJuVmFsdWUiLCJmaW5kIiwiZmluZEVudHJ5IiwiZm91bmQiLCJmaW5kTGFzdEVudHJ5Iiwic2lkZUVmZmVjdCIsImpvaW5lZCIsImlzRmlyc3QiLCJyZWR1Y2VyIiwiaW5pdGlhbFJlZHVjdGlvbiIsInJlZHVjdGlvbiIsInVzZUZpcnN0IiwicmVkdWNlUmlnaHQiLCJyZXZlcnNlZCIsIm5vdCIsImJ1dExhc3QiLCJpc0VtcHR5IiwiY291bnRCeSIsImVudHJpZXNTZXF1ZW5jZSIsImVudHJ5TWFwcGVyIiwiZmlsdGVyTm90IiwiZmluZExhc3QiLCJmaXJzdCIsImZsYXRNYXAiLCJzZWFyY2hLZXkiLCJnZXRJbiIsInNlYXJjaEtleVBhdGgiLCJuZXN0ZWQiLCJncm91cEJ5IiwiaGFzSW4iLCJpc1N1YnNldCIsImlzU3VwZXJzZXQiLCJrZXlNYXBwZXIiLCJsYXN0IiwibWF4QnkiLCJuZWciLCJkZWZhdWx0TmVnQ29tcGFyYXRvciIsIm1pbkJ5IiwicmVzdCIsInNraXAiLCJhbW91bnQiLCJza2lwTGFzdCIsInNraXBXaGlsZSIsInNraXBVbnRpbCIsInRha2UiLCJ0YWtlTGFzdCIsInRha2VXaGlsZSIsInRha2VVbnRpbCIsImhhc2hJdGVyYWJsZSIsIkl0ZXJhYmxlUHJvdG90eXBlIiwicXVvdGVTdHJpbmciLCJjaGFpbiIsImNvbnRhaW5zIiwibm9MZW5ndGhXYXJuaW5nIiwiY29uc29sZSIsIndhcm4iLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJrZXlPZiIsImxhc3RLZXlPZiIsIm1hcEVudHJpZXMiLCJtYXBLZXlzIiwiS2V5ZWRJdGVyYWJsZVByb3RvdHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaW5kSW5kZXgiLCJyZW1vdmVOdW0iLCJudW1BcmdzIiwic3BsaWNlZCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnBvc2UiLCJpbnRlcmxlYXZlIiwiemlwcGVkIiwiaW50ZXJsZWF2ZWQiLCJ6aXAiLCJkZWZhdWx0WmlwcGVyIiwiemlwV2l0aCIsIm9yZGVyZWQiLCJrZXllZCIsImhhc2hNZXJnZSIsIm11cm11ckhhc2hPZlNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/dist/Draft.css":
/*!**********************************************!*\
  !*** ./node_modules/draft-js/dist/Draft.css ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6e11711d47b9\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvZGlzdC9EcmFmdC5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcXVpcC12ZWxvLWZvci1uZXh0anMvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvZGlzdC9EcmFmdC5jc3M/MmFiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjZlMTE3MTFkNDdiOVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/dist/Draft.css\n");

/***/ })

};
;